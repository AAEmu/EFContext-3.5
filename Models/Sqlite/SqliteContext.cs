using Microsoft.EntityFrameworkCore;
using AAEmu.Shared.IO;

namespace AAEmu.Shared.Database.Models.Sqlite
{
    public partial class SqliteContext : DbContext
    {
        public SqliteContext()
        {
        }

        public SqliteContext(DbContextOptions<SqliteContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AcceptQuestEffects> AcceptQuestEffects { get; set; }
        public virtual DbSet<AccountAttendanceRewards> AccountAttendanceRewards { get; set; }
        public virtual DbSet<AccountAttributeEffects> AccountAttributeEffects { get; set; }
        public virtual DbSet<AchievementObjectives> AchievementObjectives { get; set; }
        public virtual DbSet<Achievements> Achievements { get; set; }
        public virtual DbSet<ActabilityCategories> ActabilityCategories { get; set; }
        public virtual DbSet<ActabilityGroups> ActabilityGroups { get; set; }
        public virtual DbSet<ActabilityViewGroupElems> ActabilityViewGroupElems { get; set; }
        public virtual DbSet<ActabilityViewGroups> ActabilityViewGroups { get; set; }
        public virtual DbSet<ActorModels> ActorModels { get; set; }
        public virtual DbSet<AggroEffects> AggroEffects { get; set; }
        public virtual DbSet<AiEvents> AiEvents { get; set; }
        public virtual DbSet<AiFiles> AiFiles { get; set; }
        public virtual DbSet<AllowToEquipSlaves> AllowToEquipSlaves { get; set; }
        public virtual DbSet<AllowToEquipSlots> AllowToEquipSlots { get; set; }
        public virtual DbSet<AllowedNameChars> AllowedNameChars { get; set; }
        public virtual DbSet<AnimActions> AnimActions { get; set; }
        public virtual DbSet<AnimRules> AnimRules { get; set; }
        public virtual DbSet<Anims> Anims { get; set; }
        public virtual DbSet<AoeDiminishings> AoeDiminishings { get; set; }
        public virtual DbSet<AoeShapes> AoeShapes { get; set; }
        public virtual DbSet<Appellations> Appellations { get; set; }
        public virtual DbSet<AreaEventCheckNpcs> AreaEventCheckNpcs { get; set; }
        public virtual DbSet<ArmorAssets> ArmorAssets { get; set; }
        public virtual DbSet<ArmorGradeBuffs> ArmorGradeBuffs { get; set; }
        public virtual DbSet<AttachAnims> AttachAnims { get; set; }
        public virtual DbSet<AttachmentAnims> AttachmentAnims { get; set; }
        public virtual DbSet<Attachments> Attachments { get; set; }
        public virtual DbSet<AuctionACategories> AuctionACategories { get; set; }
        public virtual DbSet<AuctionBCategories> AuctionBCategories { get; set; }
        public virtual DbSet<AuctionCCategories> AuctionCCategories { get; set; }
        public virtual DbSet<BagExpands> BagExpands { get; set; }
        public virtual DbSet<BattleCoins> BattleCoins { get; set; }
        public virtual DbSet<BattleFieldBannedTags> BattleFieldBannedTags { get; set; }
        public virtual DbSet<BattleFieldBuffs> BattleFieldBuffs { get; set; }
        public virtual DbSet<BattleFieldHonorBuffs> BattleFieldHonorBuffs { get; set; }
        public virtual DbSet<BattleFieldPermittedTags> BattleFieldPermittedTags { get; set; }
        public virtual DbSet<BattleFieldPickBuffs> BattleFieldPickBuffs { get; set; }
        public virtual DbSet<BattleFieldRewards> BattleFieldRewards { get; set; }
        public virtual DbSet<BattleFieldShipEquipments> BattleFieldShipEquipments { get; set; }
        public virtual DbSet<BattleFieldShips> BattleFieldShips { get; set; }
        public virtual DbSet<BattleFields> BattleFields { get; set; }
        public virtual DbSet<BlockedChildDoodads> BlockedChildDoodads { get; set; }
        public virtual DbSet<BlockedTexts> BlockedTexts { get; set; }
        public virtual DbSet<BodyDiffuseMaps> BodyDiffuseMaps { get; set; }
        public virtual DbSet<BodyNormalMaps> BodyNormalMaps { get; set; }
        public virtual DbSet<BookElems> BookElems { get; set; }
        public virtual DbSet<BookPageContents> BookPageContents { get; set; }
        public virtual DbSet<BookPages> BookPages { get; set; }
        public virtual DbSet<Books> Books { get; set; }
        public virtual DbSet<BubbleChats> BubbleChats { get; set; }
        public virtual DbSet<BubbleEffects> BubbleEffects { get; set; }
        public virtual DbSet<Bubbles> Bubbles { get; set; }
        public virtual DbSet<BuffEffects> BuffEffects { get; set; }
        public virtual DbSet<BuffModifiers> BuffModifiers { get; set; }
        public virtual DbSet<BuffMountSkills> BuffMountSkills { get; set; }
        public virtual DbSet<BuffPassiveBuffs> BuffPassiveBuffs { get; set; }
        public virtual DbSet<BuffSkills> BuffSkills { get; set; }
        public virtual DbSet<BuffSwapSkills> BuffSwapSkills { get; set; }
        public virtual DbSet<BuffTickEffects> BuffTickEffects { get; set; }
        public virtual DbSet<BuffTriggers> BuffTriggers { get; set; }
        public virtual DbSet<BuffUnitModifiers> BuffUnitModifiers { get; set; }
        public virtual DbSet<BuffVisualChanges> BuffVisualChanges { get; set; }
        public virtual DbSet<Buffs> Buffs { get; set; }
        public virtual DbSet<ChangeEquipmentBuffs> ChangeEquipmentBuffs { get; set; }
        public virtual DbSet<CharRecords> CharRecords { get; set; }
        public virtual DbSet<CharacterBuffs> CharacterBuffs { get; set; }
        public virtual DbSet<CharacterCustomizingHairAssets> CharacterCustomizingHairAssets { get; set; }
        public virtual DbSet<CharacterDefaultSkills> CharacterDefaultSkills { get; set; }
        public virtual DbSet<CharacterEquipPacks> CharacterEquipPacks { get; set; }
        public virtual DbSet<CharacterIdleBuffs> CharacterIdleBuffs { get; set; }
        public virtual DbSet<CharacterPStatLimits> CharacterPStatLimits { get; set; }
        public virtual DbSet<CharacterPreviewCloths> CharacterPreviewCloths { get; set; }
        public virtual DbSet<CharacterSupplies> CharacterSupplies { get; set; }
        public virtual DbSet<Characters> Characters { get; set; }
        public virtual DbSet<ChatCommands> ChatCommands { get; set; }
        public virtual DbSet<ChatSpamRuleDetails> ChatSpamRuleDetails { get; set; }
        public virtual DbSet<ChatSpamRules> ChatSpamRules { get; set; }
        public virtual DbSet<CinemaCaptions> CinemaCaptions { get; set; }
        public virtual DbSet<CinemaSubtitles> CinemaSubtitles { get; set; }
        public virtual DbSet<Cinemas> Cinemas { get; set; }
        public virtual DbSet<CleanupUccEffects> CleanupUccEffects { get; set; }
        public virtual DbSet<Climates> Climates { get; set; }
        public virtual DbSet<CombatSounds> CombatSounds { get; set; }
        public virtual DbSet<CommonFarms> CommonFarms { get; set; }
        public virtual DbSet<ConflictZoneNpcKills> ConflictZoneNpcKills { get; set; }
        public virtual DbSet<ConflictZoneQuestCompletions> ConflictZoneQuestCompletions { get; set; }
        public virtual DbSet<ConflictZones> ConflictZones { get; set; }
        public virtual DbSet<Constants> Constants { get; set; }
        public virtual DbSet<ContentConfigs> ContentConfigs { get; set; }
        public virtual DbSet<ConversionEffects> ConversionEffects { get; set; }
        public virtual DbSet<CraftEffects> CraftEffects { get; set; }
        public virtual DbSet<CraftMaterials> CraftMaterials { get; set; }
        public virtual DbSet<CraftPackCrafts> CraftPackCrafts { get; set; }
        public virtual DbSet<CraftPacks> CraftPacks { get; set; }
        public virtual DbSet<CraftProducts> CraftProducts { get; set; }
        public virtual DbSet<Crafts> Crafts { get; set; }
        public virtual DbSet<CurrencyConfigs> CurrencyConfigs { get; set; }
        public virtual DbSet<CustomDualMaterials> CustomDualMaterials { get; set; }
        public virtual DbSet<CustomFacePresets> CustomFacePresets { get; set; }
        public virtual DbSet<CustomFontColors> CustomFontColors { get; set; }
        public virtual DbSet<CustomHairTextures> CustomHairTextures { get; set; }
        public virtual DbSet<CustomizingItemAssetColors> CustomizingItemAssetColors { get; set; }
        public virtual DbSet<CustomizingItemAssets> CustomizingItemAssets { get; set; }
        public virtual DbSet<DamageEffects> DamageEffects { get; set; }
        public virtual DbSet<DecoActabilityGroups> DecoActabilityGroups { get; set; }
        public virtual DbSet<DefaultInventoryTabGroups> DefaultInventoryTabGroups { get; set; }
        public virtual DbSet<DefaultInventoryTabs> DefaultInventoryTabs { get; set; }
        public virtual DbSet<DefaultSkills> DefaultSkills { get; set; }
        public virtual DbSet<DemoBagItems> DemoBagItems { get; set; }
        public virtual DbSet<DemoBags> DemoBags { get; set; }
        public virtual DbSet<DemoChars> DemoChars { get; set; }
        public virtual DbSet<DemoEquipItems> DemoEquipItems { get; set; }
        public virtual DbSet<DemoEquips> DemoEquips { get; set; }
        public virtual DbSet<DemoLocs> DemoLocs { get; set; }
        public virtual DbSet<Demos> Demos { get; set; }
        public virtual DbSet<DispelEffects> DispelEffects { get; set; }
        public virtual DbSet<DistrictReturnPoints> DistrictReturnPoints { get; set; }
        public virtual DbSet<Districts> Districts { get; set; }
        public virtual DbSet<DoodadAlmighties> DoodadAlmighties { get; set; }
        public virtual DbSet<DoodadBundleDoodads> DoodadBundleDoodads { get; set; }
        public virtual DbSet<DoodadBundles> DoodadBundles { get; set; }
        public virtual DbSet<DoodadFamilies> DoodadFamilies { get; set; }
        public virtual DbSet<DoodadFuncActivateHousingAreas> DoodadFuncActivateHousingAreas { get; set; }
        public virtual DbSet<DoodadFuncActivateSpheres> DoodadFuncActivateSpheres { get; set; }
        public virtual DbSet<DoodadFuncAnimates> DoodadFuncAnimates { get; set; }
        public virtual DbSet<DoodadFuncAreaTriggers> DoodadFuncAreaTriggers { get; set; }
        public virtual DbSet<DoodadFuncAttachments> DoodadFuncAttachments { get; set; }
        public virtual DbSet<DoodadFuncAuctionUis> DoodadFuncAuctionUis { get; set; }
        public virtual DbSet<DoodadFuncBankUis> DoodadFuncBankUis { get; set; }
        public virtual DbSet<DoodadFuncBindings> DoodadFuncBindings { get; set; }
        public virtual DbSet<DoodadFuncBubbles> DoodadFuncBubbles { get; set; }
        public virtual DbSet<DoodadFuncBuffs> DoodadFuncBuffs { get; set; }
        public virtual DbSet<DoodadFuncBuildConditionInfos> DoodadFuncBuildConditionInfos { get; set; }
        public virtual DbSet<DoodadFuncBuildConditionUiOpens> DoodadFuncBuildConditionUiOpens { get; set; }
        public virtual DbSet<DoodadFuncButchers> DoodadFuncButchers { get; set; }
        public virtual DbSet<DoodadFuncBuyFishItems> DoodadFuncBuyFishItems { get; set; }
        public virtual DbSet<DoodadFuncBuyFishModelItems> DoodadFuncBuyFishModelItems { get; set; }
        public virtual DbSet<DoodadFuncBuyFishModels> DoodadFuncBuyFishModels { get; set; }
        public virtual DbSet<DoodadFuncBuyFishes> DoodadFuncBuyFishes { get; set; }
        public virtual DbSet<DoodadFuncCatches> DoodadFuncCatches { get; set; }
        public virtual DbSet<DoodadFuncCerealHarvests> DoodadFuncCerealHarvests { get; set; }
        public virtual DbSet<DoodadFuncChangeOtherDoodadPhases> DoodadFuncChangeOtherDoodadPhases { get; set; }
        public virtual DbSet<DoodadFuncCleanupLogicLinks> DoodadFuncCleanupLogicLinks { get; set; }
        public virtual DbSet<DoodadFuncClimateReacts> DoodadFuncClimateReacts { get; set; }
        public virtual DbSet<DoodadFuncClimbs> DoodadFuncClimbs { get; set; }
        public virtual DbSet<DoodadFuncCloutEffects> DoodadFuncCloutEffects { get; set; }
        public virtual DbSet<DoodadFuncClouts> DoodadFuncClouts { get; set; }
        public virtual DbSet<DoodadFuncCofferPerms> DoodadFuncCofferPerms { get; set; }
        public virtual DbSet<DoodadFuncCoffers> DoodadFuncCoffers { get; set; }
        public virtual DbSet<DoodadFuncConditionalUses> DoodadFuncConditionalUses { get; set; }
        public virtual DbSet<DoodadFuncConsumeChangerItems> DoodadFuncConsumeChangerItems { get; set; }
        public virtual DbSet<DoodadFuncConsumeChangerModelItems> DoodadFuncConsumeChangerModelItems { get; set; }
        public virtual DbSet<DoodadFuncConsumeChangerModels> DoodadFuncConsumeChangerModels { get; set; }
        public virtual DbSet<DoodadFuncConsumeChangers> DoodadFuncConsumeChangers { get; set; }
        public virtual DbSet<DoodadFuncConsumeItems> DoodadFuncConsumeItems { get; set; }
        public virtual DbSet<DoodadFuncConvertFishItems> DoodadFuncConvertFishItems { get; set; }
        public virtual DbSet<DoodadFuncConvertFishes> DoodadFuncConvertFishes { get; set; }
        public virtual DbSet<DoodadFuncCraftActs> DoodadFuncCraftActs { get; set; }
        public virtual DbSet<DoodadFuncCraftCancels> DoodadFuncCraftCancels { get; set; }
        public virtual DbSet<DoodadFuncCraftDirects> DoodadFuncCraftDirects { get; set; }
        public virtual DbSet<DoodadFuncCraftGetItems> DoodadFuncCraftGetItems { get; set; }
        public virtual DbSet<DoodadFuncCraftGradeRatios> DoodadFuncCraftGradeRatios { get; set; }
        public virtual DbSet<DoodadFuncCraftInfos> DoodadFuncCraftInfos { get; set; }
        public virtual DbSet<DoodadFuncCraftPacks> DoodadFuncCraftPacks { get; set; }
        public virtual DbSet<DoodadFuncCraftStartCrafts> DoodadFuncCraftStartCrafts { get; set; }
        public virtual DbSet<DoodadFuncCraftStarts> DoodadFuncCraftStarts { get; set; }
        public virtual DbSet<DoodadFuncCropHarvests> DoodadFuncCropHarvests { get; set; }
        public virtual DbSet<DoodadFuncCrystalCollects> DoodadFuncCrystalCollects { get; set; }
        public virtual DbSet<DoodadFuncCutdownings> DoodadFuncCutdownings { get; set; }
        public virtual DbSet<DoodadFuncCutdowns> DoodadFuncCutdowns { get; set; }
        public virtual DbSet<DoodadFuncDairyCollects> DoodadFuncDairyCollects { get; set; }
        public virtual DbSet<DoodadFuncDeclareSieges> DoodadFuncDeclareSieges { get; set; }
        public virtual DbSet<DoodadFuncDevotes> DoodadFuncDevotes { get; set; }
        public virtual DbSet<DoodadFuncDigTerrains> DoodadFuncDigTerrains { get; set; }
        public virtual DbSet<DoodadFuncDigs> DoodadFuncDigs { get; set; }
        public virtual DbSet<DoodadFuncDominionTaxInKinds> DoodadFuncDominionTaxInKinds { get; set; }
        public virtual DbSet<DoodadFuncDyeingredientCollects> DoodadFuncDyeingredientCollects { get; set; }
        public virtual DbSet<DoodadFuncEnterInstances> DoodadFuncEnterInstances { get; set; }
        public virtual DbSet<DoodadFuncEnterSysInstances> DoodadFuncEnterSysInstances { get; set; }
        public virtual DbSet<DoodadFuncEvidenceItemLoots> DoodadFuncEvidenceItemLoots { get; set; }
        public virtual DbSet<DoodadFuncExchangeItems> DoodadFuncExchangeItems { get; set; }
        public virtual DbSet<DoodadFuncExchanges> DoodadFuncExchanges { get; set; }
        public virtual DbSet<DoodadFuncExitInduns> DoodadFuncExitInduns { get; set; }
        public virtual DbSet<DoodadFuncFakeUses> DoodadFuncFakeUses { get; set; }
        public virtual DbSet<DoodadFuncFeeds> DoodadFuncFeeds { get; set; }
        public virtual DbSet<DoodadFuncFiberCollects> DoodadFuncFiberCollects { get; set; }
        public virtual DbSet<DoodadFuncFinals> DoodadFuncFinals { get; set; }
        public virtual DbSet<DoodadFuncFishSchools> DoodadFuncFishSchools { get; set; }
        public virtual DbSet<DoodadFuncFruitPicks> DoodadFuncFruitPicks { get; set; }
        public virtual DbSet<DoodadFuncFxGroupCallbacks> DoodadFuncFxGroupCallbacks { get; set; }
        public virtual DbSet<DoodadFuncGassExtracts> DoodadFuncGassExtracts { get; set; }
        public virtual DbSet<DoodadFuncGoodsValues> DoodadFuncGoodsValues { get; set; }
        public virtual DbSet<DoodadFuncGroups> DoodadFuncGroups { get; set; }
        public virtual DbSet<DoodadFuncGrowths> DoodadFuncGrowths { get; set; }
        public virtual DbSet<DoodadFuncHarvests> DoodadFuncHarvests { get; set; }
        public virtual DbSet<DoodadFuncHeroElections> DoodadFuncHeroElections { get; set; }
        public virtual DbSet<DoodadFuncHouseFarms> DoodadFuncHouseFarms { get; set; }
        public virtual DbSet<DoodadFuncHousingAreas> DoodadFuncHousingAreas { get; set; }
        public virtual DbSet<DoodadFuncHungers> DoodadFuncHungers { get; set; }
        public virtual DbSet<DoodadFuncInsertCounters> DoodadFuncInsertCounters { get; set; }
        public virtual DbSet<DoodadFuncIssuanceOfMobilizationOrderUiOpens> DoodadFuncIssuanceOfMobilizationOrderUiOpens { get; set; }
        public virtual DbSet<DoodadFuncItemChangerUiOpens> DoodadFuncItemChangerUiOpens { get; set; }
        public virtual DbSet<DoodadFuncItemChangers> DoodadFuncItemChangers { get; set; }
        public virtual DbSet<DoodadFuncLivestockGrowths> DoodadFuncLivestockGrowths { get; set; }
        public virtual DbSet<DoodadFuncLogicDisplays> DoodadFuncLogicDisplays { get; set; }
        public virtual DbSet<DoodadFuncLogicFamilyProviders> DoodadFuncLogicFamilyProviders { get; set; }
        public virtual DbSet<DoodadFuncLogicFamilySubscribers> DoodadFuncLogicFamilySubscribers { get; set; }
        public virtual DbSet<DoodadFuncLogics> DoodadFuncLogics { get; set; }
        public virtual DbSet<DoodadFuncLootItems> DoodadFuncLootItems { get; set; }
        public virtual DbSet<DoodadFuncLootPacks> DoodadFuncLootPacks { get; set; }
        public virtual DbSet<DoodadFuncMachinePartsCollects> DoodadFuncMachinePartsCollects { get; set; }
        public virtual DbSet<DoodadFuncMedicalingredientMines> DoodadFuncMedicalingredientMines { get; set; }
        public virtual DbSet<DoodadFuncMouldItems> DoodadFuncMouldItems { get; set; }
        public virtual DbSet<DoodadFuncMoulds> DoodadFuncMoulds { get; set; }
        public virtual DbSet<DoodadFuncMows> DoodadFuncMows { get; set; }
        public virtual DbSet<DoodadFuncNaviDonations> DoodadFuncNaviDonations { get; set; }
        public virtual DbSet<DoodadFuncNaviMarkPosToMaps> DoodadFuncNaviMarkPosToMaps { get; set; }
        public virtual DbSet<DoodadFuncNaviNamings> DoodadFuncNaviNamings { get; set; }
        public virtual DbSet<DoodadFuncNaviOpenBounties> DoodadFuncNaviOpenBounties { get; set; }
        public virtual DbSet<DoodadFuncNaviOpenMailboxes> DoodadFuncNaviOpenMailboxes { get; set; }
        public virtual DbSet<DoodadFuncNaviOpenPortals> DoodadFuncNaviOpenPortals { get; set; }
        public virtual DbSet<DoodadFuncNaviRemoveTimers> DoodadFuncNaviRemoveTimers { get; set; }
        public virtual DbSet<DoodadFuncNaviRemoves> DoodadFuncNaviRemoves { get; set; }
        public virtual DbSet<DoodadFuncNaviTeleports> DoodadFuncNaviTeleports { get; set; }
        public virtual DbSet<DoodadFuncNpcInteractionRelays> DoodadFuncNpcInteractionRelays { get; set; }
        public virtual DbSet<DoodadFuncNuonsArrowUiOpens> DoodadFuncNuonsArrowUiOpens { get; set; }
        public virtual DbSet<DoodadFuncOneShotPlaces> DoodadFuncOneShotPlaces { get; set; }
        public virtual DbSet<DoodadFuncOneShotTakes> DoodadFuncOneShotTakes { get; set; }
        public virtual DbSet<DoodadFuncOpenFarmInfos> DoodadFuncOpenFarmInfos { get; set; }
        public virtual DbSet<DoodadFuncOpenPapers> DoodadFuncOpenPapers { get; set; }
        public virtual DbSet<DoodadFuncOreMines> DoodadFuncOreMines { get; set; }
        public virtual DbSet<DoodadFuncOwnershipTimes> DoodadFuncOwnershipTimes { get; set; }
        public virtual DbSet<DoodadFuncParentInfos> DoodadFuncParentInfos { get; set; }
        public virtual DbSet<DoodadFuncParrots> DoodadFuncParrots { get; set; }
        public virtual DbSet<DoodadFuncPlantCollects> DoodadFuncPlantCollects { get; set; }
        public virtual DbSet<DoodadFuncPlayFlowGraphs> DoodadFuncPlayFlowGraphs { get; set; }
        public virtual DbSet<DoodadFuncPrivateCofferItemCategories> DoodadFuncPrivateCofferItemCategories { get; set; }
        public virtual DbSet<DoodadFuncPrivateCoffers> DoodadFuncPrivateCoffers { get; set; }
        public virtual DbSet<DoodadFuncPulseTriggers> DoodadFuncPulseTriggers { get; set; }
        public virtual DbSet<DoodadFuncPulses> DoodadFuncPulses { get; set; }
        public virtual DbSet<DoodadFuncPurchaseSiegeTickets> DoodadFuncPurchaseSiegeTickets { get; set; }
        public virtual DbSet<DoodadFuncPurchases> DoodadFuncPurchases { get; set; }
        public virtual DbSet<DoodadFuncPuzzleIns> DoodadFuncPuzzleIns { get; set; }
        public virtual DbSet<DoodadFuncPuzzleOuts> DoodadFuncPuzzleOuts { get; set; }
        public virtual DbSet<DoodadFuncPuzzleRolls> DoodadFuncPuzzleRolls { get; set; }
        public virtual DbSet<DoodadFuncQuests> DoodadFuncQuests { get; set; }
        public virtual DbSet<DoodadFuncRatioChanges> DoodadFuncRatioChanges { get; set; }
        public virtual DbSet<DoodadFuncRatioRespawns> DoodadFuncRatioRespawns { get; set; }
        public virtual DbSet<DoodadFuncReactDevotes> DoodadFuncReactDevotes { get; set; }
        public virtual DbSet<DoodadFuncRecoverItems> DoodadFuncRecoverItems { get; set; }
        public virtual DbSet<DoodadFuncRemoveInstances> DoodadFuncRemoveInstances { get; set; }
        public virtual DbSet<DoodadFuncRemoveItems> DoodadFuncRemoveItems { get; set; }
        public virtual DbSet<DoodadFuncRenewItems> DoodadFuncRenewItems { get; set; }
        public virtual DbSet<DoodadFuncReqBattleFields> DoodadFuncReqBattleFields { get; set; }
        public virtual DbSet<DoodadFuncRequireItems> DoodadFuncRequireItems { get; set; }
        public virtual DbSet<DoodadFuncRequireQuests> DoodadFuncRequireQuests { get; set; }
        public virtual DbSet<DoodadFuncResidentBalances> DoodadFuncResidentBalances { get; set; }
        public virtual DbSet<DoodadFuncResidentTownhallUiOpens> DoodadFuncResidentTownhallUiOpens { get; set; }
        public virtual DbSet<DoodadFuncRespawns> DoodadFuncRespawns { get; set; }
        public virtual DbSet<DoodadFuncRockMines> DoodadFuncRockMines { get; set; }
        public virtual DbSet<DoodadFuncSeedCollects> DoodadFuncSeedCollects { get; set; }
        public virtual DbSet<DoodadFuncShears> DoodadFuncShears { get; set; }
        public virtual DbSet<DoodadFuncSiegeAuctions> DoodadFuncSiegeAuctions { get; set; }
        public virtual DbSet<DoodadFuncSiegePeriods> DoodadFuncSiegePeriods { get; set; }
        public virtual DbSet<DoodadFuncSigns> DoodadFuncSigns { get; set; }
        public virtual DbSet<DoodadFuncSkillHits> DoodadFuncSkillHits { get; set; }
        public virtual DbSet<DoodadFuncSkinOffs> DoodadFuncSkinOffs { get; set; }
        public virtual DbSet<DoodadFuncSoilCollects> DoodadFuncSoilCollects { get; set; }
        public virtual DbSet<DoodadFuncSpawnGimmicks> DoodadFuncSpawnGimmicks { get; set; }
        public virtual DbSet<DoodadFuncSpawnMgmts> DoodadFuncSpawnMgmts { get; set; }
        public virtual DbSet<DoodadFuncSpawns> DoodadFuncSpawns { get; set; }
        public virtual DbSet<DoodadFuncSpiceCollects> DoodadFuncSpiceCollects { get; set; }
        public virtual DbSet<DoodadFuncStampMakers> DoodadFuncStampMakers { get; set; }
        public virtual DbSet<DoodadFuncStoreUis> DoodadFuncStoreUis { get; set; }
        public virtual DbSet<DoodadFuncTimers> DoodadFuncTimers { get; set; }
        public virtual DbSet<DoodadFuncTods> DoodadFuncTods { get; set; }
        public virtual DbSet<DoodadFuncTreeByproductsCollects> DoodadFuncTreeByproductsCollects { get; set; }
        public virtual DbSet<DoodadFuncUccImprints> DoodadFuncUccImprints { get; set; }
        public virtual DbSet<DoodadFuncUses> DoodadFuncUses { get; set; }
        public virtual DbSet<DoodadFuncVegetationGrowths> DoodadFuncVegetationGrowths { get; set; }
        public virtual DbSet<DoodadFuncWaterVolumes> DoodadFuncWaterVolumes { get; set; }
        public virtual DbSet<DoodadFuncZoneReacts> DoodadFuncZoneReacts { get; set; }
        public virtual DbSet<DoodadFuncs> DoodadFuncs { get; set; }
        public virtual DbSet<DoodadGroups> DoodadGroups { get; set; }
        public virtual DbSet<DoodadHarvests> DoodadHarvests { get; set; }
        public virtual DbSet<DoodadItemChangeEffects> DoodadItemChangeEffects { get; set; }
        public virtual DbSet<DoodadModifiers> DoodadModifiers { get; set; }
        public virtual DbSet<DoodadPhaseFuncs> DoodadPhaseFuncs { get; set; }
        public virtual DbSet<DoodadPlaceSkins> DoodadPlaceSkins { get; set; }
        public virtual DbSet<DyeableItems> DyeableItems { get; set; }
        public virtual DbSet<DyeingColors> DyeingColors { get; set; }
        public virtual DbSet<DynamicFuncs> DynamicFuncs { get; set; }
        public virtual DbSet<DynamicUnitModifiers> DynamicUnitModifiers { get; set; }
        public virtual DbSet<Effects> Effects { get; set; }
        public virtual DbSet<EmblemPatterns> EmblemPatterns { get; set; }
        public virtual DbSet<EnhancedItemMaterialArmorDefaults> EnhancedItemMaterialArmorDefaults { get; set; }
        public virtual DbSet<EnhancedItemMaterialWeaponDefaults> EnhancedItemMaterialWeaponDefaults { get; set; }
        public virtual DbSet<EnhancedItemMaterials> EnhancedItemMaterials { get; set; }
        public virtual DbSet<EquipItemAttrModifiers> EquipItemAttrModifiers { get; set; }
        public virtual DbSet<EquipItemSetBonuses> EquipItemSetBonuses { get; set; }
        public virtual DbSet<EquipItemSets> EquipItemSets { get; set; }
        public virtual DbSet<EquipPackBodyParts> EquipPackBodyParts { get; set; }
        public virtual DbSet<EquipPackCloths> EquipPackCloths { get; set; }
        public virtual DbSet<EquipPackWeapons> EquipPackWeapons { get; set; }
        public virtual DbSet<EquipSlotEnchantingCosts> EquipSlotEnchantingCosts { get; set; }
        public virtual DbSet<EquipSlotGroupMaps> EquipSlotGroupMaps { get; set; }
        public virtual DbSet<EquipSlotGroups> EquipSlotGroups { get; set; }
        public virtual DbSet<ExpandExpertLimits> ExpandExpertLimits { get; set; }
        public virtual DbSet<ExpeditionLevelBuffs> ExpeditionLevelBuffs { get; set; }
        public virtual DbSet<ExpeditionLevelReqs> ExpeditionLevelReqs { get; set; }
        public virtual DbSet<ExpeditionLevels> ExpeditionLevels { get; set; }
        public virtual DbSet<ExpertLimits> ExpertLimits { get; set; }
        public virtual DbSet<ExpressTexts> ExpressTexts { get; set; }
        public virtual DbSet<FaceDecalAssets> FaceDecalAssets { get; set; }
        public virtual DbSet<FaceDiffuseMaps> FaceDiffuseMaps { get; set; }
        public virtual DbSet<FaceEyelashMaps> FaceEyelashMaps { get; set; }
        public virtual DbSet<FaceNormalMaps> FaceNormalMaps { get; set; }
        public virtual DbSet<FactionChatRegions> FactionChatRegions { get; set; }
        public virtual DbSet<FamilyLevels> FamilyLevels { get; set; }
        public virtual DbSet<FamilyMemberLimits> FamilyMemberLimits { get; set; }
        public virtual DbSet<FamilyRoles> FamilyRoles { get; set; }
        public virtual DbSet<FarmGroupDoodads> FarmGroupDoodads { get; set; }
        public virtual DbSet<FarmGroups> FarmGroups { get; set; }
        public virtual DbSet<FestivalZones> FestivalZones { get; set; }
        public virtual DbSet<FishDetails> FishDetails { get; set; }
        public virtual DbSet<FlyingStateChangeEffects> FlyingStateChangeEffects { get; set; }
        public virtual DbSet<Formulas> Formulas { get; set; }
        public virtual DbSet<FreshnessGroupItems> FreshnessGroupItems { get; set; }
        public virtual DbSet<FreshnessGroups> FreshnessGroups { get; set; }
        public virtual DbSet<FxCamFovs> FxCamFovs { get; set; }
        public virtual DbSet<FxCgas> FxCgas { get; set; }
        public virtual DbSet<FxCgfs> FxCgfs { get; set; }
        public virtual DbSet<FxChrs> FxChrs { get; set; }
        public virtual DbSet<FxDecals> FxDecals { get; set; }
        public virtual DbSet<FxGroupFxItems> FxGroupFxItems { get; set; }
        public virtual DbSet<FxGroups> FxGroups { get; set; }
        public virtual DbSet<FxItems> FxItems { get; set; }
        public virtual DbSet<FxMaterials> FxMaterials { get; set; }
        public virtual DbSet<FxMotionBlurs> FxMotionBlurs { get; set; }
        public virtual DbSet<FxParticles> FxParticles { get; set; }
        public virtual DbSet<FxRopes> FxRopes { get; set; }
        public virtual DbSet<FxShakeCameras> FxShakeCameras { get; set; }
        public virtual DbSet<FxSounds> FxSounds { get; set; }
        public virtual DbSet<FxVoices> FxVoices { get; set; }
        public virtual DbSet<GachaLootPackItems> GachaLootPackItems { get; set; }
        public virtual DbSet<GachaLootPacks> GachaLootPacks { get; set; }
        public virtual DbSet<GainLootPackItemEffects> GainLootPackItemEffects { get; set; }
        public virtual DbSet<GameRuleEvents> GameRuleEvents { get; set; }
        public virtual DbSet<GameRuleSets> GameRuleSets { get; set; }
        public virtual DbSet<GameScheduleDoodads> GameScheduleDoodads { get; set; }
        public virtual DbSet<GameScheduleQuests> GameScheduleQuests { get; set; }
        public virtual DbSet<GameScheduleSpawners> GameScheduleSpawners { get; set; }
        public virtual DbSet<GameSchedules> GameSchedules { get; set; }
        public virtual DbSet<GameScoreRules> GameScoreRules { get; set; }
        public virtual DbSet<GameStances> GameStances { get; set; }
        public virtual DbSet<GemVisualEffects> GemVisualEffects { get; set; }
        public virtual DbSet<Gimmicks> Gimmicks { get; set; }
        public virtual DbSet<GrammarTagNoneTypes> GrammarTagNoneTypes { get; set; }
        public virtual DbSet<GrammarTags> GrammarTags { get; set; }
        public virtual DbSet<GuardTowerSettings> GuardTowerSettings { get; set; }
        public virtual DbSet<GuardTowerStepConds> GuardTowerStepConds { get; set; }
        public virtual DbSet<GuardTowerSteps> GuardTowerSteps { get; set; }
        public virtual DbSet<HairColors> HairColors { get; set; }
        public virtual DbSet<HandIkOffsets> HandIkOffsets { get; set; }
        public virtual DbSet<HashCheckers> HashCheckers { get; set; }
        public virtual DbSet<HealEffects> HealEffects { get; set; }
        public virtual DbSet<HeavyTaxes> HeavyTaxes { get; set; }
        public virtual DbSet<HeirLevels> HeirLevels { get; set; }
        public virtual DbSet<HeirSkillDetails> HeirSkillDetails { get; set; }
        public virtual DbSet<HeirSkills> HeirSkills { get; set; }
        public virtual DbSet<HeroBonuses> HeroBonuses { get; set; }
        public virtual DbSet<HeroConditions> HeroConditions { get; set; }
        public virtual DbSet<HeroGrades> HeroGrades { get; set; }
        public virtual DbSet<HeroRewards> HeroRewards { get; set; }
        public virtual DbSet<HeroSchedules> HeroSchedules { get; set; }
        public virtual DbSet<Heros> Heros { get; set; }
        public virtual DbSet<HighAbilities> HighAbilities { get; set; }
        public virtual DbSet<HighAbilityResourceEffects> HighAbilityResourceEffects { get; set; }
        public virtual DbSet<Holdables> Holdables { get; set; }
        public virtual DbSet<Hotkeys> Hotkeys { get; set; }
        public virtual DbSet<HousingAreas> HousingAreas { get; set; }
        public virtual DbSet<HousingBindingDoodads> HousingBindingDoodads { get; set; }
        public virtual DbSet<HousingBuildSteps> HousingBuildSteps { get; set; }
        public virtual DbSet<HousingDecoLimitElems> HousingDecoLimitElems { get; set; }
        public virtual DbSet<HousingDecoLimits> HousingDecoLimits { get; set; }
        public virtual DbSet<HousingDecorations> HousingDecorations { get; set; }
        public virtual DbSet<HousingGroupCategories> HousingGroupCategories { get; set; }
        public virtual DbSet<HousingGroups> HousingGroups { get; set; }
        public virtual DbSet<HousingPackMembers> HousingPackMembers { get; set; }
        public virtual DbSet<HousingPacks> HousingPacks { get; set; }
        public virtual DbSet<HousingRebuildingMaterials> HousingRebuildingMaterials { get; set; }
        public virtual DbSet<HousingRebuildingPackRebuildings> HousingRebuildingPackRebuildings { get; set; }
        public virtual DbSet<HousingRebuildingPacks> HousingRebuildingPacks { get; set; }
        public virtual DbSet<HousingRebuildings> HousingRebuildings { get; set; }
        public virtual DbSet<HousingSizes> HousingSizes { get; set; }
        public virtual DbSet<HousingUccPacks> HousingUccPacks { get; set; }
        public virtual DbSet<HousingUccSlots> HousingUccSlots { get; set; }
        public virtual DbSet<HousingViewSizes> HousingViewSizes { get; set; }
        public virtual DbSet<Housings> Housings { get; set; }
        public virtual DbSet<Icons> Icons { get; set; }
        public virtual DbSet<IgnoreTexts> IgnoreTexts { get; set; }
        public virtual DbSet<ImprintUccEffects> ImprintUccEffects { get; set; }
        public virtual DbSet<ImpulseEffects> ImpulseEffects { get; set; }
        public virtual DbSet<IndestructibleItems> IndestructibleItems { get; set; }
        public virtual DbSet<IndunZones> IndunZones { get; set; }
        public virtual DbSet<InstrumentSounds> InstrumentSounds { get; set; }
        public virtual DbSet<IntensifiedExpertLimits> IntensifiedExpertLimits { get; set; }
        public virtual DbSet<InteractionEffects> InteractionEffects { get; set; }
        public virtual DbSet<ItemAcceptQuests> ItemAcceptQuests { get; set; }
        public virtual DbSet<ItemAccessories> ItemAccessories { get; set; }
        public virtual DbSet<ItemArmorAssets> ItemArmorAssets { get; set; }
        public virtual DbSet<ItemArmors> ItemArmors { get; set; }
        public virtual DbSet<ItemAssetTransforms> ItemAssetTransforms { get; set; }
        public virtual DbSet<ItemAssets> ItemAssets { get; set; }
        public virtual DbSet<ItemBackpacks> ItemBackpacks { get; set; }
        public virtual DbSet<ItemBags> ItemBags { get; set; }
        public virtual DbSet<ItemBodyParts> ItemBodyParts { get; set; }
        public virtual DbSet<ItemCapScaleForbids> ItemCapScaleForbids { get; set; }
        public virtual DbSet<ItemCapScaleRandomRates> ItemCapScaleRandomRates { get; set; }
        public virtual DbSet<ItemCapScales> ItemCapScales { get; set; }
        public virtual DbSet<ItemCategories> ItemCategories { get; set; }
        public virtual DbSet<ItemConfigs> ItemConfigs { get; set; }
        public virtual DbSet<ItemConvPpackMembers> ItemConvPpackMembers { get; set; }
        public virtual DbSet<ItemConvPpacks> ItemConvPpacks { get; set; }
        public virtual DbSet<ItemConvProducts> ItemConvProducts { get; set; }
        public virtual DbSet<ItemConvReagentFilters> ItemConvReagentFilters { get; set; }
        public virtual DbSet<ItemConvReagents> ItemConvReagents { get; set; }
        public virtual DbSet<ItemConvRpackMembers> ItemConvRpackMembers { get; set; }
        public virtual DbSet<ItemConvRpacks> ItemConvRpacks { get; set; }
        public virtual DbSet<ItemConvSets> ItemConvSets { get; set; }
        public virtual DbSet<ItemConvs> ItemConvs { get; set; }
        public virtual DbSet<ItemDyeings> ItemDyeings { get; set; }
        public virtual DbSet<ItemEnchantRatioGroups> ItemEnchantRatioGroups { get; set; }
        public virtual DbSet<ItemEnchantRatioItems> ItemEnchantRatioItems { get; set; }
        public virtual DbSet<ItemEnchantRatios> ItemEnchantRatios { get; set; }
        public virtual DbSet<ItemEnchantingGems> ItemEnchantingGems { get; set; }
        public virtual DbSet<ItemGradeBuffs> ItemGradeBuffs { get; set; }
        public virtual DbSet<ItemGradeDistributions> ItemGradeDistributions { get; set; }
        public virtual DbSet<ItemGradeEnchantingSupports> ItemGradeEnchantingSupports { get; set; }
        public virtual DbSet<ItemGradeSkills> ItemGradeSkills { get; set; }
        public virtual DbSet<ItemGrades> ItemGrades { get; set; }
        public virtual DbSet<ItemGroups> ItemGroups { get; set; }
        public virtual DbSet<ItemGuideIcons> ItemGuideIcons { get; set; }
        public virtual DbSet<ItemGuides> ItemGuides { get; set; }
        public virtual DbSet<ItemHousingDecorations> ItemHousingDecorations { get; set; }
        public virtual DbSet<ItemHousings> ItemHousings { get; set; }
        public virtual DbSet<ItemLookConvertHoldables> ItemLookConvertHoldables { get; set; }
        public virtual DbSet<ItemLookConvertRequiredItems> ItemLookConvertRequiredItems { get; set; }
        public virtual DbSet<ItemLookConvertWearables> ItemLookConvertWearables { get; set; }
        public virtual DbSet<ItemLookConverts> ItemLookConverts { get; set; }
        public virtual DbSet<ItemLookRevertRequiredItems> ItemLookRevertRequiredItems { get; set; }
        public virtual DbSet<ItemOpenPapers> ItemOpenPapers { get; set; }
        public virtual DbSet<ItemProcBindings> ItemProcBindings { get; set; }
        public virtual DbSet<ItemProcs> ItemProcs { get; set; }
        public virtual DbSet<ItemRankAssignments> ItemRankAssignments { get; set; }
        public virtual DbSet<ItemRecipes> ItemRecipes { get; set; }
        public virtual DbSet<ItemRndAttrCategories> ItemRndAttrCategories { get; set; }
        public virtual DbSet<ItemRndAttrCategoryMaterials> ItemRndAttrCategoryMaterials { get; set; }
        public virtual DbSet<ItemRndAttrCategoryProperties> ItemRndAttrCategoryProperties { get; set; }
        public virtual DbSet<ItemRndAttrUnitModifierGroupSets> ItemRndAttrUnitModifierGroupSets { get; set; }
        public virtual DbSet<ItemRndAttrUnitModifierGroups> ItemRndAttrUnitModifierGroups { get; set; }
        public virtual DbSet<ItemRndAttrUnitModifiers> ItemRndAttrUnitModifiers { get; set; }
        public virtual DbSet<ItemSecureExceptions> ItemSecureExceptions { get; set; }
        public virtual DbSet<ItemSetItems> ItemSetItems { get; set; }
        public virtual DbSet<ItemSets> ItemSets { get; set; }
        public virtual DbSet<ItemShipyards> ItemShipyards { get; set; }
        public virtual DbSet<ItemSlaveEquipmentGradeSpawns> ItemSlaveEquipmentGradeSpawns { get; set; }
        public virtual DbSet<ItemSlaveEquipmentSlaveEquipslotPacks> ItemSlaveEquipmentSlaveEquipslotPacks { get; set; }
        public virtual DbSet<ItemSlaveEquipments> ItemSlaveEquipments { get; set; }
        public virtual DbSet<ItemSmeltingItems> ItemSmeltingItems { get; set; }
        public virtual DbSet<ItemSmeltings> ItemSmeltings { get; set; }
        public virtual DbSet<ItemSocketChances> ItemSocketChances { get; set; }
        public virtual DbSet<ItemSocketLevelLimits> ItemSocketLevelLimits { get; set; }
        public virtual DbSet<ItemSocketNumLimits> ItemSocketNumLimits { get; set; }
        public virtual DbSet<ItemSockets> ItemSockets { get; set; }
        public virtual DbSet<ItemSpawnDoodads> ItemSpawnDoodads { get; set; }
        public virtual DbSet<ItemSummonMates> ItemSummonMates { get; set; }
        public virtual DbSet<ItemSummonSlaves> ItemSummonSlaves { get; set; }
        public virtual DbSet<ItemTools> ItemTools { get; set; }
        public virtual DbSet<ItemWeapons> ItemWeapons { get; set; }
        public virtual DbSet<ItemTemplate> ItemTemplates { get; set; }
        public virtual DbSet<KillNpcWithoutCorpseEffects> KillNpcWithoutCorpseEffects { get; set; }
        public virtual DbSet<LevelUpEffects> LevelUpEffects { get; set; }
        public virtual DbSet<Levels> Levels { get; set; }
        public virtual DbSet<LinearFuncs> LinearFuncs { get; set; }
        public virtual DbSet<LocalDevelopments> LocalDevelopments { get; set; }
        public virtual DbSet<LocalizedTexts> LocalizedTexts { get; set; }
        public virtual DbSet<LootActabilityGroups> LootActabilityGroups { get; set; }
        public virtual DbSet<LootGroups> LootGroups { get; set; }
        public virtual DbSet<LootPackDroppingNpcs> LootPackDroppingNpcs { get; set; }
        public virtual DbSet<Loots> Loots { get; set; }
        public virtual DbSet<ManaBurnEffects> ManaBurnEffects { get; set; }
        public virtual DbSet<ManualFuncs> ManualFuncs { get; set; }
        public virtual DbSet<MateEquipPackGroups> MateEquipPackGroups { get; set; }
        public virtual DbSet<MateEquipPackItems> MateEquipPackItems { get; set; }
        public virtual DbSet<MateEquipPacks> MateEquipPacks { get; set; }
        public virtual DbSet<MateEquipSlotPacks> MateEquipSlotPacks { get; set; }
        public virtual DbSet<MerchantGoods> MerchantGoods { get; set; }
        public virtual DbSet<MerchantPacks> MerchantPacks { get; set; }
        public virtual DbSet<MerchantPriceRatios> MerchantPriceRatios { get; set; }
        public virtual DbSet<Merchants> Merchants { get; set; }
        public virtual DbSet<MineJewelRates> MineJewelRates { get; set; }
        public virtual DbSet<ModelAttachPointStrings> ModelAttachPointStrings { get; set; }
        public virtual DbSet<ModelBindings> ModelBindings { get; set; }
        public virtual DbSet<ModelMutations> ModelMutations { get; set; }
        public virtual DbSet<ModelQuestCameras> ModelQuestCameras { get; set; }
        public virtual DbSet<Models> Models { get; set; }
        public virtual DbSet<MonitorNpcs> MonitorNpcs { get; set; }
        public virtual DbSet<MouldPackItems> MouldPackItems { get; set; }
        public virtual DbSet<MouldPacks> MouldPacks { get; set; }
        public virtual DbSet<Moulds> Moulds { get; set; }
        public virtual DbSet<MountAttachedSkills> MountAttachedSkills { get; set; }
        public virtual DbSet<MountPoses> MountPoses { get; set; }
        public virtual DbSet<MountSkills> MountSkills { get; set; }
        public virtual DbSet<MoveToLocationEffects> MoveToLocationEffects { get; set; }
        public virtual DbSet<MoveToRezPointEffects> MoveToRezPointEffects { get; set; }
        public virtual DbSet<MusicNoteLimits> MusicNoteLimits { get; set; }
        public virtual DbSet<NationMemberLimits> NationMemberLimits { get; set; }
        public virtual DbSet<NationRelations> NationRelations { get; set; }
        public virtual DbSet<NpcAiClientParams> NpcAiClientParams { get; set; }
        public virtual DbSet<NpcChatBubbles> NpcChatBubbles { get; set; }
        public virtual DbSet<NpcDoodadBindings> NpcDoodadBindings { get; set; }
        public virtual DbSet<NpcInitialBuffs> NpcInitialBuffs { get; set; }
        public virtual DbSet<NpcInteractionSets> NpcInteractionSets { get; set; }
        public virtual DbSet<NpcInteractions> NpcInteractions { get; set; }
        public virtual DbSet<NpcMountSkills> NpcMountSkills { get; set; }
        public virtual DbSet<NpcMoveToZoneEffectItems> NpcMoveToZoneEffectItems { get; set; }
        public virtual DbSet<NpcMoveToZoneEffects> NpcMoveToZoneEffects { get; set; }
        public virtual DbSet<NpcNickBuffs> NpcNickBuffs { get; set; }
        public virtual DbSet<NpcNicknames> NpcNicknames { get; set; }
        public virtual DbSet<NpcPostureSets> NpcPostureSets { get; set; }
        public virtual DbSet<NpcPostures> NpcPostures { get; set; }
        public virtual DbSet<NpcStrafeParams> NpcStrafeParams { get; set; }
        public virtual DbSet<Npcs> Npcs { get; set; }
        public virtual DbSet<OpenPortalEffects> OpenPortalEffects { get; set; }
        public virtual DbSet<OpenPortalInlandReagents> OpenPortalInlandReagents { get; set; }
        public virtual DbSet<OpenPortalOutlandReagents> OpenPortalOutlandReagents { get; set; }
        public virtual DbSet<PassiveBuffs> PassiveBuffs { get; set; }
        public virtual DbSet<PcbangBenefitLists> PcbangBenefitLists { get; set; }
        public virtual DbSet<PcbangBuffs> PcbangBuffs { get; set; }
        public virtual DbSet<PeriodBuffs> PeriodBuffs { get; set; }
        public virtual DbSet<PhysicalExplosionEffects> PhysicalExplosionEffects { get; set; }
        public virtual DbSet<PlayLogEffects> PlayLogEffects { get; set; }
        public virtual DbSet<PlotAoeConditions> PlotAoeConditions { get; set; }
        public virtual DbSet<PlotConditions> PlotConditions { get; set; }
        public virtual DbSet<PlotEffects> PlotEffects { get; set; }
        public virtual DbSet<PlotEventConditions> PlotEventConditions { get; set; }
        public virtual DbSet<PlotEvents> PlotEvents { get; set; }
        public virtual DbSet<PlotNextEvents> PlotNextEvents { get; set; }
        public virtual DbSet<Plots> Plots { get; set; }
        public virtual DbSet<PreCompletedAchievements> PreCompletedAchievements { get; set; }
        public virtual DbSet<PrefabElements> PrefabElements { get; set; }
        public virtual DbSet<PrefabModels> PrefabModels { get; set; }
        public virtual DbSet<PremiumBenefitLists> PremiumBenefitLists { get; set; }
        public virtual DbSet<PremiumBenefits> PremiumBenefits { get; set; }
        public virtual DbSet<PremiumConfigs> PremiumConfigs { get; set; }
        public virtual DbSet<PremiumGrades> PremiumGrades { get; set; }
        public virtual DbSet<PremiumPoints> PremiumPoints { get; set; }
        public virtual DbSet<PriestBuffs> PriestBuffs { get; set; }
        public virtual DbSet<Projectiles> Projectiles { get; set; }
        public virtual DbSet<PutDownBackpackEffects> PutDownBackpackEffects { get; set; }
        public virtual DbSet<QuestActCheckCompleteComponents> QuestActCheckCompleteComponents { get; set; }
        public virtual DbSet<QuestActCheckDistances> QuestActCheckDistances { get; set; }
        public virtual DbSet<QuestActCheckGuards> QuestActCheckGuards { get; set; }
        public virtual DbSet<QuestActCheckSpheres> QuestActCheckSpheres { get; set; }
        public virtual DbSet<QuestActCheckTimers> QuestActCheckTimers { get; set; }
        public virtual DbSet<QuestActConAcceptBuffs> QuestActConAcceptBuffs { get; set; }
        public virtual DbSet<QuestActConAcceptComponents> QuestActConAcceptComponents { get; set; }
        public virtual DbSet<QuestActConAcceptDoodads> QuestActConAcceptDoodads { get; set; }
        public virtual DbSet<QuestActConAcceptItemEquips> QuestActConAcceptItemEquips { get; set; }
        public virtual DbSet<QuestActConAcceptItemGains> QuestActConAcceptItemGains { get; set; }
        public virtual DbSet<QuestActConAcceptItems> QuestActConAcceptItems { get; set; }
        public virtual DbSet<QuestActConAcceptLevelUps> QuestActConAcceptLevelUps { get; set; }
        public virtual DbSet<QuestActConAcceptNpcEmotions> QuestActConAcceptNpcEmotions { get; set; }
        public virtual DbSet<QuestActConAcceptNpcGroups> QuestActConAcceptNpcGroups { get; set; }
        public virtual DbSet<QuestActConAcceptNpcKills> QuestActConAcceptNpcKills { get; set; }
        public virtual DbSet<QuestActConAcceptNpcs> QuestActConAcceptNpcs { get; set; }
        public virtual DbSet<QuestActConAcceptSkills> QuestActConAcceptSkills { get; set; }
        public virtual DbSet<QuestActConAcceptSpheres> QuestActConAcceptSpheres { get; set; }
        public virtual DbSet<QuestActConAcceptUis> QuestActConAcceptUis { get; set; }
        public virtual DbSet<QuestActConAutoCompletes> QuestActConAutoCompletes { get; set; }
        public virtual DbSet<QuestActConFails> QuestActConFails { get; set; }
        public virtual DbSet<QuestActConReportDoodads> QuestActConReportDoodads { get; set; }
        public virtual DbSet<QuestActConReportJournals> QuestActConReportJournals { get; set; }
        public virtual DbSet<QuestActConReportNpcGroups> QuestActConReportNpcGroups { get; set; }
        public virtual DbSet<QuestActConReportNpcs> QuestActConReportNpcs { get; set; }
        public virtual DbSet<QuestActEtcItemObtains> QuestActEtcItemObtains { get; set; }
        public virtual DbSet<QuestActObjAbilityLevels> QuestActObjAbilityLevels { get; set; }
        public virtual DbSet<QuestActObjAggros> QuestActObjAggros { get; set; }
        public virtual DbSet<QuestActObjAliases> QuestActObjAliases { get; set; }
        public virtual DbSet<QuestActObjCinemas> QuestActObjCinemas { get; set; }
        public virtual DbSet<QuestActObjCompleteQuestGroups> QuestActObjCompleteQuestGroups { get; set; }
        public virtual DbSet<QuestActObjCompleteQuests> QuestActObjCompleteQuests { get; set; }
        public virtual DbSet<QuestActObjConditions> QuestActObjConditions { get; set; }
        public virtual DbSet<QuestActObjConquestWars> QuestActObjConquestWars { get; set; }
        public virtual DbSet<QuestActObjCrafts> QuestActObjCrafts { get; set; }
        public virtual DbSet<QuestActObjDistances> QuestActObjDistances { get; set; }
        public virtual DbSet<QuestActObjDoodadPhaseChecks> QuestActObjDoodadPhaseChecks { get; set; }
        public virtual DbSet<QuestActObjEffectFires> QuestActObjEffectFires { get; set; }
        public virtual DbSet<QuestActObjExpressFires> QuestActObjExpressFires { get; set; }
        public virtual DbSet<QuestActObjGainHonorPoints> QuestActObjGainHonorPoints { get; set; }
        public virtual DbSet<QuestActObjGainLivingPoints> QuestActObjGainLivingPoints { get; set; }
        public virtual DbSet<QuestActObjInteractions> QuestActObjInteractions { get; set; }
        public virtual DbSet<QuestActObjInviteTeamFactions> QuestActObjInviteTeamFactions { get; set; }
        public virtual DbSet<QuestActObjItemGathers> QuestActObjItemGathers { get; set; }
        public virtual DbSet<QuestActObjItemGroupGathers> QuestActObjItemGroupGathers { get; set; }
        public virtual DbSet<QuestActObjItemGroupUses> QuestActObjItemGroupUses { get; set; }
        public virtual DbSet<QuestActObjItemUses> QuestActObjItemUses { get; set; }
        public virtual DbSet<QuestActObjLaborPowers> QuestActObjLaborPowers { get; set; }
        public virtual DbSet<QuestActObjLevels> QuestActObjLevels { get; set; }
        public virtual DbSet<QuestActObjMateLevels> QuestActObjMateLevels { get; set; }
        public virtual DbSet<QuestActObjMonsterGroupHunts> QuestActObjMonsterGroupHunts { get; set; }
        public virtual DbSet<QuestActObjMonsterHunts> QuestActObjMonsterHunts { get; set; }
        public virtual DbSet<QuestActObjSendMails> QuestActObjSendMails { get; set; }
        public virtual DbSet<QuestActObjSpheres> QuestActObjSpheres { get; set; }
        public virtual DbSet<QuestActObjTalkNpcGroups> QuestActObjTalkNpcGroups { get; set; }
        public virtual DbSet<QuestActObjTalks> QuestActObjTalks { get; set; }
        public virtual DbSet<QuestActObjZoneKills> QuestActObjZoneKills { get; set; }
        public virtual DbSet<QuestActObjZoneMonsterHunts> QuestActObjZoneMonsterHunts { get; set; }
        public virtual DbSet<QuestActObjZoneNpcTalks> QuestActObjZoneNpcTalks { get; set; }
        public virtual DbSet<QuestActObjZoneQuestCompletes> QuestActObjZoneQuestCompletes { get; set; }
        public virtual DbSet<QuestActSupplyAaPoints> QuestActSupplyAaPoints { get; set; }
        public virtual DbSet<QuestActSupplyActabilities> QuestActSupplyActabilities { get; set; }
        public virtual DbSet<QuestActSupplyAppellations> QuestActSupplyAppellations { get; set; }
        public virtual DbSet<QuestActSupplyContributionPoints> QuestActSupplyContributionPoints { get; set; }
        public virtual DbSet<QuestActSupplyCoppers> QuestActSupplyCoppers { get; set; }
        public virtual DbSet<QuestActSupplyCrimePoints> QuestActSupplyCrimePoints { get; set; }
        public virtual DbSet<QuestActSupplyExpeditionExps> QuestActSupplyExpeditionExps { get; set; }
        public virtual DbSet<QuestActSupplyExps> QuestActSupplyExps { get; set; }
        public virtual DbSet<QuestActSupplyFamilyExps> QuestActSupplyFamilyExps { get; set; }
        public virtual DbSet<QuestActSupplyHonorPoints> QuestActSupplyHonorPoints { get; set; }
        public virtual DbSet<QuestActSupplyInteractions> QuestActSupplyInteractions { get; set; }
        public virtual DbSet<QuestActSupplyItems> QuestActSupplyItems { get; set; }
        public virtual DbSet<QuestActSupplyJuryPoints> QuestActSupplyJuryPoints { get; set; }
        public virtual DbSet<QuestActSupplyLeadershipPoints> QuestActSupplyLeadershipPoints { get; set; }
        public virtual DbSet<QuestActSupplyLivingPoints> QuestActSupplyLivingPoints { get; set; }
        public virtual DbSet<QuestActSupplyLps> QuestActSupplyLps { get; set; }
        public virtual DbSet<QuestActSupplyRankedItems> QuestActSupplyRankedItems { get; set; }
        public virtual DbSet<QuestActSupplyRemoveItems> QuestActSupplyRemoveItems { get; set; }
        public virtual DbSet<QuestActSupplySelectiveItems> QuestActSupplySelectiveItems { get; set; }
        public virtual DbSet<QuestActSupplySkills> QuestActSupplySkills { get; set; }
        public virtual DbSet<QuestActs> QuestActs { get; set; }
        public virtual DbSet<QuestCameras> QuestCameras { get; set; }
        public virtual DbSet<QuestCategories> QuestCategories { get; set; }
        public virtual DbSet<QuestChatBubbles> QuestChatBubbles { get; set; }
        public virtual DbSet<QuestComponentTexts> QuestComponentTexts { get; set; }
        public virtual DbSet<QuestComponents> QuestComponents { get; set; }
        public virtual DbSet<QuestContextGroupMembers> QuestContextGroupMembers { get; set; }
        public virtual DbSet<QuestContextGroups> QuestContextGroups { get; set; }
        public virtual DbSet<QuestContextTexts> QuestContextTexts { get; set; }
        public virtual DbSet<QuestContexts> QuestContexts { get; set; }
        public virtual DbSet<QuestDoodadGroups> QuestDoodadGroups { get; set; }
        public virtual DbSet<QuestDoodads> QuestDoodads { get; set; }
        public virtual DbSet<QuestItemGroupItems> QuestItemGroupItems { get; set; }
        public virtual DbSet<QuestItemGroups> QuestItemGroups { get; set; }
        public virtual DbSet<QuestMailAttachmentItems> QuestMailAttachmentItems { get; set; }
        public virtual DbSet<QuestMailAttachments> QuestMailAttachments { get; set; }
        public virtual DbSet<QuestMailSends> QuestMailSends { get; set; }
        public virtual DbSet<QuestMails> QuestMails { get; set; }
        public virtual DbSet<QuestMonsterGroups> QuestMonsterGroups { get; set; }
        public virtual DbSet<QuestMonsterNpcs> QuestMonsterNpcs { get; set; }
        public virtual DbSet<QuestNames> QuestNames { get; set; }
        public virtual DbSet<QuestSupplies> QuestSupplies { get; set; }
        public virtual DbSet<QuestTaskQuests> QuestTaskQuests { get; set; }
        public virtual DbSet<QuestTasks> QuestTasks { get; set; }
        public virtual DbSet<RaceTrackShapes> RaceTrackShapes { get; set; }
        public virtual DbSet<RaceTracks> RaceTracks { get; set; }
        public virtual DbSet<RankRewardLinks> RankRewardLinks { get; set; }
        public virtual DbSet<RankRewards> RankRewards { get; set; }
        public virtual DbSet<RankScopeLinks> RankScopeLinks { get; set; }
        public virtual DbSet<RankScopes> RankScopes { get; set; }
        public virtual DbSet<RankingRewards> RankingRewards { get; set; }
        public virtual DbSet<RankingTabs> RankingTabs { get; set; }
        public virtual DbSet<Rankings> Rankings { get; set; }
        public virtual DbSet<Ranks> Ranks { get; set; }
        public virtual DbSet<RecoverExpEffects> RecoverExpEffects { get; set; }
        public virtual DbSet<RepairSlaveEffects> RepairSlaveEffects { get; set; }
        public virtual DbSet<RepairableSlaves> RepairableSlaves { get; set; }
        public virtual DbSet<ReplaceChatKeys> ReplaceChatKeys { get; set; }
        public virtual DbSet<ReplaceChatTexts> ReplaceChatTexts { get; set; }
        public virtual DbSet<ReplaceChats> ReplaceChats { get; set; }
        public virtual DbSet<ReportCrimeEffects> ReportCrimeEffects { get; set; }
        public virtual DbSet<ReputationResets> ReputationResets { get; set; }
        public virtual DbSet<ReputationRewards> ReputationRewards { get; set; }
        public virtual DbSet<ResetAoeDiminishingEffects> ResetAoeDiminishingEffects { get; set; }
        public virtual DbSet<ResidentConditions> ResidentConditions { get; set; }
        public virtual DbSet<RestoreManaEffects> RestoreManaEffects { get; set; }
        public virtual DbSet<ReturnPoints> ReturnPoints { get; set; }
        public virtual DbSet<ScheduleItems> ScheduleItems { get; set; }
        public virtual DbSet<SchemaMigrations> SchemaMigrations { get; set; }
        public virtual DbSet<ScopedFEffects> ScopedFEffects { get; set; }
        public virtual DbSet<ShipModels> ShipModels { get; set; }
        public virtual DbSet<ShipyardRewards> ShipyardRewards { get; set; }
        public virtual DbSet<ShipyardSteps> ShipyardSteps { get; set; }
        public virtual DbSet<Shipyards> Shipyards { get; set; }
        public virtual DbSet<SiegeItems> SiegeItems { get; set; }
        public virtual DbSet<SiegeSettings> SiegeSettings { get; set; }
        public virtual DbSet<SiegeSkills> SiegeSkills { get; set; }
        public virtual DbSet<SiegeTicketOffensePrices> SiegeTicketOffensePrices { get; set; }
        public virtual DbSet<SiegeZones> SiegeZones { get; set; }
        public virtual DbSet<SkillControllers> SkillControllers { get; set; }
        public virtual DbSet<SkillDynamicEffects> SkillDynamicEffects { get; set; }
        public virtual DbSet<SkillEffects> SkillEffects { get; set; }
        public virtual DbSet<SkillModifiers> SkillModifiers { get; set; }
        public virtual DbSet<SkillProducts> SkillProducts { get; set; }
        public virtual DbSet<SkillReagents> SkillReagents { get; set; }
        public virtual DbSet<SkillReqSkillTags> SkillReqSkillTags { get; set; }
        public virtual DbSet<SkillReqSkills> SkillReqSkills { get; set; }
        public virtual DbSet<SkillReqs> SkillReqs { get; set; }
        public virtual DbSet<SkillSynergyIcons> SkillSynergyIcons { get; set; }
        public virtual DbSet<SkillVisualGroups> SkillVisualGroups { get; set; }
        public virtual DbSet<Skills> Skills { get; set; }
        public virtual DbSet<SkinColors> SkinColors { get; set; }
        public virtual DbSet<SlashCommands> SlashCommands { get; set; }
        public virtual DbSet<SlashFunctions> SlashFunctions { get; set; }
        public virtual DbSet<SlaveBindings> SlaveBindings { get; set; }
        public virtual DbSet<SlaveCollisionDamages> SlaveCollisionDamages { get; set; }
        public virtual DbSet<SlaveCustomizingEquipSlots> SlaveCustomizingEquipSlots { get; set; }
        public virtual DbSet<SlaveCustomizings> SlaveCustomizings { get; set; }
        public virtual DbSet<SlaveDoodadBindings> SlaveDoodadBindings { get; set; }
        public virtual DbSet<SlaveDropDoodads> SlaveDropDoodads { get; set; }
        public virtual DbSet<SlaveEquipPacks> SlaveEquipPacks { get; set; }
        public virtual DbSet<SlaveEquipSlots> SlaveEquipSlots { get; set; }
        public virtual DbSet<SlaveEquipmentEquipSlotPacks> SlaveEquipmentEquipSlotPacks { get; set; }
        public virtual DbSet<SlaveHealingPointDoodads> SlaveHealingPointDoodads { get; set; }
        public virtual DbSet<SlaveInitialBuffs> SlaveInitialBuffs { get; set; }
        public virtual DbSet<SlaveInitialItemPacks> SlaveInitialItemPacks { get; set; }
        public virtual DbSet<SlaveInitialItems> SlaveInitialItems { get; set; }
        public virtual DbSet<SlaveInteractionSkills> SlaveInteractionSkills { get; set; }
        public virtual DbSet<SlaveMountSkills> SlaveMountSkills { get; set; }
        public virtual DbSet<SlavePassiveBuffs> SlavePassiveBuffs { get; set; }
        public virtual DbSet<Slaves> Slaves { get; set; }
        public virtual DbSet<SoundPackItems> SoundPackItems { get; set; }
        public virtual DbSet<SoundPacks> SoundPacks { get; set; }
        public virtual DbSet<Sounds> Sounds { get; set; }
        public virtual DbSet<SpawnEffects> SpawnEffects { get; set; }
        public virtual DbSet<SpawnFishEffects> SpawnFishEffects { get; set; }
        public virtual DbSet<SpawnGimmickEffects> SpawnGimmickEffects { get; set; }
        public virtual DbSet<SpecialEffects> SpecialEffects { get; set; }
        public virtual DbSet<Specialties> Specialties { get; set; }
        public virtual DbSet<SpecialtyBundleItems> SpecialtyBundleItems { get; set; }
        public virtual DbSet<SpecialtyBundles> SpecialtyBundles { get; set; }
        public virtual DbSet<SpecialtyEventTriggers> SpecialtyEventTriggers { get; set; }
        public virtual DbSet<SpecialtyEvents> SpecialtyEvents { get; set; }
        public virtual DbSet<SpecialtyNpcs> SpecialtyNpcs { get; set; }
        public virtual DbSet<SphereAcceptQuestQuests> SphereAcceptQuestQuests { get; set; }
        public virtual DbSet<SphereAcceptQuests> SphereAcceptQuests { get; set; }
        public virtual DbSet<SphereBubbles> SphereBubbles { get; set; }
        public virtual DbSet<SphereBuffs> SphereBuffs { get; set; }
        public virtual DbSet<SphereChatBubbles> SphereChatBubbles { get; set; }
        public virtual DbSet<SphereDoodadInteracts> SphereDoodadInteracts { get; set; }
        public virtual DbSet<SphereQuestMails> SphereQuestMails { get; set; }
        public virtual DbSet<SphereQuests> SphereQuests { get; set; }
        public virtual DbSet<SphereSkills> SphereSkills { get; set; }
        public virtual DbSet<SphereSounds> SphereSounds { get; set; }
        public virtual DbSet<Spheres> Spheres { get; set; }
        public virtual DbSet<SubZones> SubZones { get; set; }
        public virtual DbSet<SystemDoodads> SystemDoodads { get; set; }
        public virtual DbSet<SystemFactionRelations> SystemFactionRelations { get; set; }
        public virtual DbSet<SystemFactions> SystemFactions { get; set; }
        public virtual DbSet<TaggedBuffs> TaggedBuffs { get; set; }
        public virtual DbSet<TaggedImmuneBuffs> TaggedImmuneBuffs { get; set; }
        public virtual DbSet<TaggedItems> TaggedItems { get; set; }
        public virtual DbSet<TaggedNpcs> TaggedNpcs { get; set; }
        public virtual DbSet<TaggedRequireBuffs> TaggedRequireBuffs { get; set; }
        public virtual DbSet<TaggedSkills> TaggedSkills { get; set; }
        public virtual DbSet<Tags> Tags { get; set; }
        public virtual DbSet<Taxations> Taxations { get; set; }
        public virtual DbSet<TodayQuestGoalItems> TodayQuestGoalItems { get; set; }
        public virtual DbSet<TodayQuestGoals> TodayQuestGoals { get; set; }
        public virtual DbSet<TodayQuestGroupQuests> TodayQuestGroupQuests { get; set; }
        public virtual DbSet<TodayQuestGroups> TodayQuestGroups { get; set; }
        public virtual DbSet<TodayQuestSteps> TodayQuestSteps { get; set; }
        public virtual DbSet<TooltipSkillEffects> TooltipSkillEffects { get; set; }
        public virtual DbSet<TotalCharacterCustoms> TotalCharacterCustoms { get; set; }
        public virtual DbSet<TowerDefProgSpawnTargets> TowerDefProgSpawnTargets { get; set; }
        public virtual DbSet<TowerDefProgs> TowerDefProgs { get; set; }
        public virtual DbSet<TowerDefs> TowerDefs { get; set; }
        public virtual DbSet<TradegoodCategories> TradegoodCategories { get; set; }
        public virtual DbSet<TradegoodMaterials> TradegoodMaterials { get; set; }
        public virtual DbSet<TradegoodPriceindices> TradegoodPriceindices { get; set; }
        public virtual DbSet<Tradegoods> Tradegoods { get; set; }
        public virtual DbSet<TrainCraftEffects> TrainCraftEffects { get; set; }
        public virtual DbSet<TrainCraftRankEffects> TrainCraftRankEffects { get; set; }
        public virtual DbSet<TransferBindingDoodads> TransferBindingDoodads { get; set; }
        public virtual DbSet<TransferBindings> TransferBindings { get; set; }
        public virtual DbSet<TransferPaths> TransferPaths { get; set; }
        public virtual DbSet<Transfers> Transfers { get; set; }
        public virtual DbSet<UccApplicables> UccApplicables { get; set; }
        public virtual DbSet<UccCategories> UccCategories { get; set; }
        public virtual DbSet<UccEmblems> UccEmblems { get; set; }
        public virtual DbSet<UccSubCategories> UccSubCategories { get; set; }
        public virtual DbSet<UiAviSubs> UiAviSubs { get; set; }
        public virtual DbSet<UiAvis> UiAvis { get; set; }
        public virtual DbSet<UiTexts> UiTexts { get; set; }
        public virtual DbSet<UnitAttributeLimits> UnitAttributeLimits { get; set; }
        public virtual DbSet<UnitFormulaVariables> UnitFormulaVariables { get; set; }
        public virtual DbSet<UnitFormulas> UnitFormulas { get; set; }
        public virtual DbSet<UnitModifiers> UnitModifiers { get; set; }
        public virtual DbSet<UnitReqs> UnitReqs { get; set; }
        public virtual DbSet<VehicleModels> VehicleModels { get; set; }
        public virtual DbSet<WearableFormulas> WearableFormulas { get; set; }
        public virtual DbSet<WearableKinds> WearableKinds { get; set; }
        public virtual DbSet<WearableSlots> WearableSlots { get; set; }
        public virtual DbSet<Wearables> Wearables { get; set; }
        public virtual DbSet<WiDetails> WiDetails { get; set; }
        public virtual DbSet<WiGroupWis> WiGroupWis { get; set; }
        public virtual DbSet<WiGroups> WiGroups { get; set; }
        public virtual DbSet<WorldGroups> WorldGroups { get; set; }
        public virtual DbSet<WorldMessageEffects> WorldMessageEffects { get; set; }
        public virtual DbSet<WorldSpecConfigs> WorldSpecConfigs { get; set; }
        public virtual DbSet<ZoneClimateElems> ZoneClimateElems { get; set; }
        public virtual DbSet<ZoneClimates> ZoneClimates { get; set; }
        public virtual DbSet<ZoneGroupBannedTags> ZoneGroupBannedTags { get; set; }
        public virtual DbSet<ZoneGroups> ZoneGroups { get; set; }
        public virtual DbSet<ZoneWaitingFactions> ZoneWaitingFactions { get; set; }
        public virtual DbSet<ZoneWaitings> ZoneWaitings { get; set; }
        public virtual DbSet<Zones> Zones { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlite($"DataSource={FileManager.AppPath}/Data/compact.sqlite3");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AcceptQuestEffects>(entity =>
            {
                entity.ToTable("accept_quest_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<AccountAttendanceRewards>(entity =>
            {
                entity.ToTable("account_attendance_rewards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AdditionalReward)
                    .HasColumnName("additional_reward")
                    .HasColumnType("bool");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.DayCount)
                    .HasColumnName("day_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Month)
                    .HasColumnName("month")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.AccountAttendanceRewards)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.AccountAttendanceRewards)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<AccountAttributeEffects>(entity =>
            {
                entity.ToTable("account_attribute_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BindWorld)
                    .HasColumnName("bind_world")
                    .HasColumnType("bool");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.IsAdd)
                    .HasColumnName("is_add")
                    .HasColumnType("bool");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindValue)
                    .HasColumnName("kind_value")
                    .HasColumnType("int");

                entity.Property(e => e.Time)
                    .HasColumnName("time")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<AchievementObjectives>(entity =>
            {
                entity.ToTable("achievement_objectives");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AchievementId)
                    .HasColumnName("achievement_id")
                    .HasColumnType("int");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.RecordId)
                    .HasColumnName("record_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Achievement)
                    .WithMany(p => p.AchievementObjectives)
                    .HasForeignKey(d => d.AchievementId);
            });

            modelBuilder.Entity<Achievements>(entity =>
            {
                entity.ToTable("achievements");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.CompleteNum)
                    .HasColumnName("complete_num")
                    .HasColumnType("int");

                entity.Property(e => e.CompleteOr)
                    .HasColumnName("complete_or")
                    .HasColumnType("bool");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasColumnType("bool");

                entity.Property(e => e.IsHidden)
                    .HasColumnName("is_hidden")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemNum)
                    .HasColumnName("item_num")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.ParentAchievementId)
                    .HasColumnName("parent_achievement_id")
                    .HasColumnType("int");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");

                entity.Property(e => e.SubCategoryId)
                    .HasColumnName("sub_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.Summary).HasColumnName("summary");

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.Achievements)
                    .HasForeignKey(d => d.IconId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Achievements)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ActabilityCategories>(entity =>
            {
                entity.ToTable("actability_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.VisibleOrder)
                    .HasColumnName("visible_order")
                    .HasColumnType("int");

                entity.Property(e => e.VisibleUi)
                    .HasColumnName("visible_ui")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<ActabilityGroups>(entity =>
            {
                entity.ToTable("actability_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.SkillPageVisible)
                    .HasColumnName("skill_page_visible")
                    .HasColumnType("bool");

                entity.Property(e => e.UnitAttrId)
                    .HasColumnName("unit_attr_id")
                    .HasColumnType("int");

                entity.Property(e => e.Visible)
                    .HasColumnName("visible")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<ActabilityViewGroupElems>(entity =>
            {
                entity.HasKey(o => new { o.ActabilityGroupId, o.ActabilityViewGroupId});

                entity.ToTable("actability_view_group_elems");

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActabilityViewGroupId)
                    .HasColumnName("actability_view_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.VisibleOrder)
                    .HasColumnName("visible_order")
                    .HasColumnType("int");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.ActabilityViewGroupElems)
                    .HasForeignKey(d => d.ActabilityGroupId);

                entity.HasOne(d => d.ActabilityViewGroup)
                    .WithMany(p => p.ActabilityViewGroupElems)
                    .HasForeignKey(d => d.ActabilityViewGroupId);
            });
            
            modelBuilder.Entity<ActabilityViewGroups>(entity =>
            {
                entity.ToTable("actability_view_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.VisibleOrder)
                    .HasColumnName("visible_order")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ActorModels>(entity =>
            {
                entity.ToTable("actor_models");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActorHeight).HasColumnName("actor_height");

                entity.Property(e => e.AddBox)
                    .HasColumnName("add_box")
                    .HasColumnType("bool");

                entity.Property(e => e.AnimationGraph).HasColumnName("animation_graph");

                entity.Property(e => e.AttackStartRange).HasColumnName("attack_start_range");

                entity.Property(e => e.BeanstalkBack).HasColumnName("beanstalk_back");

                entity.Property(e => e.BoxX).HasColumnName("box_x");

                entity.Property(e => e.BoxY).HasColumnName("box_y");

                entity.Property(e => e.BoxZ).HasColumnName("box_z");

                entity.Property(e => e.CenterX).HasColumnName("center_x");

                entity.Property(e => e.CenterY).HasColumnName("center_y");

                entity.Property(e => e.CenterZ).HasColumnName("center_z");

                entity.Property(e => e.FaceTargetInstantly)
                    .HasColumnName("face_target_instantly")
                    .HasColumnType("bool");

                entity.Property(e => e.FlyMode)
                    .HasColumnName("fly_mode")
                    .HasColumnType("bool");

                entity.Property(e => e.FxScale).HasColumnName("fx_scale");

                entity.Property(e => e.GameBackwardDiagonalMultiplier).HasColumnName("game_backward_diagonal_multiplier");

                entity.Property(e => e.GameBackwardMultiplier).HasColumnName("game_backward_multiplier");

                entity.Property(e => e.GameBowLookIkBlendHead).HasColumnName("game_bow_look_ik_blend_head");

                entity.Property(e => e.GameBowLookIkBlendNeck).HasColumnName("game_bow_look_ik_blend_neck");

                entity.Property(e => e.GameBowLookIkBlendSpine1).HasColumnName("game_bow_look_ik_blend_spine1");

                entity.Property(e => e.GameBowLookIkBlendSpine2).HasColumnName("game_bow_look_ik_blend_spine2");

                entity.Property(e => e.GameBowLookIkBlendSpine3).HasColumnName("game_bow_look_ik_blend_spine3");

                entity.Property(e => e.GameForwardDiagonalMultiplier).HasColumnName("game_forward_diagonal_multiplier");

                entity.Property(e => e.GameForwardMultiplier).HasColumnName("game_forward_multiplier");

                entity.Property(e => e.GameGrabMultiplier).HasColumnName("game_grab_multiplier");

                entity.Property(e => e.GameInertia).HasColumnName("game_inertia");

                entity.Property(e => e.GameInertiaAccel).HasColumnName("game_inertia_accel");

                entity.Property(e => e.GameJumpHeight).HasColumnName("game_jump_height");

                entity.Property(e => e.GameLeanAngle)
                    .HasColumnName("game_lean_angle")
                    .HasColumnType("int");

                entity.Property(e => e.GameLeanShift).HasColumnName("game_lean_shift");

                entity.Property(e => e.GameLookIkBlendHead).HasColumnName("game_look_ik_blend_head");

                entity.Property(e => e.GameLookIkBlendNeck).HasColumnName("game_look_ik_blend_neck");

                entity.Property(e => e.GameLookIkBlendSpine1).HasColumnName("game_look_ik_blend_spine1");

                entity.Property(e => e.GameLookIkBlendSpine2).HasColumnName("game_look_ik_blend_spine2");

                entity.Property(e => e.GameLookIkBlendSpine3).HasColumnName("game_look_ik_blend_spine3");

                entity.Property(e => e.GameMaxGrabMass)
                    .HasColumnName("game_max_grab_mass")
                    .HasColumnType("int");

                entity.Property(e => e.GameMaxGrabVolume).HasColumnName("game_max_grab_volume");

                entity.Property(e => e.GameSprintMultiplier).HasColumnName("game_sprint_multiplier");

                entity.Property(e => e.GameStrafeMultiplier).HasColumnName("game_strafe_multiplier");

                entity.Property(e => e.GameWalkBackwardDiagonalMultiplier).HasColumnName("game_walk_backward_diagonal_multiplier");

                entity.Property(e => e.GameWalkBackwardMultiplier).HasColumnName("game_walk_backward_multiplier");

                entity.Property(e => e.GameWalkForwardDiagonalMultiplier).HasColumnName("game_walk_forward_diagonal_multiplier");

                entity.Property(e => e.GameWalkMultiplier).HasColumnName("game_walk_multiplier");

                entity.Property(e => e.GameWalkStrafeMultiplier).HasColumnName("game_walk_strafe_multiplier");

                entity.Property(e => e.GroundTargetable)
                    .HasColumnName("ground_targetable")
                    .HasColumnType("bool");

                entity.Property(e => e.HandRate).HasColumnName("hand_rate");

                entity.Property(e => e.Height).HasColumnName("height");

                entity.Property(e => e.HitPower)
                    .HasColumnName("hit_power")
                    .HasColumnType("int");

                entity.Property(e => e.HropeDown).HasColumnName("hrope_down");

                entity.Property(e => e.ModelFile).HasColumnName("model_file");

                entity.Property(e => e.MovementId)
                    .HasColumnName("movement_id")
                    .HasColumnType("int");

                entity.Property(e => e.PhysicsFlags)
                    .HasColumnName("physics_flags")
                    .HasColumnType("int");

                entity.Property(e => e.PhysicsLivingAirResistance).HasColumnName("physics_living_air_resistance");

                entity.Property(e => e.PhysicsLivingColliderMat).HasColumnName("physics_living_collider_mat");

                entity.Property(e => e.PhysicsLivingGravity).HasColumnName("physics_living_gravity");

                entity.Property(e => e.PhysicsLivingKAirControl).HasColumnName("physics_living_k_air_control");

                entity.Property(e => e.PhysicsLivingMass)
                    .HasColumnName("physics_living_mass")
                    .HasColumnType("int");

                entity.Property(e => e.PhysicsLivingMaxClimbAngle).HasColumnName("physics_living_max_climb_angle");

                entity.Property(e => e.PhysicsLivingMaxVelGround)
                    .HasColumnName("physics_living_max_vel_ground")
                    .HasColumnType("int");

                entity.Property(e => e.PhysicsLivingMinFallAngle).HasColumnName("physics_living_min_fall_angle");

                entity.Property(e => e.PhysicsLivingMinSlideAngle).HasColumnName("physics_living_min_slide_angle");

                entity.Property(e => e.PhysicsLivingTimeImpulseRecover).HasColumnName("physics_living_time_impulse_recover");

                entity.Property(e => e.PhysicsMass)
                    .HasColumnName("physics_mass")
                    .HasColumnType("int");

                entity.Property(e => e.PhysicsStiffnessScale)
                    .HasColumnName("physics_stiffness_scale")
                    .HasColumnType("int");

                entity.Property(e => e.Portrait).HasColumnName("portrait");

                entity.Property(e => e.PushRagdoll)
                    .HasColumnName("push_ragdoll")
                    .HasColumnType("bool");

                entity.Property(e => e.Radius).HasColumnName("radius");

                entity.Property(e => e.RestrictBoardingMate)
                    .HasColumnName("restrict_boarding_mate")
                    .HasColumnType("bool");

                entity.Property(e => e.RestrictBoardingSlave)
                    .HasColumnName("restrict_boarding_slave")
                    .HasColumnType("bool");

                entity.Property(e => e.RestrictClimb)
                    .HasColumnName("restrict_climb")
                    .HasColumnType("bool");

                entity.Property(e => e.RopeBack).HasColumnName("rope_back");

                entity.Property(e => e.RopeHangingHandOffsetX).HasColumnName("rope_hanging_hand_offset_x");

                entity.Property(e => e.RopeHangingHandOffsetY).HasColumnName("rope_hanging_hand_offset_y");

                entity.Property(e => e.RopeHangingHandOffsetZ).HasColumnName("rope_hanging_hand_offset_z");

                entity.Property(e => e.SharedDummyModel)
                    .HasColumnName("shared_dummy_model")
                    .HasColumnType("bool");

                entity.Property(e => e.SightFov).HasColumnName("sight_fov");

                entity.Property(e => e.SightRange).HasColumnName("sight_range");

                entity.Property(e => e.SlopeAlignment)
                    .HasColumnName("slope_alignment")
                    .HasColumnType("bool");

                entity.Property(e => e.TurnSpeed).HasColumnName("turn_speed");

                entity.Property(e => e.UnderwaterCreature)
                    .HasColumnName("underwater_creature")
                    .HasColumnType("bool");

                entity.Property(e => e.UpperbodyGraph).HasColumnName("upperbody_graph");

                entity.Property(e => e.UseRagdoll)
                    .HasColumnName("use_ragdoll")
                    .HasColumnType("bool");

                entity.Property(e => e.UseRagdollHit)
                    .HasColumnName("use_ragdoll_hit")
                    .HasColumnType("bool");

                entity.Property(e => e.UseRagdollKnockDown)
                    .HasColumnName("use_ragdoll_knock_down")
                    .HasColumnType("bool");

                entity.Property(e => e.UseRandomIdleControl)
                    .HasColumnName("use_random_idle_control")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<AggroEffects>(entity =>
            {
                entity.ToTable("aggro_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ChargedBuffId)
                    .HasColumnName("charged_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChargedMul).HasColumnName("charged_mul");

                entity.Property(e => e.FixedMax)
                    .HasColumnName("fixed_max")
                    .HasColumnType("int");

                entity.Property(e => e.FixedMin)
                    .HasColumnName("fixed_min")
                    .HasColumnType("int");

                entity.Property(e => e.LevelMd).HasColumnName("level_md");

                entity.Property(e => e.LevelVaEnd)
                    .HasColumnName("level_va_end")
                    .HasColumnType("int");

                entity.Property(e => e.LevelVaStart)
                    .HasColumnName("level_va_start")
                    .HasColumnType("int");

                entity.Property(e => e.UseChargedBuff)
                    .HasColumnName("use_charged_buff")
                    .HasColumnType("bool");

                entity.Property(e => e.UseFixedAggro)
                    .HasColumnName("use_fixed_aggro")
                    .HasColumnType("bool");

                entity.Property(e => e.UseLevelAggro)
                    .HasColumnName("use_level_aggro")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<AiEvents>(entity =>
            {
                entity.ToTable("ai_events");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.IgnoreCategoryId)
                    .HasColumnName("ignore_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.IgnoreTime).HasColumnName("ignore_time");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.AiEvents)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.AiEvents)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<AiFiles>(entity =>
            {
                entity.ToTable("ai_files");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ParamTemplate).HasColumnName("param_template");
            });

            modelBuilder.Entity<AllowToEquipSlaves>(entity =>
            {
                entity.HasKey(o => new { o.SlaveEquipPackId, o.SlaveId});

                entity.ToTable("allow_to_equip_slaves");

                entity.Property(e => e.SlaveEquipPackId)
                    .HasColumnName("slave_equip_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.SlaveEquipPack)
                    .WithMany(p => p.AllowToEquipSlaves)
                    .HasForeignKey(d => d.SlaveEquipPackId);

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.AllowToEquipSlaves)
                    .HasForeignKey(d => d.SlaveId);
            });
            
            modelBuilder.Entity<AllowToEquipSlots>(entity =>
            {
                entity.ToTable("allow_to_equip_slots");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DualEquipSlotId)
                    .HasColumnName("dual_equip_slot_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipSlotId)
                    .HasColumnName("equip_slot_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveEquipmentEquipSlotPackId)
                    .HasColumnName("slave_equipment_equip_slot_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.SlaveEquipmentEquipSlotPack)
                    .WithMany(p => p.AllowToEquipSlots)
                    .HasForeignKey(d => d.SlaveEquipmentEquipSlotPackId);
            });

            modelBuilder.Entity<AllowedNameChars>(entity =>
            {
                entity.ToTable("allowed_name_chars");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Bytes)
                    .HasColumnName("bytes")
                    .HasColumnType("int");

                entity.Property(e => e.Char).HasColumnName("char");
            });

            modelBuilder.Entity<AnimActions>(entity =>
            {
                entity.ToTable("anim_actions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActionStateId)
                    .HasColumnName("action_state_id")
                    .HasColumnType("int");

                entity.Property(e => e.AnimName).HasColumnName("anim_name");

                entity.Property(e => e.MainhandToolId)
                    .HasColumnName("mainhand_tool_id")
                    .HasColumnType("int");

                entity.Property(e => e.ModelAngle).HasColumnName("model_angle");

                entity.Property(e => e.ModelPath).HasColumnName("model_path");

                entity.Property(e => e.ModelPhysic)
                    .HasColumnName("model_physic")
                    .HasColumnType("bool");

                entity.Property(e => e.ModelPosX).HasColumnName("model_pos_x");

                entity.Property(e => e.ModelPosY).HasColumnName("model_pos_y");

                entity.Property(e => e.ModelPosZ).HasColumnName("model_pos_z");

                entity.Property(e => e.MountPoseId)
                    .HasColumnName("mount_pose_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NoRotate)
                    .HasColumnName("no_rotate")
                    .HasColumnType("bool");

                entity.Property(e => e.OffhandToolId)
                    .HasColumnName("offhand_tool_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.MountPose)
                    .WithMany(p => p.AnimActions)
                    .HasForeignKey(d => d.MountPoseId);
            });

            modelBuilder.Entity<AnimRules>(entity =>
            {
                entity.ToTable("anim_rules");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Before)
                    .HasColumnName("before")
                    .HasColumnType("int");

                entity.Property(e => e.BeforeOperatorId)
                    .HasColumnName("before_operator_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultOperatorId)
                    .HasColumnName("default_operator_id")
                    .HasColumnType("int");

                entity.Property(e => e.FirstCategoryId)
                    .HasColumnName("first_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.SecondCategoryId)
                    .HasColumnName("second_category_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Anims>(entity =>
            {
                entity.ToTable("anims");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.HangUb).HasColumnName("hang_ub");

                entity.Property(e => e.Loop)
                    .HasColumnName("loop")
                    .HasColumnType("bool");

                entity.Property(e => e.MoveUb).HasColumnName("move_ub");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.RelaxedUb).HasColumnName("relaxed_ub");

                entity.Property(e => e.RideUb).HasColumnName("ride_ub");

                entity.Property(e => e.SwimMoveUb).HasColumnName("swim_move_ub");

                entity.Property(e => e.SwimUb).HasColumnName("swim_ub");
            });

            modelBuilder.Entity<AoeDiminishings>(entity =>
            {
                entity.ToTable("aoe_diminishings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Rate).HasColumnName("rate");
            });

            modelBuilder.Entity<AoeShapes>(entity =>
            {
                entity.ToTable("aoe_shapes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AdjustAngle)
                    .HasColumnName("adjust_angle")
                    .HasColumnType("bool");

                entity.Property(e => e.AreaTargetKindId)
                    .HasColumnName("area_target_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.CalcDistance)
                    .HasColumnName("calc_distance")
                    .HasColumnType("bool");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value1).HasColumnName("value1");

                entity.Property(e => e.Value2).HasColumnName("value2");

                entity.Property(e => e.Value3).HasColumnName("value3");
            });

            modelBuilder.Entity<Appellations>(entity =>
            {
                entity.ToTable("appellations");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApplyAppellationAtOnce)
                    .HasColumnName("apply_appellation_at_once")
                    .HasColumnType("bool");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.Appellations)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<AreaEventCheckNpcs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("area_event_check_npcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<ArmorAssets>(entity =>
            {
                entity.ToTable("armor_assets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DefaultAssetId)
                    .HasColumnName("default_asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ArmorGradeBuffs>(entity =>
            {
                entity.ToTable("armor_grade_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArmorTypeId)
                    .HasColumnName("armor_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.ArmorGradeBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.ArmorGradeBuffs)
                    .HasForeignKey(d => d.ItemGradeId);
            });

            
            modelBuilder.Entity<AttachAnims>(entity =>
            {
                entity.HasKey(o => new { o.AnimActionId });

                entity.ToTable("attach_anims");

                entity.Property(e => e.AnimActionId)
                    .HasColumnName("anim_action_id")
                    .HasColumnType("int");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.HasOne(d => d.AnimAction)
                    .WithMany(p => p.AttachAnims)
                    .HasForeignKey(d => d.AnimActionId);
            });
            
            modelBuilder.Entity<AttachmentAnims>(entity =>
            {
                entity.HasKey(o => new { o.AnimId, o.AttachmentId });

                entity.ToTable("attachment_anims");

                entity.Property(e => e.AnimId)
                    .HasColumnName("anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.AttachmentId)
                    .HasColumnName("attachment_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.HasOne(d => d.Anim)
                    .WithMany(p => p.AttachmentAnims)
                    .HasForeignKey(d => d.AnimId);

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.AttachmentAnims)
                    .HasForeignKey(d => d.AttachmentId);
            });
            
            modelBuilder.Entity<Attachments>(entity =>
            {
                entity.ToTable("attachments");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<AuctionACategories>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("auction_a_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<AuctionBCategories>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("auction_b_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ParentCategoryId)
                    .HasColumnName("parent_category_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<AuctionCCategories>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("auction_c_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ParentCategoryId)
                    .HasColumnName("parent_category_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<BagExpands>(entity =>
            {
                entity.ToTable("bag_expands");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("currency_id")
                    .HasColumnType("int");

                entity.Property(e => e.IsBank)
                    .HasColumnName("is_bank")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("int");

                entity.Property(e => e.Step)
                    .HasColumnName("step")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BagExpands)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<BattleCoins>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("battle_coins");

                entity.Property(e => e.BlueNpcId).HasColumnName("blue_npc_id");

                entity.Property(e => e.GiveNpc).HasColumnName("give_npc");

                entity.Property(e => e.GivePk).HasColumnName("give_pk");

                entity.Property(e => e.GiveTerm).HasColumnName("give_term");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemCount).HasColumnName("item_count");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.MaxNpcCount).HasColumnName("max_npc_count");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.RedNpcId).HasColumnName("red_npc_id");

                entity.Property(e => e.ZoneGroupId).HasColumnName("zone_group_id");
            });

            modelBuilder.Entity<BattleFieldBannedTags>(entity =>
            {
                entity.ToTable("battle_field_banned_tags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BattleFieldId)
                    .HasColumnName("battle_field_id")
                    .HasColumnType("int");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.BattleField)
                    .WithMany(p => p.BattleFieldBannedTags)
                    .HasForeignKey(d => d.BattleFieldId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.BattleFieldBannedTags)
                    .HasForeignKey(d => d.TagId);
            });

            modelBuilder.Entity<BattleFieldBuffs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("battle_field_buffs");

                entity.Property(e => e.BattleFieldId)
                    .HasColumnName("battle_field_id")
                    .HasColumnType("INT");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<BattleFieldHonorBuffs>(entity =>
            {
                entity.ToTable("battle_field_honor_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BasicValue)
                    .HasColumnName("basic_value")
                    .HasColumnType("int");

                entity.Property(e => e.BattleFieldId)
                    .HasColumnName("battle_field_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.LoseValue)
                    .HasColumnName("lose_value")
                    .HasColumnType("int");

                entity.Property(e => e.WinValue)
                    .HasColumnName("win_value")
                    .HasColumnType("int");

                entity.HasOne(d => d.BattleField)
                    .WithMany(p => p.BattleFieldHonorBuffs)
                    .HasForeignKey(d => d.BattleFieldId);

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BattleFieldHonorBuffs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<BattleFieldPermittedTags>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("battle_field_permitted_tags");

                entity.Property(e => e.BattleFieldId).HasColumnName("battle_field_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.TagId).HasColumnName("tag_id");
            });

            modelBuilder.Entity<BattleFieldPickBuffs>(entity =>
            {
                entity.ToTable("battle_field_pick_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BattleFieldId)
                    .HasColumnName("battle_field_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.BattleField)
                    .WithMany(p => p.BattleFieldPickBuffs)
                    .HasForeignKey(d => d.BattleFieldId);

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BattleFieldPickBuffs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<BattleFieldRewards>(entity =>
            {
                entity.ToTable("battle_field_rewards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BattleFieldId)
                    .HasColumnName("battle_field_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.RankEnd)
                    .HasColumnName("rank_end")
                    .HasColumnType("int");

                entity.Property(e => e.RankStart)
                    .HasColumnName("rank_start")
                    .HasColumnType("int");

                entity.HasOne(d => d.BattleField)
                    .WithMany(p => p.BattleFieldRewards)
                    .HasForeignKey(d => d.BattleFieldId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BattleFieldRewards)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<BattleFieldShipEquipments>(entity =>
            {
                entity.ToTable("battle_field_ship_equipments");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Enable)
                    .HasColumnName("enable")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BattleFieldShipEquipments)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<BattleFieldShips>(entity =>
            {
                entity.ToTable("battle_field_ships");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.IncPickCountEnable)
                    .HasColumnName("inc_pick_count_enable")
                    .HasColumnType("bool");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NeedBuffId)
                    .HasColumnName("need_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShipImg).HasColumnName("ship_img");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.BattleFieldShips)
                    .HasForeignKey(d => d.SlaveId);
            });

            modelBuilder.Entity<BattleFields>(entity =>
            {
                entity.ToTable("battle_fields");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApplyWaitingTime)
                    .HasColumnName("apply_waiting_time")
                    .HasColumnType("int");

                entity.Property(e => e.BalanceLevel)
                    .HasColumnName("balance_level")
                    .HasColumnType("int");

                entity.Property(e => e.DayOfWeekTime0)
                    .HasColumnName("day_of_week_time_0")
                    .HasColumnType("int");

                entity.Property(e => e.DayOfWeekTime1)
                    .HasColumnName("day_of_week_time_1")
                    .HasColumnType("int");

                entity.Property(e => e.DayOfWeekTime2)
                    .HasColumnName("day_of_week_time_2")
                    .HasColumnType("int");

                entity.Property(e => e.DayOfWeekTime3)
                    .HasColumnName("day_of_week_time_3")
                    .HasColumnType("int");

                entity.Property(e => e.DayOfWeekTime4)
                    .HasColumnName("day_of_week_time_4")
                    .HasColumnType("int");

                entity.Property(e => e.DayOfWeekTime5)
                    .HasColumnName("day_of_week_time_5")
                    .HasColumnType("int");

                entity.Property(e => e.DayOfWeekTime6)
                    .HasColumnName("day_of_week_time_6")
                    .HasColumnType("int");

                entity.Property(e => e.DayOfWeekTime7)
                    .HasColumnName("day_of_week_time_7")
                    .HasColumnType("int");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.EloRatingScope0)
                    .HasColumnName("elo_rating_scope0")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope1)
                    .HasColumnName("elo_rating_scope1")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope10)
                    .HasColumnName("elo_rating_scope10")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope2)
                    .HasColumnName("elo_rating_scope2")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope3)
                    .HasColumnName("elo_rating_scope3")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope4)
                    .HasColumnName("elo_rating_scope4")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope5)
                    .HasColumnName("elo_rating_scope5")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope6)
                    .HasColumnName("elo_rating_scope6")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope7)
                    .HasColumnName("elo_rating_scope7")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope8)
                    .HasColumnName("elo_rating_scope8")
                    .HasColumnType("int");

                entity.Property(e => e.EloRatingScope9)
                    .HasColumnName("elo_rating_scope9")
                    .HasColumnType("int");

                entity.Property(e => e.EnterCount)
                    .HasColumnName("enter_count")
                    .HasColumnType("int");

                entity.Property(e => e.FieldKindId)
                    .HasColumnName("field_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.MatchCleanupTerm)
                    .HasColumnName("match_cleanup_term")
                    .HasColumnType("int");

                entity.Property(e => e.MatchGradeDiffMax)
                    .HasColumnName("match_grade_diff_max")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ShowUi)
                    .HasColumnName("show_ui")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneKey)
                    .HasColumnName("zone_key")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.BattleFields)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<BlockedChildDoodads>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("blocked_child_doodads");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");
            });

            modelBuilder.Entity<BlockedTexts>(entity =>
            {
                entity.ToTable("blocked_texts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Bytes)
                    .HasColumnName("bytes")
                    .HasColumnType("int");

                entity.Property(e => e.CheckChat)
                    .HasColumnName("check_chat")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckName)
                    .HasColumnName("check_name")
                    .HasColumnType("bool");

                entity.Property(e => e.PartialMatch)
                    .HasColumnName("partial_match")
                    .HasColumnType("bool");

                entity.Property(e => e.Utf8str).HasColumnName("utf8str");
            });

            modelBuilder.Entity<BodyDiffuseMaps>(entity =>
            {
                entity.ToTable("body_diffuse_maps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Diffuse).HasColumnName("diffuse");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.BodyDiffuseMaps)
                    .HasForeignKey(d => d.ModelId);
            });

            modelBuilder.Entity<BodyNormalMaps>(entity =>
            {
                entity.ToTable("body_normal_maps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("int");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.IsNew)
                    .HasColumnName("is_new")
                    .HasColumnType("bool");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Normal).HasColumnName("normal");

                entity.Property(e => e.NpcOnly)
                    .HasColumnName("npc_only")
                    .HasColumnType("bool");

                entity.Property(e => e.Specular).HasColumnName("specular");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.BodyNormalMaps)
                    .HasForeignKey(d => d.ModelId);
            });

            modelBuilder.Entity<BookElems>(entity =>
            {
                entity.ToTable("book_elems");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BookId)
                    .HasColumnName("book_id")
                    .HasColumnType("int");

                entity.Property(e => e.BookPageId)
                    .HasColumnName("book_page_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.BookElems)
                    .HasForeignKey(d => d.BookId);

                entity.HasOne(d => d.BookPage)
                    .WithMany(p => p.BookElems)
                    .HasForeignKey(d => d.BookPageId);
            });

            modelBuilder.Entity<BookPageContents>(entity =>
            {
                entity.ToTable("book_page_contents");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BookPageId)
                    .HasColumnName("book_page_id")
                    .HasColumnType("int");

                entity.Property(e => e.Illust).HasColumnName("illust");

                entity.Property(e => e.Text).HasColumnName("text");

                entity.HasOne(d => d.BookPage)
                    .WithMany(p => p.BookPageContents)
                    .HasForeignKey(d => d.BookPageId);
            });

            modelBuilder.Entity<BookPages>(entity =>
            {
                entity.ToTable("book_pages");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<Books>(entity =>
            {
                entity.ToTable("books");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<BubbleChats>(entity =>
            {
                entity.ToTable("bubble_chats");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Angle)
                    .HasColumnName("angle")
                    .HasColumnType("int");

                entity.Property(e => e.BubbleId)
                    .HasColumnName("bubble_id")
                    .HasColumnType("int");

                entity.Property(e => e.CameraId)
                    .HasColumnName("camera_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChangeSpeakerName).HasColumnName("change_speaker_name");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.Facial).HasColumnName("facial");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Next)
                    .HasColumnName("next")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcSpawnerId)
                    .HasColumnName("npc_spawner_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.Speech).HasColumnName("speech");

                entity.Property(e => e.Start)
                    .HasColumnName("start")
                    .HasColumnType("bool");

                entity.Property(e => e.VoiceId)
                    .HasColumnName("voice_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Bubble)
                    .WithMany(p => p.BubbleChats)
                    .HasForeignKey(d => d.BubbleId);

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.BubbleChats)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.BubbleChats)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<BubbleEffects>(entity =>
            {
                entity.ToTable("bubble_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Speech).HasColumnName("speech");
            });

            modelBuilder.Entity<Bubbles>(entity =>
            {
                entity.ToTable("bubbles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<BuffEffects>(entity =>
            {
                entity.ToTable("buff_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbLevel)
                    .HasColumnName("ab_level")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.Chance)
                    .HasColumnName("chance")
                    .HasColumnType("int");

                entity.Property(e => e.Stack)
                    .HasColumnName("stack")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffEffects)
                    .HasForeignKey(d => d.BuffId);
            });

            
            modelBuilder.Entity<BuffModifiers>(entity =>
            {
                entity.HasKey(o => new { o.BuffId, o.TagId });

                entity.ToTable("buff_modifiers");

                entity.Property(e => e.BuffAttributeId)
                    .HasColumnName("buff_attribute_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.Synergy)
                    .HasColumnName("synergy")
                    .HasColumnType("bool");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnitModifierTypeId)
                    .HasColumnName("unit_modifier_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffModifiers)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.BuffModifiers)
                    .HasForeignKey(d => d.TagId);
            });
            
            modelBuilder.Entity<BuffMountSkills>(entity =>
            {
                entity.HasKey(o => new { o.BuffId, o.MountSkillId });

                entity.ToTable("buff_mount_skills");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.MountSkillId)
                    .HasColumnName("mount_skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffMountSkills)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.MountSkill)
                    .WithMany(p => p.BuffMountSkills)
                    .HasForeignKey(d => d.MountSkillId);
            });
            
            modelBuilder.Entity<BuffPassiveBuffs>(entity =>
            {
                entity.ToTable("buff_passive_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.PassiveBuffId)
                    .HasColumnName("passive_buff_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffPassiveBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.PassiveBuff)
                    .WithMany(p => p.BuffPassiveBuffs)
                    .HasForeignKey(d => d.PassiveBuffId);
            });
            
            modelBuilder.Entity<BuffSkills>(entity =>
            {
                entity.HasKey(o => new { o.BuffId, o.SkillId });

                entity.ToTable("buff_skills");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffSkills)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.BuffSkills)
                    .HasForeignKey(d => d.SkillId);
            });
            
            modelBuilder.Entity<BuffSwapSkills>(entity =>
            {
                entity.ToTable("buff_swap_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.NewSkillId)
                    .HasColumnName("new_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.OriginSkillId)
                    .HasColumnName("origin_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffSwapSkills)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<BuffTickEffects>(entity =>
            {
                entity.ToTable("buff_tick_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.CheckNoTargetTagSrc)
                    .HasColumnName("check_no_target_tag_src")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckTargetTagSrc)
                    .HasColumnName("check_target_tag_src")
                    .HasColumnType("bool");

                entity.Property(e => e.EffectId)
                    .HasColumnName("effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetBuffTagId)
                    .HasColumnName("target_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetNobuffTagId)
                    .HasColumnName("target_nobuff_tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffTickEffects)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Effect)
                    .WithMany(p => p.BuffTickEffects)
                    .HasForeignKey(d => d.EffectId);
            });

            modelBuilder.Entity<BuffTriggers>(entity =>
            {
                entity.ToTable("buff_triggers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.CheckNoTagSrcInOwner)
                    .HasColumnName("check_no_tag_src_in_owner")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckNoTagSrcInSource)
                    .HasColumnName("check_no_tag_src_in_source")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckNoTagSrcInTarget)
                    .HasColumnName("check_no_tag_src_in_target")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckTagSrcInOwner)
                    .HasColumnName("check_tag_src_in_owner")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckTagSrcInSource)
                    .HasColumnName("check_tag_src_in_source")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckTagSrcInTarget)
                    .HasColumnName("check_tag_src_in_target")
                    .HasColumnType("bool");

                entity.Property(e => e.DelayTime)
                    .HasColumnName("delay_time")
                    .HasColumnType("int");

                entity.Property(e => e.EffectId)
                    .HasColumnName("effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.EventId)
                    .HasColumnName("event_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerBuffTagId)
                    .HasColumnName("owner_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerNoBuffTagId)
                    .HasColumnName("owner_no_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.SourceAgentId)
                    .HasColumnName("source_agent_id")
                    .HasColumnType("int");

                entity.Property(e => e.SourceBuffTagId)
                    .HasColumnName("source_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.SourceNoBuffTagId)
                    .HasColumnName("source_no_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetAgentId)
                    .HasColumnName("target_agent_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetBuffTagId)
                    .HasColumnName("target_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetNoBuffTagId)
                    .HasColumnName("target_no_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseCollisionImpact)
                    .HasColumnName("use_collision_impact")
                    .HasColumnType("bool");

                entity.Property(e => e.UseDamageAmount)
                    .HasColumnName("use_damage_amount")
                    .HasColumnType("bool");

                entity.Property(e => e.UseStackCount)
                    .HasColumnName("use_stack_count")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffTriggers)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Effect)
                    .WithMany(p => p.BuffTriggers)
                    .HasForeignKey(d => d.EffectId);
            });

            modelBuilder.Entity<BuffUnitModifiers>(entity =>
            {
                entity.ToTable("buff_unit_modifiers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.BuffUnitModifiers)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.BuffUnitModifiers)
                    .HasForeignKey(d => d.TagId);
            });

            modelBuilder.Entity<BuffVisualChanges>(entity =>
            {
                entity.ToTable("buff_visual_changes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ApplyActualId)
                    .HasColumnName("apply_actual_id")
                    .HasColumnType("int");

                entity.Property(e => e.ApplyTypeId)
                    .HasColumnName("apply_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffTagId)
                    .HasColumnName("buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");

                entity.Property(e => e.VisualActualId)
                    .HasColumnName("visual_actual_id")
                    .HasColumnType("int");

                entity.Property(e => e.VisualTypeId)
                    .HasColumnName("visual_type_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Buffs>(entity =>
            {
                entity.ToTable("buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActiveWeaponId)
                    .HasColumnName("active_weapon_id")
                    .HasColumnType("int");

                entity.Property(e => e.AddDurationBuffId)
                    .HasColumnName("add_duration_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.AddDurationBuffMul)
                    .HasColumnName("add_duration_buff_mul")
                    .HasColumnType("int");

                entity.Property(e => e.AgStance).HasColumnName("ag_stance");

                entity.Property(e => e.AnimActionId)
                    .HasColumnName("anim_action_id")
                    .HasColumnType("int");

                entity.Property(e => e.AnimEndId)
                    .HasColumnName("anim_end_id")
                    .HasColumnType("int");

                entity.Property(e => e.AnimStartId)
                    .HasColumnName("anim_start_id")
                    .HasColumnType("int");

                entity.Property(e => e.AntiStealth)
                    .HasColumnName("anti_stealth")
                    .HasColumnType("bool");

                entity.Property(e => e.AuraChildOnly)
                    .HasColumnName("aura_child_only")
                    .HasColumnType("bool");

                entity.Property(e => e.AuraCreatorOnly)
                    .HasColumnName("aura_creator_only")
                    .HasColumnType("bool");

                entity.Property(e => e.AuraRadius)
                    .HasColumnName("aura_radius")
                    .HasColumnType("int");

                entity.Property(e => e.AuraRelationId)
                    .HasColumnName("aura_relation_id")
                    .HasColumnType("int");

                entity.Property(e => e.AuraSlaveBuffId)
                    .HasColumnName("aura_slave_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.BalanceLevel)
                    .HasColumnName("balance_level")
                    .HasColumnType("int");

                entity.Property(e => e.BlankMinded)
                    .HasColumnName("blank_minded")
                    .HasColumnType("bool");

                entity.Property(e => e.BossTelescopeRange).HasColumnName("boss_telescope_range");

                entity.Property(e => e.CannotJump)
                    .HasColumnName("cannot_jump")
                    .HasColumnType("bool");

                entity.Property(e => e.CombatTextEnd)
                    .HasColumnName("combat_text_end")
                    .HasColumnType("bool");

                entity.Property(e => e.CombatTextStart)
                    .HasColumnName("combat_text_start")
                    .HasColumnType("bool");

                entity.Property(e => e.ConditionalTick)
                    .HasColumnName("conditional_tick")
                    .HasColumnType("bool");

                entity.Property(e => e.CooldownSkillId)
                    .HasColumnName("cooldown_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.CooldownSkillTime)
                    .HasColumnName("cooldown_skill_time")
                    .HasColumnType("int");

                entity.Property(e => e.Crippled)
                    .HasColumnName("crippled")
                    .HasColumnType("bool");

                entity.Property(e => e.CrowdBuffId)
                    .HasColumnName("crowd_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.CrowdFriendly)
                    .HasColumnName("crowd_friendly")
                    .HasColumnType("bool");

                entity.Property(e => e.CrowdHostile)
                    .HasColumnName("crowd_hostile")
                    .HasColumnType("bool");

                entity.Property(e => e.CrowdNumber)
                    .HasColumnName("crowd_number")
                    .HasColumnType("int");

                entity.Property(e => e.CrowdRadius).HasColumnName("crowd_radius");

                entity.Property(e => e.CustomDualMaterialFadeTime).HasColumnName("custom_dual_material_fade_time");

                entity.Property(e => e.CustomDualMaterialId)
                    .HasColumnName("custom_dual_material_id")
                    .HasColumnType("int");

                entity.Property(e => e.DamageAbsorptionPerHit)
                    .HasColumnName("damage_absorption_per_hit")
                    .HasColumnType("int");

                entity.Property(e => e.DamageAbsorptionTypeId)
                    .HasColumnName("damage_absorption_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.DeadApplicable)
                    .HasColumnName("dead_applicable")
                    .HasColumnType("bool");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.DetectStealth)
                    .HasColumnName("detect_stealth")
                    .HasColumnType("bool");

                entity.Property(e => e.DisarmamentMainHand)
                    .HasColumnName("disarmament_main_hand")
                    .HasColumnType("bool");

                entity.Property(e => e.DisarmamentMusical)
                    .HasColumnName("disarmament_musical")
                    .HasColumnType("bool");

                entity.Property(e => e.DisarmamentOffHand)
                    .HasColumnName("disarmament_off_hand")
                    .HasColumnType("bool");

                entity.Property(e => e.DisarmamentRanged)
                    .HasColumnName("disarmament_ranged")
                    .HasColumnType("bool");

                entity.Property(e => e.DoNotRemoveByOtherSkillController)
                    .HasColumnName("do_not_remove_by_other_skill_controller")
                    .HasColumnType("bool");

                entity.Property(e => e.Duration)
                    .HasColumnName("duration")
                    .HasColumnType("int");

                entity.Property(e => e.EvadeTelescope)
                    .HasColumnName("evade_telescope")
                    .HasColumnType("bool");

                entity.Property(e => e.Exempt)
                    .HasColumnName("exempt")
                    .HasColumnType("bool");

                entity.Property(e => e.ExtraEffects).HasColumnName("extra_effects");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.FallDamageImmortality)
                    .HasColumnName("fall_damage_immortality")
                    .HasColumnType("bool");

                entity.Property(e => e.FallDamageImmune)
                    .HasColumnName("fall_damage_immune")
                    .HasColumnType("bool");

                entity.Property(e => e.Fastened)
                    .HasColumnName("fastened")
                    .HasColumnType("bool");

                entity.Property(e => e.FindSchoolOfFishRange).HasColumnName("find_school_of_fish_range");

                entity.Property(e => e.FixAbilityLevelToOne)
                    .HasColumnName("fix_ability_level_to_one")
                    .HasColumnType("bool");

                entity.Property(e => e.Framehold)
                    .HasColumnName("framehold")
                    .HasColumnType("bool");

                entity.Property(e => e.FreezeShip)
                    .HasColumnName("freeze_ship")
                    .HasColumnType("bool");

                entity.Property(e => e.FxGroupId)
                    .HasColumnName("fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Gliding)
                    .HasColumnName("gliding")
                    .HasColumnType("bool");

                entity.Property(e => e.GlidingFallSpeedFast).HasColumnName("gliding_fall_speed_fast");

                entity.Property(e => e.GlidingFallSpeedNormal).HasColumnName("gliding_fall_speed_normal");

                entity.Property(e => e.GlidingFallSpeedSlow).HasColumnName("gliding_fall_speed_slow");

                entity.Property(e => e.GlidingLandHeight).HasColumnName("gliding_land_height");

                entity.Property(e => e.GlidingLiftCount)
                    .HasColumnName("gliding_lift_count")
                    .HasColumnType("int");

                entity.Property(e => e.GlidingLiftDuration).HasColumnName("gliding_lift_duration");

                entity.Property(e => e.GlidingLiftHeight).HasColumnName("gliding_lift_height");

                entity.Property(e => e.GlidingLiftSpeed).HasColumnName("gliding_lift_speed");

                entity.Property(e => e.GlidingLiftValidTime).HasColumnName("gliding_lift_valid_time");

                entity.Property(e => e.GlidingMoveSpeedFast).HasColumnName("gliding_move_speed_fast");

                entity.Property(e => e.GlidingMoveSpeedNormal).HasColumnName("gliding_move_speed_normal");

                entity.Property(e => e.GlidingMoveSpeedSlow).HasColumnName("gliding_move_speed_slow");

                entity.Property(e => e.GlidingRotateSpeed)
                    .HasColumnName("gliding_rotate_speed")
                    .HasColumnType("int");

                entity.Property(e => e.GlidingSlidingTime).HasColumnName("gliding_sliding_time");

                entity.Property(e => e.GlidingSmoothTime).HasColumnName("gliding_smooth_time");

                entity.Property(e => e.GlidingStartupSpeed).HasColumnName("gliding_startup_speed");

                entity.Property(e => e.GlidingStartupTime).HasColumnName("gliding_startup_time");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.GroupRank)
                    .HasColumnName("group_rank")
                    .HasColumnType("int");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.IdleAnim).HasColumnName("idle_anim");

                entity.Property(e => e.ImmuneDamage)
                    .HasColumnName("immune_damage")
                    .HasColumnType("int");

                entity.Property(e => e.ImmuneExceptCreator)
                    .HasColumnName("immune_except_creator")
                    .HasColumnType("bool");

                entity.Property(e => e.ImmuneExceptCreatorRelationCheck)
                    .HasColumnName("immune_except_creator_relation_check")
                    .HasColumnType("bool");

                entity.Property(e => e.ImmuneExceptCreatorRelationId)
                    .HasColumnName("immune_except_creator_relation_id")
                    .HasColumnType("int");

                entity.Property(e => e.ImmuneExceptSkillTagId)
                    .HasColumnName("immune_except_skill_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.ImmuneHealth).HasColumnName("immune_health");

                entity.Property(e => e.ImpossibleChangeTargeting)
                    .HasColumnName("impossible_change_targeting")
                    .HasColumnType("bool");

                entity.Property(e => e.ImpossibleTargeting)
                    .HasColumnName("impossible_targeting")
                    .HasColumnType("bool");

                entity.Property(e => e.InitMaxCharge)
                    .HasColumnName("init_max_charge")
                    .HasColumnType("int");

                entity.Property(e => e.InitMinCharge)
                    .HasColumnName("init_min_charge")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.KnockDown)
                    .HasColumnName("knock_down")
                    .HasColumnType("bool");

                entity.Property(e => e.KnockbackImmune)
                    .HasColumnName("knockback_immune")
                    .HasColumnType("bool");

                entity.Property(e => e.LevelDuration)
                    .HasColumnName("level_duration")
                    .HasColumnType("int");

                entity.Property(e => e.LinkBuffId)
                    .HasColumnName("link_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.MainhandToolId)
                    .HasColumnName("mainhand_tool_id")
                    .HasColumnType("int");

                entity.Property(e => e.ManaBurnImmune)
                    .HasColumnName("mana_burn_immune")
                    .HasColumnType("bool");

                entity.Property(e => e.ManaShieldRatio)
                    .HasColumnName("mana_shield_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.MaxCharge)
                    .HasColumnName("max_charge")
                    .HasColumnType("int");

                entity.Property(e => e.MaxHighAbilityResource)
                    .HasColumnName("max_high_ability_resource")
                    .HasColumnType("int");

                entity.Property(e => e.MaxLifeTime)
                    .HasColumnName("max_life_time")
                    .HasColumnType("int");

                entity.Property(e => e.MaxStack)
                    .HasColumnName("max_stack")
                    .HasColumnType("int");

                entity.Property(e => e.MeleeImmortality)
                    .HasColumnName("melee_immortality")
                    .HasColumnType("bool");

                entity.Property(e => e.MeleeImmune)
                    .HasColumnName("melee_immune")
                    .HasColumnType("bool");

                entity.Property(e => e.MinHighAbilityResource)
                    .HasColumnName("min_high_ability_resource")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NoCollide)
                    .HasColumnName("no_collide")
                    .HasColumnType("bool");

                entity.Property(e => e.NoCollideRigid)
                    .HasColumnName("no_collide_rigid")
                    .HasColumnType("bool");

                entity.Property(e => e.NoExpPenalty)
                    .HasColumnName("no_exp_penalty")
                    .HasColumnType("bool");

                entity.Property(e => e.NonPushable)
                    .HasColumnName("non_pushable")
                    .HasColumnType("bool");

                entity.Property(e => e.NotToSlaveRider)
                    .HasColumnName("not_to_slave_rider")
                    .HasColumnType("bool");

                entity.Property(e => e.OffPassive)
                    .HasColumnName("off_passive")
                    .HasColumnType("bool");

                entity.Property(e => e.OffPassiveExectionTagId)
                    .HasColumnName("off_passive_exection_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffhandToolId)
                    .HasColumnName("offhand_tool_id")
                    .HasColumnType("int");

                entity.Property(e => e.OneTime)
                    .HasColumnName("one_time")
                    .HasColumnType("bool");

                entity.Property(e => e.OneTimeImmortality)
                    .HasColumnName("one_time_immortality")
                    .HasColumnType("bool");

                entity.Property(e => e.OnlyMyPet)
                    .HasColumnName("only_my_pet")
                    .HasColumnType("bool");

                entity.Property(e => e.OnlyPetOwner)
                    .HasColumnName("only_pet_owner")
                    .HasColumnType("bool");

                entity.Property(e => e.OwnerOnly)
                    .HasColumnName("owner_only")
                    .HasColumnType("bool");

                entity.Property(e => e.Pacifist)
                    .HasColumnName("pacifist")
                    .HasColumnType("bool");

                entity.Property(e => e.PerUnitCreation)
                    .HasColumnName("per_unit_creation")
                    .HasColumnType("bool");

                entity.Property(e => e.PercussionInstrumentStartAnimId)
                    .HasColumnName("percussion_instrument_start_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.PercussionInstrumentTickAnimId)
                    .HasColumnName("percussion_instrument_tick_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.Psychokinesis)
                    .HasColumnName("psychokinesis")
                    .HasColumnType("bool");

                entity.Property(e => e.PsychokinesisSpeed).HasColumnName("psychokinesis_speed");

                entity.Property(e => e.Ragdoll)
                    .HasColumnName("ragdoll")
                    .HasColumnType("bool");

                entity.Property(e => e.RangedImmortality)
                    .HasColumnName("ranged_immortality")
                    .HasColumnType("bool");

                entity.Property(e => e.RangedImmune)
                    .HasColumnName("ranged_immune")
                    .HasColumnType("bool");

                entity.Property(e => e.RealTime)
                    .HasColumnName("real_time")
                    .HasColumnType("bool");

                entity.Property(e => e.ReflectionChance)
                    .HasColumnName("reflection_chance")
                    .HasColumnType("int");

                entity.Property(e => e.ReflectionRatio)
                    .HasColumnName("reflection_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.ReflectionTargetRatio)
                    .HasColumnName("reflection_target_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.ReflectionTypeId)
                    .HasColumnName("reflection_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.RemoveOnAttackBuffTrigger)
                    .HasColumnName("remove_on_attack_buff_trigger")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnAttackEtc)
                    .HasColumnName("remove_on_attack_etc")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnAttackEtcDot)
                    .HasColumnName("remove_on_attack_etc_dot")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnAttackSpellDot)
                    .HasColumnName("remove_on_attack_spell_dot")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnAttackedBuffTrigger)
                    .HasColumnName("remove_on_attacked_buff_trigger")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnAttackedEtc)
                    .HasColumnName("remove_on_attacked_etc")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnAttackedEtcDot)
                    .HasColumnName("remove_on_attacked_etc_dot")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnAttackedSpellDot)
                    .HasColumnName("remove_on_attacked_spell_dot")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnAutoattack)
                    .HasColumnName("remove_on_autoattack")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDamageBuffTrigger)
                    .HasColumnName("remove_on_damage_buff_trigger")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDamageEtc)
                    .HasColumnName("remove_on_damage_etc")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDamageEtcDot)
                    .HasColumnName("remove_on_damage_etc_dot")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDamageSpellDot)
                    .HasColumnName("remove_on_damage_spell_dot")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDamagedBuffTrigger)
                    .HasColumnName("remove_on_damaged_buff_trigger")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDamagedEtc)
                    .HasColumnName("remove_on_damaged_etc")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDamagedEtcDot)
                    .HasColumnName("remove_on_damaged_etc_dot")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDamagedSpellDot)
                    .HasColumnName("remove_on_damaged_spell_dot")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnDeath)
                    .HasColumnName("remove_on_death")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnExempt)
                    .HasColumnName("remove_on_exempt")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnInteraction)
                    .HasColumnName("remove_on_interaction")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnLand)
                    .HasColumnName("remove_on_land")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnMount)
                    .HasColumnName("remove_on_mount")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnMove)
                    .HasColumnName("remove_on_move")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnSourceDead)
                    .HasColumnName("remove_on_source_dead")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnStartSkill)
                    .HasColumnName("remove_on_start_skill")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnUnbond)
                    .HasColumnName("remove_on_unbond")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnUnmount)
                    .HasColumnName("remove_on_unmount")
                    .HasColumnType("bool");

                entity.Property(e => e.RemoveOnUnmountAttachPointId)
                    .HasColumnName("remove_on_unmount_attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.RemoveOnUseSkill)
                    .HasColumnName("remove_on_use_skill")
                    .HasColumnType("bool");

                entity.Property(e => e.RequireBuffId)
                    .HasColumnName("require_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.RestrictActionbar)
                    .HasColumnName("restrict_actionbar")
                    .HasColumnType("bool");

                entity.Property(e => e.ResurrectionHealth)
                    .HasColumnName("resurrection_health")
                    .HasColumnType("int");

                entity.Property(e => e.ResurrectionMana)
                    .HasColumnName("resurrection_mana")
                    .HasColumnType("int");

                entity.Property(e => e.ResurrectionPercent)
                    .HasColumnName("resurrection_percent")
                    .HasColumnType("bool");

                entity.Property(e => e.Root)
                    .HasColumnName("root")
                    .HasColumnType("bool");

                entity.Property(e => e.SaveRuleId)
                    .HasColumnName("save_rule_id")
                    .HasColumnType("int");

                entity.Property(e => e.Scale).HasColumnName("scale");

                entity.Property(e => e.ScaleDuration).HasColumnName("scaleDuration");

                entity.Property(e => e.SiegeImmortality)
                    .HasColumnName("siege_immortality")
                    .HasColumnType("bool");

                entity.Property(e => e.SiegeImmune)
                    .HasColumnName("siege_immune")
                    .HasColumnType("bool");

                entity.Property(e => e.Silence)
                    .HasColumnName("silence")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillControllerId)
                    .HasColumnName("skill_controller_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveApplicable)
                    .HasColumnName("slave_applicable")
                    .HasColumnType("bool");

                entity.Property(e => e.Sleep)
                    .HasColumnName("sleep")
                    .HasColumnType("bool");

                entity.Property(e => e.SpellImmortality)
                    .HasColumnName("spell_immortality")
                    .HasColumnType("bool");

                entity.Property(e => e.SpellImmune)
                    .HasColumnName("spell_immune")
                    .HasColumnType("bool");

                entity.Property(e => e.SprintMotion)
                    .HasColumnName("sprint_motion")
                    .HasColumnType("bool");

                entity.Property(e => e.StackRuleId)
                    .HasColumnName("stack_rule_id")
                    .HasColumnType("int");

                entity.Property(e => e.Stealth)
                    .HasColumnName("stealth")
                    .HasColumnType("bool");

                entity.Property(e => e.StopOnlineLpRegen)
                    .HasColumnName("stop_online_lp_regen")
                    .HasColumnType("bool");

                entity.Property(e => e.StringInstrumentStartAnimId)
                    .HasColumnName("string_instrument_start_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.StringInstrumentTickAnimId)
                    .HasColumnName("string_instrument_tick_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.Stun)
                    .HasColumnName("stun")
                    .HasColumnType("bool");

                entity.Property(e => e.System)
                    .HasColumnName("system")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetingRelationId)
                    .HasColumnName("targeting_relation_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetingUseOriginSource)
                    .HasColumnName("targeting_use_origin_source")
                    .HasColumnType("bool");

                entity.Property(e => e.Taunt)
                    .HasColumnName("taunt")
                    .HasColumnType("bool");

                entity.Property(e => e.TauntWithTopAggro)
                    .HasColumnName("taunt_with_top_aggro")
                    .HasColumnType("bool");

                entity.Property(e => e.TelescopeRange).HasColumnName("telescope_range");

                entity.Property(e => e.Tick)
                    .HasColumnName("tick")
                    .HasColumnType("int");

                entity.Property(e => e.TickActiveWeaponId)
                    .HasColumnName("tick_active_weapon_id")
                    .HasColumnType("int");

                entity.Property(e => e.TickAnimId)
                    .HasColumnName("tick_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.TickAreaAngle)
                    .HasColumnName("tick_area_angle")
                    .HasColumnType("int");

                entity.Property(e => e.TickAreaExcludeSource)
                    .HasColumnName("tick_area_exclude_source")
                    .HasColumnType("bool");

                entity.Property(e => e.TickAreaFrontAngle)
                    .HasColumnName("tick_area_front_angle")
                    .HasColumnType("int");

                entity.Property(e => e.TickAreaRadius).HasColumnName("tick_area_radius");

                entity.Property(e => e.TickAreaRelationId)
                    .HasColumnName("tick_area_relation_id")
                    .HasColumnType("int");

                entity.Property(e => e.TickAreaUseOriginSource)
                    .HasColumnName("tick_area_use_origin_source")
                    .HasColumnType("bool");

                entity.Property(e => e.TickLevelManaCost).HasColumnName("tick_level_mana_cost");

                entity.Property(e => e.TickMainhandToolId)
                    .HasColumnName("tick_mainhand_tool_id")
                    .HasColumnType("int");

                entity.Property(e => e.TickManaCost)
                    .HasColumnName("tick_mana_cost")
                    .HasColumnType("int");

                entity.Property(e => e.TickOffhandToolId)
                    .HasColumnName("tick_offhand_tool_id")
                    .HasColumnType("int");

                entity.Property(e => e.TransferTelescopeRange).HasColumnName("transfer_telescope_range");

                entity.Property(e => e.TransformBuffId)
                    .HasColumnName("transform_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.TubeInstrumentStartAnimId)
                    .HasColumnName("tube_instrument_start_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.TubeInstrumentTickAnimId)
                    .HasColumnName("tube_instrument_tick_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseSourceFaction)
                    .HasColumnName("use_source_faction")
                    .HasColumnType("bool");

                entity.Property(e => e.WalkOnly)
                    .HasColumnName("walk_only")
                    .HasColumnType("bool");

                entity.HasOne(d => d.AnimAction)
                    .WithMany(p => p.Buffs)
                    .HasForeignKey(d => d.AnimActionId);

                entity.HasOne(d => d.CustomDualMaterial)
                    .WithMany(p => p.Buffs)
                    .HasForeignKey(d => d.CustomDualMaterialId);

                entity.HasOne(d => d.FxGroup)
                    .WithMany(p => p.Buffs)
                    .HasForeignKey(d => d.FxGroupId);

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.Buffs)
                    .HasForeignKey(d => d.IconId);

                entity.HasOne(d => d.SkillController)
                    .WithMany(p => p.Buffs)
                    .HasForeignKey(d => d.SkillControllerId);
            });
            
            modelBuilder.Entity<ChangeEquipmentBuffs>(entity =>
            {
                entity.HasKey(o => new { o.BuffId });

                entity.ToTable("change_equipment_buffs");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.ChangeEquipmentBuffs)
                    .HasForeignKey(d => d.BuffId);
            });
            
            modelBuilder.Entity<CharRecords>(entity =>
            {
                entity.ToTable("char_records");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value1)
                    .HasColumnName("value1")
                    .HasColumnType("int");

                entity.Property(e => e.Value2)
                    .HasColumnName("value2")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<CharacterBuffs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("character_buffs");

                entity.Property(e => e.BuffId).HasColumnName("buff_id");

                entity.Property(e => e.CharacterId).HasColumnName("character_id");
            });

            modelBuilder.Entity<CharacterCustomizingHairAssets>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("character_customizing_hair_assets");

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("INT");

                entity.Property(e => e.HairId)
                    .HasColumnName("hair_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.IsHot)
                    .HasColumnName("is_hot")
                    .HasColumnType("NUM");

                entity.Property(e => e.IsNew)
                    .HasColumnName("is_new")
                    .HasColumnType("NUM");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("INT");
            });
            
            modelBuilder.Entity<CharacterDefaultSkills>(entity =>
            {
                entity.HasKey(o => new { o.CharacterId, o.DefaultSkillId });

                entity.ToTable("character_default_skills");

                entity.Property(e => e.CharacterId)
                    .HasColumnName("character_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultSkillId)
                    .HasColumnName("default_skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Character)
                    .WithMany(p => p.CharacterDefaultSkills)
                    .HasForeignKey(d => d.CharacterId);

                entity.HasOne(d => d.DefaultSkill)
                    .WithMany(p => p.CharacterDefaultSkills)
                    .HasForeignKey(d => d.DefaultSkillId);
            });
            
            modelBuilder.Entity<CharacterEquipPacks>(entity =>
            {
                entity.ToTable("character_equip_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbilityId)
                    .HasColumnName("ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.NewbieClothPackId)
                    .HasColumnName("newbie_cloth_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.NewbieWeaponPackId)
                    .HasColumnName("newbie_weapon_pack_id")
                    .HasColumnType("int");
                    
                entity.HasOne(d => d.NewbieClothPack)
                    .WithMany(p => p.CharacterEquipPacks)
                    .HasForeignKey(d => d.NewbieClothPackId);
                
                entity.HasOne(d => d.NewbieWeaponPack)
                    .WithMany(p => p.CharacterEquipPacks)
                    .HasForeignKey(d => d.NewbieWeaponPackId);
            });

            modelBuilder.Entity<CharacterIdleBuffs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("character_idle_buffs");

                entity.Property(e => e.BuffId).HasColumnName("buff_id");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<CharacterPStatLimits>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("character_p_stat_limits");

                entity.Property(e => e.Max)
                    .HasColumnName("max")
                    .HasColumnType("int");

                entity.Property(e => e.Min)
                    .HasColumnName("min")
                    .HasColumnType("int");

                entity.Property(e => e.PStatId)
                    .HasColumnName("p_stat_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<CharacterPreviewCloths>(entity =>
            {
                entity.ToTable("character_preview_cloths");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CharacterId)
                    .HasColumnName("character_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipPackClothId)
                    .HasColumnName("equip_pack_cloth_id")
                    .HasColumnType("int");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.UiOrder)
                    .HasColumnName("ui_order")
                    .HasColumnType("int");

                entity.HasOne(d => d.Character)
                    .WithMany(p => p.CharacterPreviewCloths)
                    .HasForeignKey(d => d.CharacterId);

                entity.HasOne(d => d.EquipPackCloth)
                    .WithMany(p => p.CharacterPreviewCloths)
                    .HasForeignKey(d => d.EquipPackClothId);

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.CharacterPreviewCloths)
                    .HasForeignKey(d => d.IconId);
            });

            modelBuilder.Entity<CharacterSupplies>(entity =>
            {
                entity.ToTable("character_supplies");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbilityId)
                    .HasColumnName("ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.CharacterSupplies)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<Characters>(entity =>
            {
                entity.ToTable("characters");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CharGenderId)
                    .HasColumnName("char_gender_id")
                    .HasColumnType("int");

                entity.Property(e => e.CharRaceId)
                    .HasColumnName("char_race_id")
                    .HasColumnType("int");

                entity.Property(e => e.Creatable)
                    .HasColumnName("creatable")
                    .HasColumnType("bool");

                entity.Property(e => e.DefaultCustomId)
                    .HasColumnName("default_custom_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultFxVoiceSoundPackId)
                    .HasColumnName("default_fx_voice_sound_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultResurrectionDistrictId)
                    .HasColumnName("default_resurrection_district_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultReturnDistrictId)
                    .HasColumnName("default_return_district_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultSystemVoiceSoundPackId)
                    .HasColumnName("default_system_voice_sound_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceItemId)
                    .HasColumnName("face_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.FightPreviewClothPackId)
                    .HasColumnName("fight_preview_cloth_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.FightPreviewWeaponPackId)
                    .HasColumnName("fight_preview_weapon_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.LovePreviewClothPackId)
                    .HasColumnName("love_preview_cloth_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.LovePreviewWeaponPackId)
                    .HasColumnName("love_preview_weapon_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.MagicPreviewClothPackId)
                    .HasColumnName("magic_preview_cloth_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.MagicPreviewWeaponPackId)
                    .HasColumnName("magic_preview_weapon_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.PreviewClothPackId)
                    .HasColumnName("preview_cloth_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.StartingZoneId)
                    .HasColumnName("starting_zone_id")
                    .HasColumnType("int");

                entity.Property(e => e.WildPreviewClothPackId)
                    .HasColumnName("wild_preview_cloth_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.WildPreviewWeaponPackId)
                    .HasColumnName("wild_preview_weapon_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.Characters)
                    .HasForeignKey(d => d.ModelId);
            });

            modelBuilder.Entity<ChatCommands>(entity =>
            {
                entity.ToTable("chat_commands");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ChatTypeId)
                    .HasColumnName("chat_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Enable)
                    .HasColumnName("enable")
                    .HasColumnType("bool");

                entity.Property(e => e.MenuOrder)
                    .HasColumnName("menu_order")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NotifyChatDelay)
                    .HasColumnName("notify_chat_delay")
                    .HasColumnType("bool");

                entity.Property(e => e.SpendItemCount)
                    .HasColumnName("spend_item_count")
                    .HasColumnType("int");

                entity.Property(e => e.SpendItemId)
                    .HasColumnName("spend_item_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ChatSpamRuleDetails>(entity =>
            {
                entity.ToTable("chat_spam_rule_details");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ChatSpamRuleId)
                    .HasColumnName("chat_spam_rule_id")
                    .HasColumnType("int");

                entity.Property(e => e.DetectedCaseNextDetailId)
                    .HasColumnName("detected_case_next_detail_id")
                    .HasColumnType("int");

                entity.Property(e => e.EndNode)
                    .HasColumnName("end_node")
                    .HasColumnType("bool");

                entity.Property(e => e.NotDetectedCaseNextDetailId)
                    .HasColumnName("not_detected_case_next_detail_id")
                    .HasColumnType("int");

                entity.Property(e => e.StartNode)
                    .HasColumnName("start_node")
                    .HasColumnType("bool");

                entity.Property(e => e.Text).HasColumnName("text");

                entity.HasOne(d => d.ChatSpamRule)
                    .WithMany(p => p.ChatSpamRuleDetails)
                    .HasForeignKey(d => d.ChatSpamRuleId);
            });

            modelBuilder.Entity<ChatSpamRules>(entity =>
            {
                entity.ToTable("chat_spam_rules");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<CinemaCaptions>(entity =>
            {
                entity.ToTable("cinema_captions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Caption).HasColumnName("caption");

                entity.Property(e => e.CinemaId)
                    .HasColumnName("cinema_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Cinema)
                    .WithMany(p => p.CinemaCaptions)
                    .HasForeignKey(d => d.CinemaId);
            });

            modelBuilder.Entity<CinemaSubtitles>(entity =>
            {
                entity.ToTable("cinema_subtitles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Subtitle).HasColumnName("subtitle");
            });

            modelBuilder.Entity<Cinemas>(entity =>
            {
                entity.ToTable("cinemas");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Replay)
                    .HasColumnName("replay")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<CleanupUccEffects>(entity =>
            {
                entity.ToTable("cleanup_ucc_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<Climates>(entity =>
            {
                entity.ToTable("climates");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<CombatSounds>(entity =>
            {
                entity.ToTable("combat_sounds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FxGroupId)
                    .HasColumnName("fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.SourceSoundMaterialId)
                    .HasColumnName("source_sound_material_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetSoundMaterialId)
                    .HasColumnName("target_sound_material_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.FxGroup)
                    .WithMany(p => p.CombatSounds)
                    .HasForeignKey(d => d.FxGroupId);

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.CombatSounds)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<CommonFarms>(entity =>
            {
                entity.ToTable("common_farms");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comments).HasColumnName("comments");

                entity.Property(e => e.FarmGroupId)
                    .HasColumnName("farm_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.GuardTime)
                    .HasColumnName("guard_time")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.HasOne(d => d.FarmGroup)
                    .WithMany(p => p.CommonFarms)
                    .HasForeignKey(d => d.FarmGroupId);
            });

            modelBuilder.Entity<ConflictZoneNpcKills>(entity =>
            {
                entity.ToTable("conflict_zone_npc_kills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConflictZoneId)
                    .HasColumnName("conflict_zone_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.ConflictZoneNpcKills)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<ConflictZoneQuestCompletions>(entity =>
            {
                entity.ToTable("conflict_zone_quest_completions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConflictZoneId)
                    .HasColumnName("conflict_zone_id")
                    .HasColumnType("int");

                entity.Property(e => e.ContextId)
                    .HasColumnName("context_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ConflictZones>(entity =>
            {
                entity.HasKey(o => new { o.ZoneGroupId });

                entity.ToTable("conflict_zones");

                entity.Property(e => e.AutoTeam)
                    .HasColumnName("auto_team")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoTeamDismiss)
                    .HasColumnName("auto_team_dismiss")
                    .HasColumnType("bool");

                entity.Property(e => e.Closed)
                    .HasColumnName("closed")
                    .HasColumnType("bool");

                entity.Property(e => e.ConflictMin)
                    .HasColumnName("conflict_min")
                    .HasColumnType("int");

                entity.Property(e => e.HariharaReturnPointId)
                    .HasColumnName("harihara_return_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.NationReturnPointId)
                    .HasColumnName("nation_return_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.NoKillMin0)
                    .HasColumnName("no_kill_min_0")
                    .HasColumnType("int");

                entity.Property(e => e.NoKillMin1)
                    .HasColumnName("no_kill_min_1")
                    .HasColumnType("int");

                entity.Property(e => e.NoKillMin2)
                    .HasColumnName("no_kill_min_2")
                    .HasColumnType("int");

                entity.Property(e => e.NoKillMin3)
                    .HasColumnName("no_kill_min_3")
                    .HasColumnType("int");

                entity.Property(e => e.NoKillMin4)
                    .HasColumnName("no_kill_min_4")
                    .HasColumnType("int");

                entity.Property(e => e.NuiaReturnPointId)
                    .HasColumnName("nuia_return_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.NumKills0)
                    .HasColumnName("num_kills_0")
                    .HasColumnType("int");

                entity.Property(e => e.NumKills1)
                    .HasColumnName("num_kills_1")
                    .HasColumnType("int");

                entity.Property(e => e.NumKills2)
                    .HasColumnName("num_kills_2")
                    .HasColumnType("int");

                entity.Property(e => e.NumKills3)
                    .HasColumnName("num_kills_3")
                    .HasColumnType("int");

                entity.Property(e => e.NumKills4)
                    .HasColumnName("num_kills_4")
                    .HasColumnType("int");

                entity.Property(e => e.NumNpcKills0)
                    .HasColumnName("num_npc_kills_0")
                    .HasColumnType("int");

                entity.Property(e => e.NumNpcKills1)
                    .HasColumnName("num_npc_kills_1")
                    .HasColumnType("int");

                entity.Property(e => e.NumNpcKills2)
                    .HasColumnName("num_npc_kills_2")
                    .HasColumnType("int");

                entity.Property(e => e.NumNpcKills3)
                    .HasColumnName("num_npc_kills_3")
                    .HasColumnType("int");

                entity.Property(e => e.NumNpcKills4)
                    .HasColumnName("num_npc_kills_4")
                    .HasColumnType("int");

                entity.Property(e => e.NumQuestCompletions0)
                    .HasColumnName("num_quest_completions_0")
                    .HasColumnType("int");

                entity.Property(e => e.NumQuestCompletions1)
                    .HasColumnName("num_quest_completions_1")
                    .HasColumnType("int");

                entity.Property(e => e.NumQuestCompletions2)
                    .HasColumnName("num_quest_completions_2")
                    .HasColumnType("int");

                entity.Property(e => e.NumQuestCompletions3)
                    .HasColumnName("num_quest_completions_3")
                    .HasColumnType("int");

                entity.Property(e => e.NumQuestCompletions4)
                    .HasColumnName("num_quest_completions_4")
                    .HasColumnType("int");

                entity.Property(e => e.PeaceDropMul).HasColumnName("peace_drop_mul");

                entity.Property(e => e.PeaceGoldMul).HasColumnName("peace_gold_mul");

                entity.Property(e => e.PeaceMin)
                    .HasColumnName("peace_min")
                    .HasColumnType("int");

                entity.Property(e => e.PeaceProtectedFactionId)
                    .HasColumnName("peace_protected_faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.PeaceTowerDefId)
                    .HasColumnName("peace_tower_def_id")
                    .HasColumnType("int");

                entity.Property(e => e.PirateReturnPointId)
                    .HasColumnName("pirate_return_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.WarChaos)
                    .HasColumnName("war_chaos")
                    .HasColumnType("bool");

                entity.Property(e => e.WarDropMul).HasColumnName("war_drop_mul");

                entity.Property(e => e.WarGoldMul).HasColumnName("war_gold_mul");

                entity.Property(e => e.WarMin)
                    .HasColumnName("war_min")
                    .HasColumnType("int");

                entity.Property(e => e.WarStHour0)
                    .HasColumnName("war_st_hour_0")
                    .HasColumnType("int");

                entity.Property(e => e.WarStHour1)
                    .HasColumnName("war_st_hour_1")
                    .HasColumnType("int");

                entity.Property(e => e.WarStHour2)
                    .HasColumnName("war_st_hour_2")
                    .HasColumnType("int");

                entity.Property(e => e.WarStHour3)
                    .HasColumnName("war_st_hour_3")
                    .HasColumnType("int");

                entity.Property(e => e.WarStHour4)
                    .HasColumnName("war_st_hour_4")
                    .HasColumnType("int");

                entity.Property(e => e.WarStMin0)
                    .HasColumnName("war_st_min_0")
                    .HasColumnType("int");

                entity.Property(e => e.WarStMin1)
                    .HasColumnName("war_st_min_1")
                    .HasColumnType("int");

                entity.Property(e => e.WarStMin2)
                    .HasColumnName("war_st_min_2")
                    .HasColumnType("int");

                entity.Property(e => e.WarStMin3)
                    .HasColumnName("war_st_min_3")
                    .HasColumnType("int");

                entity.Property(e => e.WarStMin4)
                    .HasColumnName("war_st_min_4")
                    .HasColumnType("int");

                entity.Property(e => e.WarTowerDefId)
                    .HasColumnName("war_tower_def_id")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneDamageMultiplierKindId)
                    .HasColumnName("zone_damage_multiplier_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.ConflictZones)
                    .HasForeignKey(d => d.ZoneGroupId);
            });
            
            modelBuilder.Entity<Constants>(entity =>
            {
                entity.ToTable("constants");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Value).HasColumnName("value");
            });

            modelBuilder.Entity<ContentConfigs>(entity =>
            {
                entity.ToTable("content_configs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ConversionEffects>(entity =>
            {
                entity.ToTable("conversion_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.SourceCategoryId)
                    .HasColumnName("source_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.SourceValue)
                    .HasColumnName("source_value")
                    .HasColumnType("int");

                entity.Property(e => e.TargetCategoryId)
                    .HasColumnName("target_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetValue)
                    .HasColumnName("target_value")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<CraftEffects>(entity =>
            {
                entity.ToTable("craft_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<CraftMaterials>(entity =>
            {
                entity.ToTable("craft_materials");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.MainGrade)
                    .HasColumnName("main_grade")
                    .HasColumnType("bool");

                entity.Property(e => e.RequireGrade)
                    .HasColumnName("require_grade")
                    .HasColumnType("int");

                entity.Property(e => e.UpperGrade)
                    .HasColumnName("upper_grade")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.CraftMaterials)
                    .HasForeignKey(d => d.CraftId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.CraftMaterials)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<CraftPackCrafts>(entity =>
            {
                entity.ToTable("craft_pack_crafts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.Property(e => e.CraftPackId)
                    .HasColumnName("craft_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.CraftPackCrafts)
                    .HasForeignKey(d => d.CraftId);

                entity.HasOne(d => d.CraftPack)
                    .WithMany(p => p.CraftPackCrafts)
                    .HasForeignKey(d => d.CraftPackId);
            });

            modelBuilder.Entity<CraftPacks>(entity =>
            {
                entity.ToTable("craft_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<CraftProducts>(entity =>
            {
                entity.ToTable("craft_products");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Rate)
                    .HasColumnName("rate")
                    .HasColumnType("int");

                entity.Property(e => e.ShowLowerCrafts)
                    .HasColumnName("show_lower_crafts")
                    .HasColumnType("bool");

                entity.Property(e => e.UseGrade)
                    .HasColumnName("use_grade")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.CraftProducts)
                    .HasForeignKey(d => d.CraftId);

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.CraftProducts)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.CraftProducts)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<Crafts>(entity =>
            {
                entity.ToTable("crafts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AcId)
                    .HasColumnName("ac_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActabilityLimit)
                    .HasColumnName("actability_limit")
                    .HasColumnType("int");

                entity.Property(e => e.CastDelay)
                    .HasColumnName("cast_delay")
                    .HasColumnType("int");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.NeedBind)
                    .HasColumnName("need_bind")
                    .HasColumnType("bool");

                entity.Property(e => e.ProductsPackId)
                    .HasColumnName("products_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.RecommendLevel)
                    .HasColumnName("recommend_level")
                    .HasColumnType("int");

                entity.Property(e => e.ReqDoodadId)
                    .HasColumnName("req_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShowUpperCrafts)
                    .HasColumnName("show_upper_crafts")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.Title).HasColumnName("title");

                entity.Property(e => e.ToolId)
                    .HasColumnName("tool_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseOnlyActability)
                    .HasColumnName("use_only_actability")
                    .HasColumnType("bool");

                entity.Property(e => e.VisibleOrder)
                    .HasColumnName("visible_order")
                    .HasColumnType("int");

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.Crafts)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<CurrencyConfigs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("currency_configs");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("currency_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<CustomDualMaterials>(entity =>
            {
                entity.ToTable("custom_dual_materials");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Filename).HasColumnName("filename");
            });

            modelBuilder.Entity<CustomFacePresets>(entity =>
            {
                entity.ToTable("custom_face_presets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("int");

                entity.Property(e => e.FaceMorphTypeId)
                    .HasColumnName("face_morph_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Modifier).HasColumnName("modifier");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.CustomFacePresets)
                    .HasForeignKey(d => d.ModelId);
            });

            modelBuilder.Entity<CustomFontColors>(entity =>
            {
                entity.ToTable("custom_font_colors");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Color)
                    .HasColumnName("color")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<CustomHairTextures>(entity =>
            {
                entity.ToTable("custom_hair_textures");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DiffuseTexture).HasColumnName("diffuse_texture");

                entity.Property(e => e.MaskTexture).HasColumnName("mask_texture");

                entity.Property(e => e.NormalTexture).HasColumnName("normal_texture");

                entity.Property(e => e.SpecularTexture).HasColumnName("specular_texture");
            });

            modelBuilder.Entity<CustomizingItemAssetColors>(entity =>
            {
                entity.ToTable("customizing_item_asset_colors");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultHairColor)
                    .HasColumnName("default_hair_color")
                    .HasColumnType("int");

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("int");

                entity.Property(e => e.HairBaseColorB)
                    .HasColumnName("hair_base_color_b")
                    .HasColumnType("int");

                entity.Property(e => e.HairBaseColorG)
                    .HasColumnName("hair_base_color_g")
                    .HasColumnType("int");

                entity.Property(e => e.HairBaseColorR)
                    .HasColumnName("hair_base_color_r")
                    .HasColumnType("int");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.Material).HasColumnName("material");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.TwoToneFirstWidth).HasColumnName("two_tone_first_width");

                entity.Property(e => e.TwoToneHairColor)
                    .HasColumnName("two_tone_hair_color")
                    .HasColumnType("int");

                entity.Property(e => e.TwoToneSecondWidth).HasColumnName("two_tone_second_width");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.CustomizingItemAssetColors)
                    .HasForeignKey(d => d.ModelId);
            });
            
            modelBuilder.Entity<CustomizingItemAssets>(entity =>
            {
                entity.HasKey(o => new { o.ItemId, o.ModelId });

                entity.ToTable("customizing_item_assets");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("int");

                entity.Property(e => e.IsNew)
                    .HasColumnName("is_new")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.TwoTone)
                    .HasColumnName("two_tone")
                    .HasColumnType("bool");

                entity.Property(e => e.UsePallet)
                    .HasColumnName("use_pallet")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.CustomizingItemAssets)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.CustomizingItemAssets)
                    .HasForeignKey(d => d.ModelId);
            });
            
            modelBuilder.Entity<DamageEffects>(entity =>
            {
                entity.ToTable("damage_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActabilityAdd).HasColumnName("actability_add");

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActabilityMul).HasColumnName("actability_mul");

                entity.Property(e => e.ActabilityStep)
                    .HasColumnName("actability_step")
                    .HasColumnType("int");

                entity.Property(e => e.AdjustDamageByHeight)
                    .HasColumnName("adjust_damage_by_height")
                    .HasColumnType("bool");

                entity.Property(e => e.AggroMultiplier).HasColumnName("aggro_multiplier");

                entity.Property(e => e.ChargedBuffId)
                    .HasColumnName("charged_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChargedLevelMul).HasColumnName("charged_level_mul");

                entity.Property(e => e.ChargedMul).HasColumnName("charged_mul");

                entity.Property(e => e.CriticalBonus)
                    .HasColumnName("critical_bonus")
                    .HasColumnType("int");

                entity.Property(e => e.DamageTypeId)
                    .HasColumnName("damage_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.DpsIncMultiplier).HasColumnName("dps_inc_multiplier");

                entity.Property(e => e.DpsMultiplier).HasColumnName("dps_multiplier");

                entity.Property(e => e.EngageCombat)
                    .HasColumnName("engage_combat")
                    .HasColumnType("bool");

                entity.Property(e => e.ExtraEffects).HasColumnName("extra_effects");

                entity.Property(e => e.FireProc)
                    .HasColumnName("fire_proc")
                    .HasColumnType("bool");

                entity.Property(e => e.FixedMax)
                    .HasColumnName("fixed_max")
                    .HasColumnType("int");

                entity.Property(e => e.FixedMin)
                    .HasColumnName("fixed_min")
                    .HasColumnType("int");

                entity.Property(e => e.HealthStealRatio)
                    .HasColumnName("health_steal_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.HighAbilityResourceDpsMd).HasColumnName("high_ability_resource_dps_md");

                entity.Property(e => e.HighAbilityResourceLevelMd).HasColumnName("high_ability_resource_level_md");

                entity.Property(e => e.HighAbilityResourceMd).HasColumnName("high_ability_resource_md");

                entity.Property(e => e.HitAnimTimingId)
                    .HasColumnName("hit_anim_timing_id")
                    .HasColumnType("int");

                entity.Property(e => e.LevelMd).HasColumnName("level_md");

                entity.Property(e => e.LevelVaEnd)
                    .HasColumnName("level_va_end")
                    .HasColumnType("int");

                entity.Property(e => e.LevelVaStart)
                    .HasColumnName("level_va_start")
                    .HasColumnType("int");

                entity.Property(e => e.ManaDamage)
                    .HasColumnName("mana_damage")
                    .HasColumnType("bool");

                entity.Property(e => e.ManaStealRatio)
                    .HasColumnName("mana_steal_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.Multiplier).HasColumnName("multiplier");

                entity.Property(e => e.PercentMax)
                    .HasColumnName("percent_max")
                    .HasColumnType("int");

                entity.Property(e => e.PercentMin)
                    .HasColumnName("percent_min")
                    .HasColumnType("int");

                entity.Property(e => e.Synergy)
                    .HasColumnName("synergy")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetBuffBonus)
                    .HasColumnName("target_buff_bonus")
                    .HasColumnType("int");

                entity.Property(e => e.TargetBuffBonusMul).HasColumnName("target_buff_bonus_mul");

                entity.Property(e => e.TargetBuffTagId)
                    .HasColumnName("target_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetChargedBuffId)
                    .HasColumnName("target_charged_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetChargedMul).HasColumnName("target_charged_mul");

                entity.Property(e => e.TargetHealthAdd)
                    .HasColumnName("target_health_add")
                    .HasColumnType("int");

                entity.Property(e => e.TargetHealthMax)
                    .HasColumnName("target_health_max")
                    .HasColumnType("int");

                entity.Property(e => e.TargetHealthMin)
                    .HasColumnName("target_health_min")
                    .HasColumnType("int");

                entity.Property(e => e.TargetHealthMul).HasColumnName("target_health_mul");

                entity.Property(e => e.UseChargedBuff)
                    .HasColumnName("use_charged_buff")
                    .HasColumnType("bool");

                entity.Property(e => e.UseCurrentHealth)
                    .HasColumnName("use_current_health")
                    .HasColumnType("bool");

                entity.Property(e => e.UseFixedDamage)
                    .HasColumnName("use_fixed_damage")
                    .HasColumnType("bool");

                entity.Property(e => e.UseHighAbilityResource)
                    .HasColumnName("use_high_ability_resource")
                    .HasColumnType("bool");

                entity.Property(e => e.UseLevelDamage)
                    .HasColumnName("use_level_damage")
                    .HasColumnType("bool");

                entity.Property(e => e.UseMainhandWeapon)
                    .HasColumnName("use_mainhand_weapon")
                    .HasColumnType("bool");

                entity.Property(e => e.UseOffhandWeapon)
                    .HasColumnName("use_offhand_weapon")
                    .HasColumnType("bool");

                entity.Property(e => e.UsePercentDamage)
                    .HasColumnName("use_percent_damage")
                    .HasColumnType("bool");

                entity.Property(e => e.UseRangedWeapon)
                    .HasColumnName("use_ranged_weapon")
                    .HasColumnType("bool");

                entity.Property(e => e.UseTargetChargedBuff)
                    .HasColumnName("use_target_charged_buff")
                    .HasColumnType("bool");

                entity.Property(e => e.WeaponSlotId)
                    .HasColumnName("weapon_slot_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.DamageEffects)
                    .HasForeignKey(d => d.ActabilityGroupId);
            });

            modelBuilder.Entity<DecoActabilityGroups>(entity =>
            {
                entity.ToTable("deco_actability_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CountRule)
                    .HasColumnName("count_rule")
                    .HasColumnType("bool");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<DefaultInventoryTabGroups>(entity =>
            {
                entity.ToTable("default_inventory_tab_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DefaultInventoryTabId)
                    .HasColumnName("default_inventory_tab_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGroupId)
                    .HasColumnName("item_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DefaultInventoryTab)
                    .WithMany(p => p.DefaultInventoryTabGroups)
                    .HasForeignKey(d => d.DefaultInventoryTabId);

                entity.HasOne(d => d.ItemGroup)
                    .WithMany(p => p.DefaultInventoryTabGroups)
                    .HasForeignKey(d => d.ItemGroupId);
            });

            modelBuilder.Entity<DefaultInventoryTabs>(entity =>
            {
                entity.ToTable("default_inventory_tabs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.IconIdx)
                    .HasColumnName("icon_idx")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.TabOrder)
                    .HasColumnName("tab_order")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DefaultSkills>(entity =>
            {
                entity.ToTable("default_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddToSlot)
                    .HasColumnName("add_to_slot")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillActiveTypeId)
                    .HasColumnName("skill_active_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillBookCategoryId)
                    .HasColumnName("skill_book_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlotIndex)
                    .HasColumnName("slot_index")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DefaultSkills)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DemoBagItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_bag_items");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.DemoBagId).HasColumnName("demo_bag_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemId).HasColumnName("item_id");
            });

            modelBuilder.Entity<DemoBags>(entity =>
            {
                entity.ToTable("demo_bags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DemoChars>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_chars");

                entity.Property(e => e.DemoBagId).HasColumnName("demo_bag_id");

                entity.Property(e => e.DemoEquipId).HasColumnName("demo_equip_id");

                entity.Property(e => e.DemoId).HasColumnName("demo_id");

                entity.Property(e => e.DemoStartLocId).HasColumnName("demo_start_loc_id");

                entity.Property(e => e.FactionId).HasColumnName("faction_id");

                entity.Property(e => e.GenderId).HasColumnName("gender_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.RaceId).HasColumnName("race_id");
            });

            modelBuilder.Entity<DemoEquipItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_equip_items");

                entity.Property(e => e.DemoEquipId).HasColumnName("demo_equip_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemId).HasColumnName("item_id");
            });

            modelBuilder.Entity<DemoEquips>(entity =>
            {
                entity.ToTable("demo_equips");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DemoLocs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demo_locs");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.X).HasColumnName("x");

                entity.Property(e => e.Y).HasColumnName("y");

                entity.Property(e => e.Z).HasColumnName("z");

                entity.Property(e => e.ZoneId).HasColumnName("zone_id");
            });

            modelBuilder.Entity<Demos>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("demos");

                entity.Property(e => e.AddExp).HasColumnName("add_exp");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<DispelEffects>(entity =>
            {
                entity.ToTable("dispel_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffTagId)
                    .HasColumnName("buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.CureCount)
                    .HasColumnName("cure_count")
                    .HasColumnType("int");

                entity.Property(e => e.DispelCount)
                    .HasColumnName("dispel_count")
                    .HasColumnType("int");

                entity.Property(e => e.Stack)
                    .HasColumnName("stack")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DistrictReturnPoints>(entity =>
            {
                entity.ToTable("district_return_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DistrictId)
                    .HasColumnName("district_id")
                    .HasColumnType("int");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.ReturnPointId)
                    .HasColumnName("return_point_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.DistrictReturnPoints)
                    .HasForeignKey(d => d.DistrictId);

                entity.HasOne(d => d.ReturnPoint)
                    .WithMany(p => p.DistrictReturnPoints)
                    .HasForeignKey(d => d.ReturnPointId);
            });

            modelBuilder.Entity<Districts>(entity =>
            {
                entity.ToTable("districts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadAlmighties>(entity =>
            {
                entity.ToTable("doodad_almighties");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Childable)
                    .HasColumnName("childable")
                    .HasColumnType("bool");

                entity.Property(e => e.ClimateId)
                    .HasColumnName("climate_id")
                    .HasColumnType("int");

                entity.Property(e => e.CollideShip)
                    .HasColumnName("collide_ship")
                    .HasColumnType("bool");

                entity.Property(e => e.CollideVehicle)
                    .HasColumnName("collide_vehicle")
                    .HasColumnType("bool");

                entity.Property(e => e.DeleteWhenNotExistCreator)
                    .HasColumnName("delete_when_not_exist_creator")
                    .HasColumnType("bool");

                entity.Property(e => e.DespawnOnCollision)
                    .HasColumnName("despawn_on_collision")
                    .HasColumnType("bool");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.ForceTodTopPriority)
                    .HasColumnName("force_tod_top_priority")
                    .HasColumnType("bool");

                entity.Property(e => e.ForceUpAction)
                    .HasColumnName("force_up_action")
                    .HasColumnType("bool");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.GrowthTime)
                    .HasColumnName("growth_time")
                    .HasColumnType("int");

                entity.Property(e => e.LoadModelFromWorld)
                    .HasColumnName("load_model_from_world")
                    .HasColumnType("bool");

                entity.Property(e => e.MarkModel).HasColumnName("mark_model");

                entity.Property(e => e.MaxTime)
                    .HasColumnName("max_time")
                    .HasColumnType("int");

                entity.Property(e => e.MgmtSpawn)
                    .HasColumnName("mgmt_spawn")
                    .HasColumnType("bool");

                entity.Property(e => e.MinTime)
                    .HasColumnName("min_time")
                    .HasColumnType("int");

                entity.Property(e => e.Model).HasColumnName("model");

                entity.Property(e => e.ModelKindId)
                    .HasColumnName("model_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NoCollision)
                    .HasColumnName("no_collision")
                    .HasColumnType("bool");

                entity.Property(e => e.OnceOneInteraction)
                    .HasColumnName("once_one_interaction")
                    .HasColumnType("bool");

                entity.Property(e => e.OnceOneMan)
                    .HasColumnName("once_one_man")
                    .HasColumnType("bool");

                entity.Property(e => e.Parentable)
                    .HasColumnName("parentable")
                    .HasColumnType("bool");

                entity.Property(e => e.PassThroughOuterside)
                    .HasColumnName("pass_through_outerside")
                    .HasColumnType("bool");

                entity.Property(e => e.PassUpdateDist)
                    .HasColumnName("pass_update_dist")
                    .HasColumnType("bool");

                entity.Property(e => e.Percent)
                    .HasColumnName("percent")
                    .HasColumnType("int");

                entity.Property(e => e.PlaceAreaKindId)
                    .HasColumnName("place_area_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.ResetData)
                    .HasColumnName("reset_data")
                    .HasColumnType("bool");

                entity.Property(e => e.RestrictZoneId)
                    .HasColumnName("restrict_zone_id")
                    .HasColumnType("int");

                entity.Property(e => e.SaveIndun)
                    .HasColumnName("save_indun")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowMinimap)
                    .HasColumnName("show_minimap")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowName)
                    .HasColumnName("show_name")
                    .HasColumnType("bool");

                entity.Property(e => e.SimRadius)
                    .HasColumnName("sim_radius")
                    .HasColumnType("int");

                entity.Property(e => e.SpawnFxGroupId)
                    .HasColumnName("spawn_fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.SystemDoodad)
                    .HasColumnName("system_doodad")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetDecalSize).HasColumnName("target_decal_size");

                entity.Property(e => e.UseCreatorFaction)
                    .HasColumnName("use_creator_faction")
                    .HasColumnType("bool");

                entity.Property(e => e.UseTargetDecal)
                    .HasColumnName("use_target_decal")
                    .HasColumnType("bool");

                entity.Property(e => e.UseTargetHighlight)
                    .HasColumnName("use_target_highlight")
                    .HasColumnType("bool");

                entity.Property(e => e.UseTargetSilhouette)
                    .HasColumnName("use_target_silhouette")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Climate)
                    .WithMany(p => p.DoodadAlmighties)
                    .HasForeignKey(d => d.ClimateId);
            });

            modelBuilder.Entity<DoodadBundleDoodads>(entity =>
            {
                entity.ToTable("doodad_bundle_doodads");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadBundleId)
                    .HasColumnName("doodad_bundle_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DoodadBundle)
                    .WithMany(p => p.DoodadBundleDoodads)
                    .HasForeignKey(d => d.DoodadBundleId);
            });

            modelBuilder.Entity<DoodadBundles>(entity =>
            {
                entity.ToTable("doodad_bundles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFamilies>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_families");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.FamilyId)
                    .HasColumnName("family_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<DoodadFuncActivateHousingAreas>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_activate_housing_areas");

                entity.Property(e => e.Activate).HasColumnName("activate");

                entity.Property(e => e.HousingAreaId).HasColumnName("housing_area_id");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<DoodadFuncActivateSpheres>(entity =>
            {
                entity.ToTable("doodad_func_activate_spheres");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncAnimates>(entity =>
            {
                entity.ToTable("doodad_func_animates");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PlayOnce)
                    .HasColumnName("play_once")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<DoodadFuncAreaTriggers>(entity =>
            {
                entity.ToTable("doodad_func_area_triggers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.IsEnter)
                    .HasColumnName("is_enter")
                    .HasColumnType("bool");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.DoodadFuncAreaTriggers)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<DoodadFuncAttachments>(entity =>
            {
                entity.ToTable("doodad_func_attachments");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AnimActionId)
                    .HasColumnName("anim_action_id")
                    .HasColumnType("int");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.BondKindId)
                    .HasColumnName("bond_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Space)
                    .HasColumnName("space")
                    .HasColumnType("int");

                entity.HasOne(d => d.AnimAction)
                    .WithMany(p => p.DoodadFuncAttachments)
                    .HasForeignKey(d => d.AnimActionId);
            });

            modelBuilder.Entity<DoodadFuncAuctionUis>(entity =>
            {
                entity.ToTable("doodad_func_auction_uis");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncBankUis>(entity =>
            {
                entity.ToTable("doodad_func_bank_uis");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncBindings>(entity =>
            {
                entity.ToTable("doodad_func_bindings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DistrictId)
                    .HasColumnName("district_id")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.District)
                    .WithMany(p => p.DoodadFuncBindings)
                    .HasForeignKey(d => d.DistrictId);

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.DoodadFuncBindings)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<DoodadFuncBubbles>(entity =>
            {
                entity.ToTable("doodad_func_bubbles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BubbleId)
                    .HasColumnName("bubble_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Bubble)
                    .WithMany(p => p.DoodadFuncBubbles)
                    .HasForeignKey(d => d.BubbleId);
            });

            modelBuilder.Entity<DoodadFuncBuffs>(entity =>
            {
                entity.ToTable("doodad_func_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.PermId)
                    .HasColumnName("perm_id")
                    .HasColumnType("int");

                entity.Property(e => e.Radius).HasColumnName("radius");

                entity.Property(e => e.RelationshipId)
                    .HasColumnName("relationship_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.DoodadFuncBuffs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<DoodadFuncBuildConditionInfos>(entity =>
            {
                entity.ToTable("doodad_func_build_condition_infos");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Effect).HasColumnName("effect");

                entity.Property(e => e.Explanation).HasColumnName("explanation");

                entity.Property(e => e.IsDevote)
                    .HasColumnName("isDevote")
                    .HasColumnType("bool");

                entity.Property(e => e.IsEnd)
                    .HasColumnName("isEnd")
                    .HasColumnType("bool");

                entity.Property(e => e.Tooltip).HasColumnName("tooltip");
            });

            modelBuilder.Entity<DoodadFuncBuildConditionUiOpens>(entity =>
            {
                entity.ToTable("doodad_func_build_condition_ui_opens");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncButchers>(entity =>
            {
                entity.ToTable("doodad_func_butchers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CorpseModel).HasColumnName("corpse_model");
            });

            modelBuilder.Entity<DoodadFuncBuyFishItems>(entity =>
            {
                entity.ToTable("doodad_func_buy_fish_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadFuncBuyFishId)
                    .HasColumnName("doodad_func_buy_fish_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncBuyFishItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncBuyFishModelItems>(entity =>
            {
                entity.ToTable("doodad_func_buy_fish_model_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadFuncBuyFishModelId)
                    .HasColumnName("doodad_func_buy_fish_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Model).HasColumnName("model");

                entity.HasOne(d => d.DoodadFuncBuyFishModel)
                    .WithMany(p => p.DoodadFuncBuyFishModelItems)
                    .HasForeignKey(d => d.DoodadFuncBuyFishModelId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncBuyFishModelItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncBuyFishModels>(entity =>
            {
                entity.ToTable("doodad_func_buy_fish_models");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncBuyFishes>(entity =>
            {
                entity.ToTable("doodad_func_buy_fishes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncBuyFishes)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncCatches>(entity =>
            {
                entity.ToTable("doodad_func_catches");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCerealHarvests>(entity =>
            {
                entity.ToTable("doodad_func_cereal_harvests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncChangeOtherDoodadPhases>(entity =>
            {
                entity.ToTable("doodad_func_change_other_doodad_phases");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.TargetDoodadId)
                    .HasColumnName("target_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetPhase)
                    .HasColumnName("target_phase")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncCleanupLogicLinks>(entity =>
            {
                entity.ToTable("doodad_func_cleanup_logic_links");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncClimateReacts>(entity =>
            {
                entity.ToTable("doodad_func_climate_reacts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncClimbs>(entity =>
            {
                entity.ToTable("doodad_func_climbs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AllowHorizontalMultiHanger)
                    .HasColumnName("allow_horizontal_multi_hanger")
                    .HasColumnType("bool");

                entity.Property(e => e.ClimbTypeId)
                    .HasColumnName("climb_type_id")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<DoodadFuncCloutEffects>(entity =>
            {
                entity.HasKey(o => new { o.DoodadFuncCloutId, o.EffectId });

                entity.ToTable("doodad_func_clout_effects");

                entity.Property(e => e.DoodadFuncCloutId)
                    .HasColumnName("doodad_func_clout_id")
                    .HasColumnType("int");

                entity.Property(e => e.EffectId)
                    .HasColumnName("effect_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DoodadFuncClout)
                    .WithMany(p => p.DoodadFuncCloutEffects)
                    .HasForeignKey(d => d.DoodadFuncCloutId);

                entity.HasOne(d => d.Effect)
                    .WithMany(p => p.DoodadFuncCloutEffects)
                    .HasForeignKey(d => d.EffectId);
            });
            
            modelBuilder.Entity<DoodadFuncClouts>(entity =>
            {
                entity.ToTable("doodad_func_clouts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AoeShapeId)
                    .HasColumnName("aoe_shape_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.CheckNoTargetTagSrc)
                    .HasColumnName("check_no_target_tag_src")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckProjectileHighPriority)
                    .HasColumnName("check_projectile_high_priority")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckTargetTagSrc)
                    .HasColumnName("check_target_tag_src")
                    .HasColumnType("bool");

                entity.Property(e => e.Duration)
                    .HasColumnName("duration")
                    .HasColumnType("int");

                entity.Property(e => e.FxGroupId)
                    .HasColumnName("fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ProjectileId)
                    .HasColumnName("projectile_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShowToFriendlyOnly)
                    .HasColumnName("show_to_friendly_only")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetBuffTagId)
                    .HasColumnName("target_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetNoBuffTagId)
                    .HasColumnName("target_no_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetRelationId)
                    .HasColumnName("target_relation_id")
                    .HasColumnType("int");

                entity.Property(e => e.Tick)
                    .HasColumnName("tick")
                    .HasColumnType("int");

                entity.Property(e => e.UseOriginSource)
                    .HasColumnName("use_origin_source")
                    .HasColumnType("bool");

                entity.HasOne(d => d.AoeShape)
                    .WithMany(p => p.DoodadFuncClouts)
                    .HasForeignKey(d => d.AoeShapeId);

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.DoodadFuncClouts)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.FxGroup)
                    .WithMany(p => p.DoodadFuncClouts)
                    .HasForeignKey(d => d.FxGroupId);

                entity.HasOne(d => d.Projectile)
                    .WithMany(p => p.DoodadFuncClouts)
                    .HasForeignKey(d => d.ProjectileId);
            });

            modelBuilder.Entity<DoodadFuncCofferPerms>(entity =>
            {
                entity.ToTable("doodad_func_coffer_perms");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCoffers>(entity =>
            {
                entity.ToTable("doodad_func_coffers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Capacity)
                    .HasColumnName("capacity")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncConditionalUses>(entity =>
            {
                entity.ToTable("doodad_func_conditional_uses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FakeSkillId)
                    .HasColumnName("fake_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemTriggerPhase)
                    .HasColumnName("item_trigger_phase")
                    .HasColumnType("int");

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestTriggerPhase)
                    .HasColumnName("quest_trigger_phase")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncConditionalUses)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DoodadFuncConditionalUses)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DoodadFuncConsumeChangerItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_consume_changer_items");

                entity.Property(e => e.DoodadFuncConsumeChangerId)
                    .HasColumnName("doodad_func_consume_changer_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<DoodadFuncConsumeChangerModelItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_consume_changer_model_items");

                entity.Property(e => e.DoodadFuncConsumeChangerModelId)
                    .HasColumnName("doodad_func_consume_changer_model_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Model).HasColumnName("model");
            });

            modelBuilder.Entity<DoodadFuncConsumeChangerModels>(entity =>
            {
                entity.ToTable("doodad_func_consume_changer_models");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Model).HasColumnName("model");
            });

            modelBuilder.Entity<DoodadFuncConsumeChangers>(entity =>
            {
                entity.ToTable("doodad_func_consume_changers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.SlotId)
                    .HasColumnName("slot_id")
                    .HasColumnType("int");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.DoodadFuncConsumeChangers)
                    .HasForeignKey(d => d.TagId);
            });

            modelBuilder.Entity<DoodadFuncConsumeItems>(entity =>
            {
                entity.ToTable("doodad_func_consume_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncConsumeItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncConvertFishItems>(entity =>
            {
                entity.ToTable("doodad_func_convert_fish_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadFuncConvertFishId)
                    .HasColumnName("doodad_func_convert_fish_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.LootPackId)
                    .HasColumnName("loot_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncConvertFishItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncConvertFishes>(entity =>
            {
                entity.ToTable("doodad_func_convert_fishes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCraftActs>(entity =>
            {
                entity.ToTable("doodad_func_craft_acts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Model20).HasColumnName("model20");

                entity.Property(e => e.Model40).HasColumnName("model40");

                entity.Property(e => e.Model60).HasColumnName("model60");

                entity.Property(e => e.Model80).HasColumnName("model80");
            });

            modelBuilder.Entity<DoodadFuncCraftCancels>(entity =>
            {
                entity.ToTable("doodad_func_craft_cancels");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCraftDirects>(entity =>
            {
                entity.ToTable("doodad_func_craft_directs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncCraftGetItems>(entity =>
            {
                entity.ToTable("doodad_func_craft_get_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCraftGradeRatios>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_craft_grade_ratios");

                entity.Property(e => e.GradeId).HasColumnName("grade_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Ratio).HasColumnName("ratio");
            });

            modelBuilder.Entity<DoodadFuncCraftInfos>(entity =>
            {
                entity.ToTable("doodad_func_craft_infos");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCraftPacks>(entity =>
            {
                entity.ToTable("doodad_func_craft_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CraftPackId)
                    .HasColumnName("craft_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.CraftPack)
                    .WithMany(p => p.DoodadFuncCraftPacks)
                    .HasForeignKey(d => d.CraftPackId);
            });

            modelBuilder.Entity<DoodadFuncCraftStartCrafts>(entity =>
            {
                entity.ToTable("doodad_func_craft_start_crafts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadFuncCraftStartId)
                    .HasColumnName("doodad_func_craft_start_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.DoodadFuncCraftStartCrafts)
                    .HasForeignKey(d => d.CraftId);

                entity.HasOne(d => d.DoodadFuncCraftStart)
                    .WithMany(p => p.DoodadFuncCraftStartCrafts)
                    .HasForeignKey(d => d.DoodadFuncCraftStartId);
            });

            modelBuilder.Entity<DoodadFuncCraftStarts>(entity =>
            {
                entity.ToTable("doodad_func_craft_starts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<DoodadFuncCropHarvests>(entity =>
            {
                entity.ToTable("doodad_func_crop_harvests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCrystalCollects>(entity =>
            {
                entity.ToTable("doodad_func_crystal_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCutdownings>(entity =>
            {
                entity.ToTable("doodad_func_cutdownings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncCutdowns>(entity =>
            {
                entity.ToTable("doodad_func_cutdowns");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncDairyCollects>(entity =>
            {
                entity.ToTable("doodad_func_dairy_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncDeclareSieges>(entity =>
            {
                entity.ToTable("doodad_func_declare_sieges");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncDevotes>(entity =>
            {
                entity.ToTable("doodad_func_devotes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.TooltipText).HasColumnName("tooltip_text");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncDevotes)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncDigTerrains>(entity =>
            {
                entity.ToTable("doodad_func_dig_terrains");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Life)
                    .HasColumnName("life")
                    .HasColumnType("int");

                entity.Property(e => e.Radius)
                    .HasColumnName("radius")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncDigs>(entity =>
            {
                entity.ToTable("doodad_func_digs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncDominionTaxInKinds>(entity =>
            {
                entity.ToTable("doodad_func_dominion_tax_in_kinds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.TooltipText).HasColumnName("tooltip_text");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncDominionTaxInKinds)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncDyeingredientCollects>(entity =>
            {
                entity.ToTable("doodad_func_dyeingredient_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncEnterInstances>(entity =>
            {
                entity.ToTable("doodad_func_enter_instances");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncEnterInstances)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.DoodadFuncEnterInstances)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<DoodadFuncEnterSysInstances>(entity =>
            {
                entity.ToTable("doodad_func_enter_sys_instances");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.Selective)
                    .HasColumnName("selective")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.DoodadFuncEnterSysInstances)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<DoodadFuncEvidenceItemLoots>(entity =>
            {
                entity.ToTable("doodad_func_evidence_item_loots");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CrimeKindId)
                    .HasColumnName("crime_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.CrimeValue)
                    .HasColumnName("crime_value")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DoodadFuncEvidenceItemLoots)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DoodadFuncExchangeItems>(entity =>
            {
                entity.ToTable("doodad_func_exchange_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadFuncExchangeId)
                    .HasColumnName("doodad_func_exchange_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.LootPackId)
                    .HasColumnName("loot_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DoodadFuncExchange)
                    .WithMany(p => p.DoodadFuncExchangeItems)
                    .HasForeignKey(d => d.DoodadFuncExchangeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncExchangeItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncExchanges>(entity =>
            {
                entity.ToTable("doodad_func_exchanges");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncExitInduns>(entity =>
            {
                entity.ToTable("doodad_func_exit_induns");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ReturnPointId)
                    .HasColumnName("return_point_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ReturnPoint)
                    .WithMany(p => p.DoodadFuncExitInduns)
                    .HasForeignKey(d => d.ReturnPointId);
            });

            modelBuilder.Entity<DoodadFuncFakeUses>(entity =>
            {
                entity.ToTable("doodad_func_fake_uses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FakeSkillId)
                    .HasColumnName("fake_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetParent)
                    .HasColumnName("target_parent")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DoodadFuncFakeUses)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DoodadFuncFeeds>(entity =>
            {
                entity.ToTable("doodad_func_feeds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncFeeds)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncFiberCollects>(entity =>
            {
                entity.ToTable("doodad_func_fiber_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncFinals>(entity =>
            {
                entity.ToTable("doodad_func_finals");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.After)
                    .HasColumnName("after")
                    .HasColumnType("int");

                entity.Property(e => e.MaxTime)
                    .HasColumnName("max_time")
                    .HasColumnType("int");

                entity.Property(e => e.MinTime)
                    .HasColumnName("min_time")
                    .HasColumnType("int");

                entity.Property(e => e.Respawn)
                    .HasColumnName("respawn")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowEndTime)
                    .HasColumnName("show_end_time")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowTip)
                    .HasColumnName("show_tip")
                    .HasColumnType("bool");

                entity.Property(e => e.Tip).HasColumnName("tip");
            });

            modelBuilder.Entity<DoodadFuncFishSchools>(entity =>
            {
                entity.ToTable("doodad_func_fish_schools");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcSpawnerId)
                    .HasColumnName("npc_spawner_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncFruitPicks>(entity =>
            {
                entity.ToTable("doodad_func_fruit_picks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncFxGroupCallbacks>(entity =>
            {
                entity.ToTable("doodad_func_fx_group_callbacks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CallbackTypeId)
                    .HasColumnName("callback_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Duration)
                    .HasColumnName("duration")
                    .HasColumnType("int");

                entity.Property(e => e.FxGroupId)
                    .HasColumnName("fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.InteractorOnly)
                    .HasColumnName("interactor_only")
                    .HasColumnType("bool");

                entity.HasOne(d => d.FxGroup)
                    .WithMany(p => p.DoodadFuncFxGroupCallbacks)
                    .HasForeignKey(d => d.FxGroupId);
            });

            modelBuilder.Entity<DoodadFuncGassExtracts>(entity =>
            {
                entity.ToTable("doodad_func_gass_extracts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncGoodsValues>(entity =>
            {
                entity.ToTable("doodad_func_goods_values");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.JackpotMax)
                    .HasColumnName("jackpot_max")
                    .HasColumnType("int");

                entity.Property(e => e.JackpotMin)
                    .HasColumnName("jackpot_min")
                    .HasColumnType("int");

                entity.Property(e => e.JackpotRatio)
                    .HasColumnName("jackpot_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.NormalMax)
                    .HasColumnName("normal_max")
                    .HasColumnType("int");

                entity.Property(e => e.NormalMin)
                    .HasColumnName("normal_min")
                    .HasColumnType("int");

                entity.Property(e => e.WeightScope)
                    .HasColumnName("weight_scope")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncGroups>(entity =>
            {
                entity.ToTable("doodad_func_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Color).HasColumnName("color");

                entity.Property(e => e.DoodadAlmightyId)
                    .HasColumnName("doodad_almighty_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadFuncGroupKindId)
                    .HasColumnName("doodad_func_group_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.IconKey).HasColumnName("icon_key");

                entity.Property(e => e.IsMsgToWorld)
                    .HasColumnName("is_msg_to_world")
                    .HasColumnType("bool");

                entity.Property(e => e.IsMsgToZone)
                    .HasColumnName("is_msg_to_zone")
                    .HasColumnType("bool");

                entity.Property(e => e.Model).HasColumnName("model");

                entity.Property(e => e.MsgToFactionId)
                    .HasColumnName("msg_to_faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OverHeadMarkGap)
                    .HasColumnName("over_head_mark_gap")
                    .HasColumnType("int");

                entity.Property(e => e.PhaseMsg).HasColumnName("phase_msg");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundTime)
                    .HasColumnName("sound_time")
                    .HasColumnType("int");

                entity.Property(e => e.TitleColor).HasColumnName("title_color");

                entity.Property(e => e.TitleMsg).HasColumnName("title_msg");

                entity.Property(e => e.UseUiMsg)
                    .HasColumnName("use_ui_msg")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.DoodadFuncGroups)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<DoodadFuncGrowths>(entity =>
            {
                entity.ToTable("doodad_func_growths");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Delay)
                    .HasColumnName("delay")
                    .HasColumnType("int");

                entity.Property(e => e.EndScale)
                    .HasColumnName("end_scale")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.StartScale)
                    .HasColumnName("start_scale")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncHarvests>(entity =>
            {
                entity.ToTable("doodad_func_harvests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncHeroElections>(entity =>
            {
                entity.ToTable("doodad_func_hero_elections");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncHouseFarms>(entity =>
            {
                entity.ToTable("doodad_func_house_farms");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemCategoryId)
                    .HasColumnName("item_category_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncHousingAreas>(entity =>
            {
                entity.ToTable("doodad_func_housing_areas");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.Radius)
                    .HasColumnName("radius")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncHungers>(entity =>
            {
                entity.ToTable("doodad_func_hungers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FullStep)
                    .HasColumnName("full_step")
                    .HasColumnType("int");

                entity.Property(e => e.HungryTerm)
                    .HasColumnName("hungry_term")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.PhaseChangeLimit)
                    .HasColumnName("phase_change_limit")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncInsertCounters>(entity =>
            {
                entity.ToTable("doodad_func_insert_counters");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncInsertCounters)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncIssuanceOfMobilizationOrderUiOpens>(entity =>
            {
                entity.ToTable("doodad_func_issuance_of_mobilization_order_ui_opens");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncItemChangerUiOpens>(entity =>
            {
                entity.ToTable("doodad_func_item_changer_ui_opens");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncItemChangers>(entity =>
            {
                entity.ToTable("doodad_func_item_changers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncItemChangers)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DoodadFuncItemChangers)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DoodadFuncLivestockGrowths>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_livestock_growths");

                entity.Property(e => e.FullStep)
                    .HasColumnName("full_step")
                    .HasColumnType("INT");

                entity.Property(e => e.Hungry)
                    .HasColumnName("hungry")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.NeedFeed)
                    .HasColumnName("need_feed")
                    .HasColumnType("NUM");

                entity.Property(e => e.StepOneModel).HasColumnName("step_one_model");

                entity.Property(e => e.StepOneTime)
                    .HasColumnName("step_one_time")
                    .HasColumnType("INT");

                entity.Property(e => e.StepThreeModel).HasColumnName("step_three_model");

                entity.Property(e => e.StepTwoModel).HasColumnName("step_two_model");

                entity.Property(e => e.StepTwoTime)
                    .HasColumnName("step_two_time")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<DoodadFuncLogicDisplays>(entity =>
            {
                entity.ToTable("doodad_func_logic_displays");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncLogicFamilyProviders>(entity =>
            {
                entity.ToTable("doodad_func_logic_family_providers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FamilyId)
                    .HasColumnName("family_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncLogicFamilySubscribers>(entity =>
            {
                entity.ToTable("doodad_func_logic_family_subscribers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FamilyId)
                    .HasColumnName("family_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncLogics>(entity =>
            {
                entity.ToTable("doodad_func_logics");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DelayId)
                    .HasColumnName("delay_id")
                    .HasColumnType("int");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncLootItems>(entity =>
            {
                entity.ToTable("doodad_func_loot_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CountMax)
                    .HasColumnName("count_max")
                    .HasColumnType("int");

                entity.Property(e => e.CountMin)
                    .HasColumnName("count_min")
                    .HasColumnType("int");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Percent)
                    .HasColumnName("percent")
                    .HasColumnType("int");

                entity.Property(e => e.RemainTime)
                    .HasColumnName("remain_time")
                    .HasColumnType("int");

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncLootItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncLootPacks>(entity =>
            {
                entity.ToTable("doodad_func_loot_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.LootPackId)
                    .HasColumnName("loot_pack_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncMachinePartsCollects>(entity =>
            {
                entity.ToTable("doodad_func_machine_parts_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncMedicalingredientMines>(entity =>
            {
                entity.ToTable("doodad_func_medicalingredient_mines");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncMouldItems>(entity =>
            {
                entity.ToTable("doodad_func_mould_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadFuncMouldId)
                    .HasColumnName("doodad_func_mould_id")
                    .HasColumnType("int");

                entity.Property(e => e.MouldPackId)
                    .HasColumnName("mould_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DoodadFuncMould)
                    .WithMany(p => p.DoodadFuncMouldItems)
                    .HasForeignKey(d => d.DoodadFuncMouldId);

                entity.HasOne(d => d.MouldPack)
                    .WithMany(p => p.DoodadFuncMouldItems)
                    .HasForeignKey(d => d.MouldPackId);
            });

            modelBuilder.Entity<DoodadFuncMoulds>(entity =>
            {
                entity.ToTable("doodad_func_moulds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncMows>(entity =>
            {
                entity.ToTable("doodad_func_mows");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncNaviDonations>(entity =>
            {
                entity.ToTable("doodad_func_navi_donations");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncNaviMarkPosToMaps>(entity =>
            {
                entity.ToTable("doodad_func_navi_mark_pos_to_maps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.X)
                    .HasColumnName("x")
                    .HasColumnType("int");

                entity.Property(e => e.Y)
                    .HasColumnName("y")
                    .HasColumnType("int");

                entity.Property(e => e.Z)
                    .HasColumnName("z")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncNaviNamings>(entity =>
            {
                entity.ToTable("doodad_func_navi_namings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncNaviOpenBounties>(entity =>
            {
                entity.ToTable("doodad_func_navi_open_bounties");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncNaviOpenMailboxes>(entity =>
            {
                entity.ToTable("doodad_func_navi_open_mailboxes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Duration)
                    .HasColumnName("duration")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncNaviOpenPortals>(entity =>
            {
                entity.ToTable("doodad_func_navi_open_portals");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncNaviRemoveTimers>(entity =>
            {
                entity.ToTable("doodad_func_navi_remove_timers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.After)
                    .HasColumnName("after")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncNaviRemoves>(entity =>
            {
                entity.ToTable("doodad_func_navi_removes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ReqLp)
                    .HasColumnName("req_lp")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncNaviTeleports>(entity =>
            {
                entity.ToTable("doodad_func_navi_teleports");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncNpcInteractionRelays>(entity =>
            {
                entity.ToTable("doodad_func_npc_interaction_relays");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Range).HasColumnName("range");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.DoodadFuncNpcInteractionRelays)
                    .HasForeignKey(d => d.TagId);
            });

            modelBuilder.Entity<DoodadFuncNuonsArrowUiOpens>(entity =>
            {
                entity.ToTable("doodad_func_nuons_arrow_ui_opens");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncOneShotPlaces>(entity =>
            {
                entity.ToTable("doodad_func_one_shot_places");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemSetId)
                    .HasColumnName("item_set_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemSet)
                    .WithMany(p => p.DoodadFuncOneShotPlaces)
                    .HasForeignKey(d => d.ItemSetId);
            });

            modelBuilder.Entity<DoodadFuncOneShotTakes>(entity =>
            {
                entity.ToTable("doodad_func_one_shot_takes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncOpenFarmInfos>(entity =>
            {
                entity.ToTable("doodad_func_open_farm_infos");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FarmId)
                    .HasColumnName("farm_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncOpenPapers>(entity =>
            {
                entity.ToTable("doodad_func_open_papers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BookId)
                    .HasColumnName("book_id")
                    .HasColumnType("int");

                entity.Property(e => e.BookPageId)
                    .HasColumnName("book_page_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.DoodadFuncOpenPapers)
                    .HasForeignKey(d => d.BookId);

                entity.HasOne(d => d.BookPage)
                    .WithMany(p => p.DoodadFuncOpenPapers)
                    .HasForeignKey(d => d.BookPageId);
            });

            modelBuilder.Entity<DoodadFuncOreMines>(entity =>
            {
                entity.ToTable("doodad_func_ore_mines");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncOwnershipTimes>(entity =>
            {
                entity.ToTable("doodad_func_ownership_times");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Delay)
                    .HasColumnName("delay")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncParentInfos>(entity =>
            {
                entity.ToTable("doodad_func_parent_infos");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncParrots>(entity =>
            {
                entity.ToTable("doodad_func_parrots");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncPlantCollects>(entity =>
            {
                entity.ToTable("doodad_func_plant_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncPlayFlowGraphs>(entity =>
            {
                entity.ToTable("doodad_func_play_flow_graphs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EventOnPhaseChangeId)
                    .HasColumnName("event_on_phase_change_id")
                    .HasColumnType("int");

                entity.Property(e => e.EventOnVisibleId)
                    .HasColumnName("event_on_visible_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncPrivateCofferItemCategories>(entity =>
            {
                entity.ToTable("doodad_func_private_coffer_item_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadFuncPrivateCofferId)
                    .HasColumnName("doodad_func_private_coffer_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCategoryId)
                    .HasColumnName("item_category_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DoodadFuncPrivateCoffer)
                    .WithMany(p => p.DoodadFuncPrivateCofferItemCategories)
                    .HasForeignKey(d => d.DoodadFuncPrivateCofferId);
            });

            modelBuilder.Entity<DoodadFuncPrivateCoffers>(entity =>
            {
                entity.ToTable("doodad_func_private_coffers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Capacity)
                    .HasColumnName("capacity")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncPulseTriggers>(entity =>
            {
                entity.ToTable("doodad_func_pulse_triggers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Flag)
                    .HasColumnName("flag")
                    .HasColumnType("bool");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncPulses>(entity =>
            {
                entity.ToTable("doodad_func_pulses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Flag)
                    .HasColumnName("flag")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<DoodadFuncPurchaseSiegeTickets>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_purchase_siege_tickets");

                entity.Property(e => e.AdditionalCost0).HasColumnName("additional_cost0");

                entity.Property(e => e.AdditionalCost1).HasColumnName("additional_cost1");

                entity.Property(e => e.AdditionalCost10).HasColumnName("additional_cost10");

                entity.Property(e => e.AdditionalCost11).HasColumnName("additional_cost11");

                entity.Property(e => e.AdditionalCost12).HasColumnName("additional_cost12");

                entity.Property(e => e.AdditionalCost13).HasColumnName("additional_cost13");

                entity.Property(e => e.AdditionalCost14).HasColumnName("additional_cost14");

                entity.Property(e => e.AdditionalCost15).HasColumnName("additional_cost15");

                entity.Property(e => e.AdditionalCost16).HasColumnName("additional_cost16");

                entity.Property(e => e.AdditionalCost17).HasColumnName("additional_cost17");

                entity.Property(e => e.AdditionalCost18).HasColumnName("additional_cost18");

                entity.Property(e => e.AdditionalCost19).HasColumnName("additional_cost19");

                entity.Property(e => e.AdditionalCost2).HasColumnName("additional_cost2");

                entity.Property(e => e.AdditionalCost3).HasColumnName("additional_cost3");

                entity.Property(e => e.AdditionalCost4).HasColumnName("additional_cost4");

                entity.Property(e => e.AdditionalCost5).HasColumnName("additional_cost5");

                entity.Property(e => e.AdditionalCost6).HasColumnName("additional_cost6");

                entity.Property(e => e.AdditionalCost7).HasColumnName("additional_cost7");

                entity.Property(e => e.AdditionalCost8).HasColumnName("additional_cost8");

                entity.Property(e => e.AdditionalCost9).HasColumnName("additional_cost9");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Stack).HasColumnName("stack");
            });

            modelBuilder.Entity<DoodadFuncPurchases>(entity =>
            {
                entity.ToTable("doodad_func_purchases");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CoinCount)
                    .HasColumnName("coin_count")
                    .HasColumnType("int");

                entity.Property(e => e.CoinItemId)
                    .HasColumnName("coin_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("currency_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncPurchases)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncPuzzleIns>(entity =>
            {
                entity.ToTable("doodad_func_puzzle_ins");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Model).HasColumnName("model");

                entity.Property(e => e.Ratio).HasColumnName("ratio");
            });

            modelBuilder.Entity<DoodadFuncPuzzleOuts>(entity =>
            {
                entity.ToTable("doodad_func_puzzle_outs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Anim).HasColumnName("anim");

                entity.Property(e => e.Delay)
                    .HasColumnName("delay")
                    .HasColumnType("int");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.LootPackId)
                    .HasColumnName("loot_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ProjectileDelay)
                    .HasColumnName("projectile_delay")
                    .HasColumnType("int");

                entity.Property(e => e.ProjectileId)
                    .HasColumnName("projectile_id")
                    .HasColumnType("int");

                entity.Property(e => e.Ratio).HasColumnName("ratio");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Projectile)
                    .WithMany(p => p.DoodadFuncPuzzleOuts)
                    .HasForeignKey(d => d.ProjectileId);

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.DoodadFuncPuzzleOuts)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<DoodadFuncPuzzleRolls>(entity =>
            {
                entity.ToTable("doodad_func_puzzle_rolls");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncPuzzleRolls)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncQuests>(entity =>
            {
                entity.ToTable("doodad_func_quests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestKindId)
                    .HasColumnName("quest_kind_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncRatioChanges>(entity =>
            {
                entity.ToTable("doodad_func_ratio_changes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.Ratio)
                    .HasColumnName("ratio")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncRatioRespawns>(entity =>
            {
                entity.ToTable("doodad_func_ratio_respawns");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Ratio)
                    .HasColumnName("ratio")
                    .HasColumnType("int");

                entity.Property(e => e.SpawnDoodadId)
                    .HasColumnName("spawn_doodad_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncReactDevotes>(entity =>
            {
                entity.ToTable("doodad_func_react_devotes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.TooltipText).HasColumnName("tooltip_text");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DoodadFuncReactDevotes)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DoodadFuncRecoverItems>(entity =>
            {
                entity.ToTable("doodad_func_recover_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncRemoveInstances>(entity =>
            {
                entity.ToTable("doodad_func_remove_instances");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.DoodadFuncRemoveInstances)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<DoodadFuncRemoveItems>(entity =>
            {
                entity.ToTable("doodad_func_remove_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncRemoveItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncRenewItems>(entity =>
            {
                entity.ToTable("doodad_func_renew_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DoodadFuncRenewItems)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DoodadFuncReqBattleFields>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_req_battle_fields");

                entity.Property(e => e.Corp).HasColumnName("corp");

                entity.Property(e => e.FieldId).HasColumnName("field_id");

                entity.Property(e => e.Id).HasColumnName("id");
            });

            modelBuilder.Entity<DoodadFuncRequireItems>(entity =>
            {
                entity.ToTable("doodad_func_require_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncRequireItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncRequireQuests>(entity =>
            {
                entity.ToTable("doodad_func_require_quests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncResidentBalances>(entity =>
            {
                entity.ToTable("doodad_func_resident_balances");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.TooltipText).HasColumnName("tooltip_text");
            });

            modelBuilder.Entity<DoodadFuncResidentTownhallUiOpens>(entity =>
            {
                entity.ToTable("doodad_func_resident_townhall_ui_opens");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncRespawns>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_respawns");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.MaxTime)
                    .HasColumnName("max_time")
                    .HasColumnType("INT");

                entity.Property(e => e.MinTime)
                    .HasColumnName("min_time")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<DoodadFuncRockMines>(entity =>
            {
                entity.ToTable("doodad_func_rock_mines");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncSeedCollects>(entity =>
            {
                entity.ToTable("doodad_func_seed_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncShears>(entity =>
            {
                entity.ToTable("doodad_func_shears");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ShearTerm)
                    .HasColumnName("shear_term")
                    .HasColumnType("int");

                entity.Property(e => e.ShearTypeId)
                    .HasColumnName("shear_type_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncSiegeAuctions>(entity =>
            {
                entity.ToTable("doodad_func_siege_auctions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncSiegePeriods>(entity =>
            {
                entity.ToTable("doodad_func_siege_periods");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Defense)
                    .HasColumnName("defense")
                    .HasColumnType("bool");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.SiegePeriodId)
                    .HasColumnName("siege_period_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncSigns>(entity =>
            {
                entity.ToTable("doodad_func_signs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PickNum)
                    .HasColumnName("pick_num")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncSkillHits>(entity =>
            {
                entity.ToTable("doodad_func_skill_hits");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DoodadFuncSkillHits)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DoodadFuncSkinOffs>(entity =>
            {
                entity.ToTable("doodad_func_skin_offs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncSoilCollects>(entity =>
            {
                entity.ToTable("doodad_func_soil_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncSpawnGimmicks>(entity =>
            {
                entity.ToTable("doodad_func_spawn_gimmicks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AngleX).HasColumnName("angle_x");

                entity.Property(e => e.AngleY).HasColumnName("angle_y");

                entity.Property(e => e.AngleZ).HasColumnName("angle_z");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.GimmickId)
                    .HasColumnName("gimmick_id")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.OffsetX).HasColumnName("offset_x");

                entity.Property(e => e.OffsetY).HasColumnName("offset_y");

                entity.Property(e => e.OffsetZ).HasColumnName("offset_z");

                entity.Property(e => e.Scale).HasColumnName("scale");

                entity.Property(e => e.VelocityX).HasColumnName("velocity_x");

                entity.Property(e => e.VelocityY).HasColumnName("velocity_y");

                entity.Property(e => e.VelocityZ).HasColumnName("velocity_z");

                entity.HasOne(d => d.Gimmick)
                    .WithMany(p => p.DoodadFuncSpawnGimmicks)
                    .HasForeignKey(d => d.GimmickId);
            });

            modelBuilder.Entity<DoodadFuncSpawnMgmts>(entity =>
            {
                entity.ToTable("doodad_func_spawn_mgmts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Spawn)
                    .HasColumnName("spawn")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.DoodadFuncSpawnMgmts)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<DoodadFuncSpawns>(entity =>
            {
                entity.ToTable("doodad_func_spawns");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DespawnOnCreatorDeath)
                    .HasColumnName("despawn_on_creator_death")
                    .HasColumnType("bool");

                entity.Property(e => e.LifeTime).HasColumnName("life_time");

                entity.Property(e => e.MateStateId)
                    .HasColumnName("mate_state_id")
                    .HasColumnType("int");

                entity.Property(e => e.OriAngle).HasColumnName("ori_angle");

                entity.Property(e => e.OriDirId)
                    .HasColumnName("ori_dir_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerTypeId)
                    .HasColumnName("owner_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.PosAngleMax).HasColumnName("pos_angle_max");

                entity.Property(e => e.PosAngleMin).HasColumnName("pos_angle_min");

                entity.Property(e => e.PosDirId)
                    .HasColumnName("pos_dir_id")
                    .HasColumnType("int");

                entity.Property(e => e.PosDistanceMax).HasColumnName("pos_distance_max");

                entity.Property(e => e.PosDistanceMin).HasColumnName("pos_distance_min");

                entity.Property(e => e.SubType)
                    .HasColumnName("sub_type")
                    .HasColumnType("int");

                entity.Property(e => e.UseSummonerAggroTarget)
                    .HasColumnName("use_summoner_aggro_target")
                    .HasColumnType("bool");

                entity.Property(e => e.UseSummonerFaction)
                    .HasColumnName("use_summoner_faction")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<DoodadFuncSpiceCollects>(entity =>
            {
                entity.ToTable("doodad_func_spice_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncStampMakers>(entity =>
            {
                entity.ToTable("doodad_func_stamp_makers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConsumeAll)
                    .HasColumnName("consume_all")
                    .HasColumnType("bool");

                entity.Property(e => e.ConsumeCount)
                    .HasColumnName("consume_count")
                    .HasColumnType("int");

                entity.Property(e => e.ConsumeItemId)
                    .HasColumnName("consume_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ConsumeItemSetId)
                    .HasColumnName("consume_item_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.ConsumeMoney)
                    .HasColumnName("consume_money")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DoodadFuncStampMakers)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<DoodadFuncStoreUis>(entity =>
            {
                entity.ToTable("doodad_func_store_uis");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.MerchantPackId)
                    .HasColumnName("merchant_pack_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncTimers>(entity =>
            {
                entity.ToTable("doodad_func_timers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Delay)
                    .HasColumnName("delay")
                    .HasColumnType("int");

                entity.Property(e => e.KeepRequester)
                    .HasColumnName("keep_requester")
                    .HasColumnType("bool");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ShowEndTime)
                    .HasColumnName("show_end_time")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowTip)
                    .HasColumnName("show_tip")
                    .HasColumnType("bool");

                entity.Property(e => e.Tip).HasColumnName("tip");
            });

            modelBuilder.Entity<DoodadFuncTods>(entity =>
            {
                entity.ToTable("doodad_func_tods");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.Tod)
                    .HasColumnName("tod")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DoodadFuncTreeByproductsCollects>(entity =>
            {
                entity.ToTable("doodad_func_tree_byproducts_collects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncUccImprints>(entity =>
            {
                entity.ToTable("doodad_func_ucc_imprints");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<DoodadFuncUses>(entity =>
            {
                entity.ToTable("doodad_func_uses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.DoodadFuncUses)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<DoodadFuncVegetationGrowths>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_func_vegetation_growths");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.StepOneEndScale)
                    .HasColumnName("step_one_end_scale")
                    .HasColumnType("INT");

                entity.Property(e => e.StepOneModel).HasColumnName("step_one_model");

                entity.Property(e => e.StepOneStartScale)
                    .HasColumnName("step_one_start_scale")
                    .HasColumnType("INT");

                entity.Property(e => e.StepOneTime)
                    .HasColumnName("step_one_time")
                    .HasColumnType("INT");

                entity.Property(e => e.StepThreeEndScale)
                    .HasColumnName("step_three_end_scale")
                    .HasColumnType("INT");

                entity.Property(e => e.StepThreeModel).HasColumnName("step_three_model");

                entity.Property(e => e.StepThreeStartScale)
                    .HasColumnName("step_three_start_scale")
                    .HasColumnType("INT");

                entity.Property(e => e.StepThreeTime)
                    .HasColumnName("step_three_time")
                    .HasColumnType("INT");

                entity.Property(e => e.StepTwoEndScale)
                    .HasColumnName("step_two_end_scale")
                    .HasColumnType("INT");

                entity.Property(e => e.StepTwoModel).HasColumnName("step_two_model");

                entity.Property(e => e.StepTwoStartScale)
                    .HasColumnName("step_two_start_scale")
                    .HasColumnType("INT");

                entity.Property(e => e.StepTwoTime)
                    .HasColumnName("step_two_time")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<DoodadFuncWaterVolumes>(entity =>
            {
                entity.ToTable("doodad_func_water_volumes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.LevelChange).HasColumnName("levelChange");
            });

            modelBuilder.Entity<DoodadFuncZoneReacts>(entity =>
            {
                entity.ToTable("doodad_func_zone_reacts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.DoodadFuncZoneReacts)
                    .HasForeignKey(d => d.ZoneGroupId);
            });

            modelBuilder.Entity<DoodadFuncs>(entity =>
            {
                entity.ToTable("doodad_funcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActCount)
                    .HasColumnName("act_count")
                    .HasColumnType("int");

                entity.Property(e => e.ActualFuncId)
                    .HasColumnName("actual_func_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActualFuncType).HasColumnName("actual_func_type");

                entity.Property(e => e.DoodadFuncGroupId)
                    .HasColumnName("doodad_func_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ForbidOnClimb)
                    .HasColumnName("forbid_on_climb")
                    .HasColumnType("bool");

                entity.Property(e => e.FuncSkillId)
                    .HasColumnName("func_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.NextPhase)
                    .HasColumnName("next_phase")
                    .HasColumnType("int");

                entity.Property(e => e.PermId)
                    .HasColumnName("perm_id")
                    .HasColumnType("int");

                entity.Property(e => e.PopupWarn)
                    .HasColumnName("popup_warn")
                    .HasColumnType("bool");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DoodadFuncGroup)
                    .WithMany(p => p.DoodadFuncs)
                    .HasForeignKey(d => d.DoodadFuncGroupId);

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.DoodadFuncs)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<DoodadGroups>(entity =>
            {
                entity.ToTable("doodad_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GuardOnFieldTime)
                    .HasColumnName("guard_on_field_time")
                    .HasColumnType("int");

                entity.Property(e => e.IsExport)
                    .HasColumnName("is_export")
                    .HasColumnType("bool");

                entity.Property(e => e.RemovedByHouse)
                    .HasColumnName("removed_by_house")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<DoodadHarvests>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("doodad_harvests");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.PhaseId).HasColumnName("phase_id");
            });

            modelBuilder.Entity<DoodadItemChangeEffects>(entity =>
            {
                entity.ToTable("doodad_item_change_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Idx)
                    .HasColumnName("idx")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<DoodadModifiers>(entity =>
            {
                entity.HasKey(o => new { o.TagId });

                entity.ToTable("doodad_modifiers");

                entity.Property(e => e.DoodadAttributeId)
                    .HasColumnName("doodad_attribute_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnitModifierTypeId)
                    .HasColumnName("unit_modifier_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("int");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.DoodadModifiers)
                    .HasForeignKey(d => d.TagId);
            });
            
            modelBuilder.Entity<DoodadPhaseFuncs>(entity =>
            {
                entity.ToTable("doodad_phase_funcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualFuncId)
                    .HasColumnName("actual_func_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActualFuncType).HasColumnName("actual_func_type");

                entity.Property(e => e.DoodadFuncGroupId)
                    .HasColumnName("doodad_func_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DoodadFuncGroup)
                    .WithMany(p => p.DoodadPhaseFuncs)
                    .HasForeignKey(d => d.DoodadFuncGroupId);
            });

            modelBuilder.Entity<DoodadPlaceSkins>(entity =>
            {
                entity.ToTable("doodad_place_skins");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadAlmightyId)
                    .HasColumnName("doodad_almighty_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadPlaceSkinKindId)
                    .HasColumnName("doodad_place_skin_kind_id")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<DyeableItems>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("dyeable_items");

                entity.Property(e => e.DefaultDyeingItemId)
                    .HasColumnName("default_dyeing_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.DyeableItems)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<DyeingColors>(entity =>
            {
                entity.ToTable("dyeing_colors");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ColorRgb)
                    .HasColumnName("color_rgb")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DynamicFuncs>(entity =>
            {
                entity.ToTable("dynamic_funcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<DynamicUnitModifiers>(entity =>
            {
                entity.ToTable("dynamic_unit_modifiers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.FuncId)
                    .HasColumnName("func_id")
                    .HasColumnType("int");

                entity.Property(e => e.FuncType).HasColumnName("func_type");

                entity.Property(e => e.UnitAttributeId)
                    .HasColumnName("unit_attribute_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnitModifierTypeId)
                    .HasColumnName("unit_modifier_type_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.DynamicUnitModifiers)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<Effects>(entity =>
            {
                entity.ToTable("effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualId)
                    .HasColumnName("actual_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActualType).HasColumnName("actual_type");
            });

            modelBuilder.Entity<EmblemPatterns>(entity =>
            {
                entity.ToTable("emblem_patterns");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Path).HasColumnName("path");
            });

            modelBuilder.Entity<EnhancedItemMaterialArmorDefaults>(entity =>
            {
                entity.ToTable("enhanced_item_material_armor_defaults");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.EnhancedItemMaterialId)
                    .HasColumnName("enhanced_item_material_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxGradeId)
                    .HasColumnName("max_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.MinGradeId)
                    .HasColumnName("min_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.EnhancedItemMaterial)
                    .WithMany(p => p.EnhancedItemMaterialArmorDefaults)
                    .HasForeignKey(d => d.EnhancedItemMaterialId);
            });

            modelBuilder.Entity<EnhancedItemMaterialWeaponDefaults>(entity =>
            {
                entity.ToTable("enhanced_item_material_weapon_defaults");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.EnhancedItemMaterialId)
                    .HasColumnName("enhanced_item_material_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxGradeId)
                    .HasColumnName("max_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.MinGradeId)
                    .HasColumnName("min_grade_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.EnhancedItemMaterial)
                    .WithMany(p => p.EnhancedItemMaterialWeaponDefaults)
                    .HasForeignKey(d => d.EnhancedItemMaterialId);
            });

            modelBuilder.Entity<EnhancedItemMaterials>(entity =>
            {
                entity.ToTable("enhanced_item_materials");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Filename).HasColumnName("filename");
            });

            modelBuilder.Entity<EquipItemAttrModifiers>(entity =>
            {
                entity.ToTable("equip_item_attr_modifiers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Alias).HasColumnName("alias");

                entity.Property(e => e.DexWeight)
                    .HasColumnName("dex_weight")
                    .HasColumnType("int");

                entity.Property(e => e.IntWeight)
                    .HasColumnName("int_weight")
                    .HasColumnType("int");

                entity.Property(e => e.SpiWeight)
                    .HasColumnName("spi_weight")
                    .HasColumnType("int");

                entity.Property(e => e.StaWeight)
                    .HasColumnName("sta_weight")
                    .HasColumnType("int");

                entity.Property(e => e.StrWeight)
                    .HasColumnName("str_weight")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<EquipItemSetBonuses>(entity =>
            {
                entity.ToTable("equip_item_set_bonuses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipItemSetId)
                    .HasColumnName("equip_item_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.NumPieces)
                    .HasColumnName("num_pieces")
                    .HasColumnType("int");

                entity.Property(e => e.ProcId)
                    .HasColumnName("proc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.EquipItemSetBonuses)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.EquipItemSet)
                    .WithMany(p => p.EquipItemSetBonuses)
                    .HasForeignKey(d => d.EquipItemSetId);
            });

            modelBuilder.Entity<EquipItemSets>(entity =>
            {
                entity.ToTable("equip_item_sets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Wear)
                    .HasColumnName("wear")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<EquipPackBodyParts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("equip_pack_body_parts");

                entity.Property(e => e.BeardId)
                    .HasColumnName("beard_id")
                    .HasColumnType("INT");

                entity.Property(e => e.BodyDiffuseMapId)
                    .HasColumnName("body_diffuse_map_id")
                    .HasColumnType("INT");

                entity.Property(e => e.FaceId)
                    .HasColumnName("face_id")
                    .HasColumnType("INT");

                entity.Property(e => e.HairColorId)
                    .HasColumnName("hair_color_id")
                    .HasColumnType("INT");

                entity.Property(e => e.HairId)
                    .HasColumnName("hair_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.SkinColorId)
                    .HasColumnName("skin_color_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<EquipPackCloths>(entity =>
            {
                entity.ToTable("equip_pack_cloths");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BackGradeId)
                    .HasColumnName("back_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.BackId)
                    .HasColumnName("back_id")
                    .HasColumnType("int");

                entity.Property(e => e.BackpackGradeId)
                    .HasColumnName("backpack_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.BackpackId)
                    .HasColumnName("backpack_id")
                    .HasColumnType("int");

                entity.Property(e => e.BeltGradeId)
                    .HasColumnName("belt_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.BeltId)
                    .HasColumnName("belt_id")
                    .HasColumnType("int");

                entity.Property(e => e.BraceletGradeId)
                    .HasColumnName("bracelet_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.BraceletId)
                    .HasColumnName("bracelet_id")
                    .HasColumnType("int");

                entity.Property(e => e.CosplayGradeId)
                    .HasColumnName("cosplay_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.CosplayId)
                    .HasColumnName("cosplay_id")
                    .HasColumnType("int");

                entity.Property(e => e.GloveGradeId)
                    .HasColumnName("glove_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.GloveId)
                    .HasColumnName("glove_id")
                    .HasColumnType("int");

                entity.Property(e => e.HeadgearGradeId)
                    .HasColumnName("headgear_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.HeadgearId)
                    .HasColumnName("headgear_id")
                    .HasColumnType("int");

                entity.Property(e => e.NecklaceGradeId)
                    .HasColumnName("necklace_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.NecklaceId)
                    .HasColumnName("necklace_id")
                    .HasColumnType("int");

                entity.Property(e => e.PantsGradeId)
                    .HasColumnName("pants_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.PantsId)
                    .HasColumnName("pants_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShirtGradeId)
                    .HasColumnName("shirt_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShirtId)
                    .HasColumnName("shirt_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShoesGradeId)
                    .HasColumnName("shoes_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShoesId)
                    .HasColumnName("shoes_id")
                    .HasColumnType("int");

                entity.Property(e => e.StabilizerGradeId)
                    .HasColumnName("stabilizer_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.StabilizerId)
                    .HasColumnName("stabilizer_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnderpantsGradeId)
                    .HasColumnName("underpants_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnderpantsId)
                    .HasColumnName("underpants_id")
                    .HasColumnType("int");

                entity.Property(e => e.UndershirtGradeId)
                    .HasColumnName("undershirt_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.UndershirtId)
                    .HasColumnName("undershirt_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<EquipPackWeapons>(entity =>
            {
                entity.ToTable("equip_pack_weapons");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.MainhandGradeId)
                    .HasColumnName("mainhand_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.MainhandId)
                    .HasColumnName("mainhand_id")
                    .HasColumnType("int");

                entity.Property(e => e.MusicalGradeId)
                    .HasColumnName("musical_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.MusicalId)
                    .HasColumnName("musical_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffhandGradeId)
                    .HasColumnName("offhand_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffhandId)
                    .HasColumnName("offhand_id")
                    .HasColumnType("int");

                entity.Property(e => e.RangedGradeId)
                    .HasColumnName("ranged_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.RangedId)
                    .HasColumnName("ranged_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<EquipSlotEnchantingCosts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("equip_slot_enchanting_costs");

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<EquipSlotGroupMaps>(entity =>
            {
                entity.ToTable("equip_slot_group_maps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EquipSlotGroupId)
                    .HasColumnName("equip_slot_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipSlotTypeId)
                    .HasColumnName("equip_slot_type_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.EquipSlotGroup)
                    .WithMany(p => p.EquipSlotGroupMaps)
                    .HasForeignKey(d => d.EquipSlotGroupId);
            });

            modelBuilder.Entity<EquipSlotGroups>(entity =>
            {
                entity.ToTable("equip_slot_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.PetOnly)
                    .HasColumnName("pet_only")
                    .HasColumnType("bool");
            });
            
            modelBuilder.Entity<ExpandExpertLimits>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("expand_expert_limits");

                entity.Property(e => e.ExpandCount)
                    .HasColumnName("expand_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.LifePoint)
                    .HasColumnName("life_point")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ExpandExpertLimits)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ExpeditionLevelBuffs>(entity =>
            {
                entity.ToTable("expedition_level_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ExpeditionLevelId)
                    .HasColumnName("expedition_level_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.ExpeditionLevelBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.ExpeditionLevel)
                    .WithMany(p => p.ExpeditionLevelBuffs)
                    .HasForeignKey(d => d.ExpeditionLevelId);
            });

            modelBuilder.Entity<ExpeditionLevelReqs>(entity =>
            {
                entity.ToTable("expedition_level_reqs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.ExpeditionLevelId)
                    .HasColumnName("expedition_level_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ExpeditionLevel)
                    .WithMany(p => p.ExpeditionLevelReqs)
                    .HasForeignKey(d => d.ExpeditionLevelId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ExpeditionLevelReqs)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ExpeditionLevels>(entity =>
            {
                entity.ToTable("expedition_levels");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DailyExp)
                    .HasColumnName("daily_exp")
                    .HasColumnType("int");

                entity.Property(e => e.MemberLimit)
                    .HasColumnName("member_limit")
                    .HasColumnType("int");

                entity.Property(e => e.NeedMoney)
                    .HasColumnName("need_money")
                    .HasColumnType("int");

                entity.Property(e => e.SimilarBuffTagId)
                    .HasColumnName("similar_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.SummonLimit)
                    .HasColumnName("summon_limit")
                    .HasColumnType("int");

                entity.Property(e => e.TotalExp)
                    .HasColumnName("total_exp")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ExpertLimits>(entity =>
            {
                entity.ToTable("expert_limits");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Advantage)
                    .HasColumnName("advantage")
                    .HasColumnType("int");

                entity.Property(e => e.CastAdv)
                    .HasColumnName("cast_adv")
                    .HasColumnType("int");

                entity.Property(e => e.ColorArgb)
                    .HasColumnName("color_argb")
                    .HasColumnType("int");

                entity.Property(e => e.DownCurrencyId)
                    .HasColumnName("down_currency_id")
                    .HasColumnType("int");

                entity.Property(e => e.DownPrice)
                    .HasColumnName("down_price")
                    .HasColumnType("int");

                entity.Property(e => e.ExpMul)
                    .HasColumnName("exp_mul")
                    .HasColumnType("int");

                entity.Property(e => e.ExpertLimit)
                    .HasColumnName("expert_limit")
                    .HasColumnType("int");

                entity.Property(e => e.GaugeColor)
                    .HasColumnName("gauge_color")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Show)
                    .HasColumnName("show")
                    .HasColumnType("bool");

                entity.Property(e => e.UpCurrencyId)
                    .HasColumnName("up_currency_id")
                    .HasColumnType("int");

                entity.Property(e => e.UpLimit)
                    .HasColumnName("up_limit")
                    .HasColumnType("int");

                entity.Property(e => e.UpPrice)
                    .HasColumnName("up_price")
                    .HasColumnType("int");

                entity.Property(e => e.UseIntensified)
                    .HasColumnName("use_intensified")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<ExpressTexts>(entity =>
            {
                entity.ToTable("express_texts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AnimId)
                    .HasColumnName("anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.Me).HasColumnName("me");

                entity.Property(e => e.MeTarget).HasColumnName("me_target");

                entity.Property(e => e.NpcAnimId)
                    .HasColumnName("npc_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.Other).HasColumnName("other");

                entity.Property(e => e.OtherMe).HasColumnName("other_me");

                entity.Property(e => e.OtherTarget).HasColumnName("other_target");

                entity.HasOne(d => d.Anim)
                    .WithMany(p => p.ExpressTexts)
                    .HasForeignKey(d => d.AnimId);
            });

            modelBuilder.Entity<FaceDecalAssets>(entity =>
            {
                entity.ToTable("face_decal_assets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetPath).HasColumnName("asset_path");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultX)
                    .HasColumnName("defaultX")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultY)
                    .HasColumnName("defaultY")
                    .HasColumnType("int");

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("int");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.IsNew)
                    .HasColumnName("is_new")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Movable)
                    .HasColumnName("movable")
                    .HasColumnType("bool");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NpcOnly)
                    .HasColumnName("npc_only")
                    .HasColumnType("bool");

                entity.Property(e => e.OddEyeInfo).HasColumnName("odd_eye_info");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.FaceDecalAssets)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.FaceDecalAssets)
                    .HasForeignKey(d => d.ModelId);
            });

            modelBuilder.Entity<FaceDiffuseMaps>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("face_diffuse_maps");

                entity.Property(e => e.Diffuse).HasColumnName("diffuse");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("id");

                entity.Property(e => e.ModelId).HasColumnName("model_id");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NpcOnly).HasColumnName("npc_only");
            });

            modelBuilder.Entity<FaceEyelashMaps>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("face_eyelash_maps");

                entity.Property(e => e.Eyelash).HasColumnName("eyelash");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("id");

                entity.Property(e => e.ModelId).HasColumnName("model_id");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NpcOnly).HasColumnName("npc_only");
            });

            modelBuilder.Entity<FaceNormalMaps>(entity =>
            {
                entity.ToTable("face_normal_maps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("int");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.IsNew)
                    .HasColumnName("is_new")
                    .HasColumnType("bool");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Normal).HasColumnName("normal");

                entity.Property(e => e.NpcOnly)
                    .HasColumnName("npc_only")
                    .HasColumnType("bool");

                entity.Property(e => e.Specular).HasColumnName("specular");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.FaceNormalMaps)
                    .HasForeignKey(d => d.ModelId);
            });

            modelBuilder.Entity<FactionChatRegions>(entity =>
            {
                entity.ToTable("faction_chat_regions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<FamilyLevels>(entity =>
            {
                entity.ToTable("family_levels");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.Exp)
                    .HasColumnName("exp")
                    .HasColumnType("int");

                entity.Property(e => e.GradeName).HasColumnName("grade_name");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.FamilyLevels)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<FamilyMemberLimits>(entity =>
            {
                entity.ToTable("family_member_limits");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.FamilyMemberLimits)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<FamilyRoles>(entity =>
            {
                entity.ToTable("family_roles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.RoleCount)
                    .HasColumnName("role_count")
                    .HasColumnType("int");

                entity.Property(e => e.RoleName).HasColumnName("role_name");

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.FamilyRoles)
                    .HasForeignKey(d => d.IconId);
            });

            modelBuilder.Entity<FarmGroupDoodads>(entity =>
            {
                entity.ToTable("farm_group_doodads");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.FarmGroupId)
                    .HasColumnName("farm_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.FarmGroup)
                    .WithMany(p => p.FarmGroupDoodads)
                    .HasForeignKey(d => d.FarmGroupId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.FarmGroupDoodads)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<FarmGroups>(entity =>
            {
                entity.ToTable("farm_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name).HasColumnName("name");
            });
            
            modelBuilder.Entity<FestivalZones>(entity =>
            {
                entity.HasKey(o => new { o.ZoneGroupId });

                entity.ToTable("festival_zones");

                entity.Property(e => e.Closed)
                    .HasColumnName("closed")
                    .HasColumnType("bool");

                entity.Property(e => e.EdDay)
                    .HasColumnName("ed_day")
                    .HasColumnType("int");

                entity.Property(e => e.EdHour)
                    .HasColumnName("ed_hour")
                    .HasColumnType("int");

                entity.Property(e => e.EdMin)
                    .HasColumnName("ed_min")
                    .HasColumnType("int");

                entity.Property(e => e.EdMonth)
                    .HasColumnName("ed_month")
                    .HasColumnType("int");

                entity.Property(e => e.EdYear)
                    .HasColumnName("ed_year")
                    .HasColumnType("int");

                entity.Property(e => e.HariharaReturnPointId)
                    .HasColumnName("harihara_return_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NationReturnPointId)
                    .HasColumnName("nation_return_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.NuiaReturnPointId)
                    .HasColumnName("nuia_return_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.PirateReturnPointId)
                    .HasColumnName("pirate_return_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.StDay)
                    .HasColumnName("st_day")
                    .HasColumnType("int");

                entity.Property(e => e.StHour)
                    .HasColumnName("st_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StMin)
                    .HasColumnName("st_min")
                    .HasColumnType("int");

                entity.Property(e => e.StMonth)
                    .HasColumnName("st_month")
                    .HasColumnType("int");

                entity.Property(e => e.StYear)
                    .HasColumnName("st_year")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.FestivalZones)
                    .HasForeignKey(d => d.ZoneGroupId);
            });
            
            modelBuilder.Entity<FishDetails>(entity =>
            {
                entity.ToTable("fish_details");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxLength)
                    .HasColumnName("max_length")
                    .HasColumnType("int");

                entity.Property(e => e.MaxWeight)
                    .HasColumnName("max_weight")
                    .HasColumnType("int");

                entity.Property(e => e.MinLength)
                    .HasColumnName("min_length")
                    .HasColumnType("int");

                entity.Property(e => e.MinWeight)
                    .HasColumnName("min_weight")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.FishDetails)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<FlyingStateChangeEffects>(entity =>
            {
                entity.ToTable("flying_state_change_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FlyingState)
                    .HasColumnName("flying_state")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<Formulas>(entity =>
            {
                entity.ToTable("formulas");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Formula).HasColumnName("formula");
            });

            modelBuilder.Entity<FreshnessGroupItems>(entity =>
            {
                entity.ToTable("freshness_group_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FreshnessGroupId)
                    .HasColumnName("freshness_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.RewardRate)
                    .HasColumnName("reward_rate")
                    .HasColumnType("int");

                entity.Property(e => e.Time)
                    .HasColumnName("time")
                    .HasColumnType("int");

                entity.Property(e => e.Tooltip).HasColumnName("tooltip");

                entity.HasOne(d => d.FreshnessGroup)
                    .WithMany(p => p.FreshnessGroupItems)
                    .HasForeignKey(d => d.FreshnessGroupId);
            });

            modelBuilder.Entity<FreshnessGroups>(entity =>
            {
                entity.ToTable("freshness_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<FxCamFovs>(entity =>
            {
                entity.ToTable("fx_cam_fovs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CamFov).HasColumnName("camFov");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.FadeIn).HasColumnName("fadeIn");

                entity.Property(e => e.FadeOut).HasColumnName("fadeOut");
            });

            modelBuilder.Entity<FxCgas>(entity =>
            {
                entity.ToTable("fx_cgas");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<FxCgfs>(entity =>
            {
                entity.ToTable("fx_cgfs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<FxChrs>(entity =>
            {
                entity.ToTable("fx_chrs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BindToBoneAfterEnd)
                    .HasColumnName("bind_to_bone_after_end")
                    .HasColumnType("bool");

                entity.Property(e => e.Scale).HasColumnName("scale");
            });

            modelBuilder.Entity<FxDecals>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("fx_decals");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Radius).HasColumnName("radius");
            });
            
            modelBuilder.Entity<FxGroupFxItems>(entity =>
            {
                entity.HasKey(o => new { o.FxGroupId, o.FxItemId });

                entity.ToTable("fx_group_fx_items");

                entity.Property(e => e.FxGroupId)
                    .HasColumnName("fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.FxItemId)
                    .HasColumnName("fx_item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.FxGroup)
                    .WithMany(p => p.FxGroupFxItems)
                    .HasForeignKey(d => d.FxGroupId);

                entity.HasOne(d => d.FxItem)
                    .WithMany(p => p.FxGroupFxItems)
                    .HasForeignKey(d => d.FxItemId);
            });
            
            modelBuilder.Entity<FxGroups>(entity =>
            {
                entity.ToTable("fx_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<FxItems>(entity =>
            {
                entity.ToTable("fx_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetName).HasColumnName("asset_name");

                entity.Property(e => e.BoneId)
                    .HasColumnName("bone_id")
                    .HasColumnType("int");

                entity.Property(e => e.FxDetailId)
                    .HasColumnName("fx_detail_id")
                    .HasColumnType("int");

                entity.Property(e => e.FxDetailType).HasColumnName("fx_detail_type");

                entity.Property(e => e.FxEventEndId)
                    .HasColumnName("fx_event_end_id")
                    .HasColumnType("int");

                entity.Property(e => e.FxEventStartId)
                    .HasColumnName("fx_event_start_id")
                    .HasColumnType("int");

                entity.Property(e => e.FxLocationId)
                    .HasColumnName("fx_location_id")
                    .HasColumnType("int");

                entity.Property(e => e.FxScaleId)
                    .HasColumnName("fx_scale_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffsetAxisId)
                    .HasColumnName("offset_axis_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffsetX).HasColumnName("offset_x");

                entity.Property(e => e.OffsetY).HasColumnName("offset_y");

                entity.Property(e => e.OffsetZ).HasColumnName("offset_z");
            });

            modelBuilder.Entity<FxMaterials>(entity =>
            {
                entity.ToTable("fx_materials");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CustomDualMaterialFadeTime).HasColumnName("custom_dual_material_fade_time");

                entity.Property(e => e.CustomDualMaterialId)
                    .HasColumnName("custom_dual_material_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.CustomDualMaterial)
                    .WithMany(p => p.FxMaterials)
                    .HasForeignKey(d => d.CustomDualMaterialId);
            });

            modelBuilder.Entity<FxMotionBlurs>(entity =>
            {
                entity.ToTable("fx_motion_blurs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<FxParticles>(entity =>
            {
                entity.ToTable("fx_particles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.InWater)
                    .HasColumnName("in_water")
                    .HasColumnType("bool");

                entity.Property(e => e.Scale).HasColumnName("scale");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundPackId)
                    .HasColumnName("sound_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.FxParticles)
                    .HasForeignKey(d => d.SoundId);

                entity.HasOne(d => d.SoundPack)
                    .WithMany(p => p.FxParticles)
                    .HasForeignKey(d => d.SoundPackId);
            });

            modelBuilder.Entity<FxRopes>(entity =>
            {
                entity.ToTable("fx_ropes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AnchorModelPath).HasColumnName("anchor_model_path");

                entity.Property(e => e.AttachmentCollision)
                    .HasColumnName("attachment_collision")
                    .HasColumnType("bool");

                entity.Property(e => e.Collision)
                    .HasColumnName("collision")
                    .HasColumnType("bool");

                entity.Property(e => e.LauncherModelPath).HasColumnName("launcher_model_path");

                entity.Property(e => e.Length).HasColumnName("length");

                entity.Property(e => e.Material).HasColumnName("material");

                entity.Property(e => e.PhyscisSegment)
                    .HasColumnName("physcis_segment")
                    .HasColumnType("int");

                entity.Property(e => e.Segment)
                    .HasColumnName("segment")
                    .HasColumnType("int");

                entity.Property(e => e.SideCount)
                    .HasColumnName("side_count")
                    .HasColumnType("int");

                entity.Property(e => e.Smooth)
                    .HasColumnName("smooth")
                    .HasColumnType("bool");

                entity.Property(e => e.Subdivide)
                    .HasColumnName("subdivide")
                    .HasColumnType("bool");

                entity.Property(e => e.Thickness).HasColumnName("thickness");
            });

            modelBuilder.Entity<FxShakeCameras>(entity =>
            {
                entity.ToTable("fx_shake_cameras");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AngX).HasColumnName("ang_x");

                entity.Property(e => e.AngY).HasColumnName("ang_y");

                entity.Property(e => e.AngZ).HasColumnName("ang_z");

                entity.Property(e => e.Duration).HasColumnName("duration");

                entity.Property(e => e.Frequency).HasColumnName("frequency");

                entity.Property(e => e.Randomness).HasColumnName("randomness");

                entity.Property(e => e.Range).HasColumnName("range");

                entity.Property(e => e.ShiftX).HasColumnName("shift_x");

                entity.Property(e => e.ShiftY).HasColumnName("shift_y");

                entity.Property(e => e.ShiftZ).HasColumnName("shift_z");
            });

            modelBuilder.Entity<FxSounds>(entity =>
            {
                entity.ToTable("fx_sounds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.FxSounds)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<FxVoices>(entity =>
            {
                entity.ToTable("fx_voices");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SoundPackItemName).HasColumnName("sound_pack_item_name");
            });
            
            modelBuilder.Entity<GachaLootPackItems>(entity =>
            {
                entity.HasKey(o => new { o.GachaLootPackId, o.ItemId });

                entity.ToTable("gacha_loot_pack_items");

                entity.Property(e => e.GachaLootPackId)
                    .HasColumnName("gacha_loot_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Kind)
                    .HasColumnName("kind")
                    .HasColumnType("int");

                entity.HasOne(d => d.GachaLootPack)
                    .WithMany(p => p.GachaLootPackItems)
                    .HasForeignKey(d => d.GachaLootPackId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.GachaLootPackItems)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<GachaLootPacks>(entity =>
            {
                entity.ToTable("gacha_loot_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasColumnType("bool");

                entity.Property(e => e.LootPackId)
                    .HasColumnName("loot_pack_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<GainLootPackItemEffects>(entity =>
            {
                entity.ToTable("gain_loot_pack_item_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConsumeCount)
                    .HasColumnName("consume_count")
                    .HasColumnType("int");

                entity.Property(e => e.ConsumeItemId)
                    .HasColumnName("consume_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ConsumeSourceItem)
                    .HasColumnName("consume_source_item")
                    .HasColumnType("bool");

                entity.Property(e => e.InheritGrade)
                    .HasColumnName("inherit_grade")
                    .HasColumnType("bool");

                entity.Property(e => e.LootPackId)
                    .HasColumnName("loot_pack_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<GameRuleEvents>(entity =>
            {
                entity.ToTable("game_rule_events");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConditionId)
                    .HasColumnName("condition_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Param1)
                    .HasColumnName("param1")
                    .HasColumnType("int");

                entity.Property(e => e.Param2)
                    .HasColumnName("param2")
                    .HasColumnType("int");

                entity.Property(e => e.RuleSetId)
                    .HasColumnName("rule_set_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<GameRuleSets>(entity =>
            {
                entity.ToTable("game_rule_sets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BattleFieldId)
                    .HasColumnName("battle_field_id")
                    .HasColumnType("int");

                entity.Property(e => e.BonusLoser)
                    .HasColumnName("bonus_loser")
                    .HasColumnType("int");

                entity.Property(e => e.BonusNoDeath)
                    .HasColumnName("bonus_no_death")
                    .HasColumnType("int");

                entity.Property(e => e.BonusTopEnemyNonPcKill)
                    .HasColumnName("bonus_top_enemy_non_pc_kill")
                    .HasColumnType("int");

                entity.Property(e => e.BonusTopEnemyPcKill)
                    .HasColumnName("bonus_top_enemy_pc_kill")
                    .HasColumnType("int");

                entity.Property(e => e.BonusWinner)
                    .HasColumnName("bonus_winner")
                    .HasColumnType("int");

                entity.Property(e => e.Corps1Id)
                    .HasColumnName("corps1_id")
                    .HasColumnType("int");

                entity.Property(e => e.Corps2Id)
                    .HasColumnName("corps2_id")
                    .HasColumnType("int");

                entity.Property(e => e.CorpsSize)
                    .HasColumnName("corps_size")
                    .HasColumnType("int");

                entity.Property(e => e.DeathstreakId)
                    .HasColumnName("deathstreak_id")
                    .HasColumnType("int");

                entity.Property(e => e.GameRuleModeId)
                    .HasColumnName("game_rule_mode_id")
                    .HasColumnType("int");

                entity.Property(e => e.GameTypeId)
                    .HasColumnName("game_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak0Id)
                    .HasColumnName("killstreak0_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak10Id)
                    .HasColumnName("killstreak10_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak11Id)
                    .HasColumnName("killstreak11_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak12Id)
                    .HasColumnName("killstreak12_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak13Id)
                    .HasColumnName("killstreak13_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak14Id)
                    .HasColumnName("killstreak14_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak15Id)
                    .HasColumnName("killstreak15_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak16Id)
                    .HasColumnName("killstreak16_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak17Id)
                    .HasColumnName("killstreak17_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak18Id)
                    .HasColumnName("killstreak18_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak19Id)
                    .HasColumnName("killstreak19_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak1Id)
                    .HasColumnName("killstreak1_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak20Id)
                    .HasColumnName("killstreak20_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak21Id)
                    .HasColumnName("killstreak21_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak22Id)
                    .HasColumnName("killstreak22_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak23Id)
                    .HasColumnName("killstreak23_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak2Id)
                    .HasColumnName("killstreak2_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak3Id)
                    .HasColumnName("killstreak3_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak4Id)
                    .HasColumnName("killstreak4_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak5Id)
                    .HasColumnName("killstreak5_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak6Id)
                    .HasColumnName("killstreak6_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak7Id)
                    .HasColumnName("killstreak7_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak8Id)
                    .HasColumnName("killstreak8_id")
                    .HasColumnType("int");

                entity.Property(e => e.Killstreak9Id)
                    .HasColumnName("killstreak9_id")
                    .HasColumnType("int");

                entity.Property(e => e.LevelMax)
                    .HasColumnName("level_max")
                    .HasColumnType("int");

                entity.Property(e => e.LevelMin)
                    .HasColumnName("level_min")
                    .HasColumnType("int");

                entity.Property(e => e.MinCorpsSize)
                    .HasColumnName("min_corps_size")
                    .HasColumnType("int");

                entity.Property(e => e.ModeCustomData).HasColumnName("mode_custom_data");

                entity.Property(e => e.PlayRoundCount)
                    .HasColumnName("play_round_count")
                    .HasColumnType("int");

                entity.Property(e => e.RankDrawPoint)
                    .HasColumnName("rank_draw_point")
                    .HasColumnType("int");

                entity.Property(e => e.RankInvalidPoint)
                    .HasColumnName("rank_invalid_point")
                    .HasColumnType("int");

                entity.Property(e => e.RankLosePoint)
                    .HasColumnName("rank_lose_point")
                    .HasColumnType("int");

                entity.Property(e => e.RankWinPoint)
                    .HasColumnName("rank_win_point")
                    .HasColumnType("int");

                entity.Property(e => e.RoundWinAllKillCorps)
                    .HasColumnName("round_win_all_kill_corps")
                    .HasColumnType("bool");

                entity.Property(e => e.RoundWinDefaultId)
                    .HasColumnName("round_win_default_id")
                    .HasColumnType("int");

                entity.Property(e => e.TimeAutoResurrection)
                    .HasColumnName("time_auto_resurrection")
                    .HasColumnType("int");

                entity.Property(e => e.TimeEnding)
                    .HasColumnName("time_ending")
                    .HasColumnType("int");

                entity.Property(e => e.TimeOpening)
                    .HasColumnName("time_opening")
                    .HasColumnType("int");

                entity.Property(e => e.TimePlaying)
                    .HasColumnName("time_playing")
                    .HasColumnType("int");

                entity.Property(e => e.TimeReady)
                    .HasColumnName("time_ready")
                    .HasColumnType("int");

                entity.Property(e => e.TimeRespawnDeadBuilding)
                    .HasColumnName("time_respawn_dead_building")
                    .HasColumnType("int");

                entity.Property(e => e.TimeResurrectionDelay)
                    .HasColumnName("time_resurrection_delay")
                    .HasColumnType("int");

                entity.Property(e => e.TimeUnearnedWin)
                    .HasColumnName("time_unearned_win")
                    .HasColumnType("int");

                entity.Property(e => e.VictoryDefaultId)
                    .HasColumnName("victory_default_id")
                    .HasColumnType("int");

                entity.Property(e => e.VictoryKillCorps1Head)
                    .HasColumnName("victory_kill_corps1_head")
                    .HasColumnType("int");

                entity.Property(e => e.VictoryKillCorps2Head)
                    .HasColumnName("victory_kill_corps2_head")
                    .HasColumnType("int");

                entity.Property(e => e.VictoryKillCount)
                    .HasColumnName("victory_kill_count")
                    .HasColumnType("int");

                entity.Property(e => e.VictoryRankScope)
                    .HasColumnName("victory_rank_scope")
                    .HasColumnType("int");

                entity.Property(e => e.VictoryRoundWinCount)
                    .HasColumnName("victory_round_win_count")
                    .HasColumnType("int");

                entity.Property(e => e.VictoryScore)
                    .HasColumnName("victory_score")
                    .HasColumnType("int");

                entity.Property(e => e.WinnerMultiplier)
                    .HasColumnName("winner_multiplier")
                    .HasColumnType("int");

                entity.Property(e => e.WinnerMultiplierInterval)
                    .HasColumnName("winner_multiplier_interval")
                    .HasColumnType("int");

                entity.HasOne(d => d.BattleField)
                    .WithMany(p => p.GameRuleSets)
                    .HasForeignKey(d => d.BattleFieldId);
            });

            modelBuilder.Entity<GameScheduleDoodads>(entity =>
            {
                entity.ToTable("game_schedule_doodads");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.GameScheduleId)
                    .HasColumnName("game_schedule_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.GameSchedule)
                    .WithMany(p => p.GameScheduleDoodads)
                    .HasForeignKey(d => d.GameScheduleId);
            });

            modelBuilder.Entity<GameScheduleQuests>(entity =>
            {
                entity.ToTable("game_schedule_quests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GameScheduleId)
                    .HasColumnName("game_schedule_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.GameSchedule)
                    .WithMany(p => p.GameScheduleQuests)
                    .HasForeignKey(d => d.GameScheduleId);
            });

            modelBuilder.Entity<GameScheduleSpawners>(entity =>
            {
                entity.ToTable("game_schedule_spawners");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GameScheduleId)
                    .HasColumnName("game_schedule_id")
                    .HasColumnType("int");

                entity.Property(e => e.SpawnerId)
                    .HasColumnName("spawner_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.GameSchedule)
                    .WithMany(p => p.GameScheduleSpawners)
                    .HasForeignKey(d => d.GameScheduleId);
            });

            modelBuilder.Entity<GameSchedules>(entity =>
            {
                entity.ToTable("game_schedules");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DayOfWeekId)
                    .HasColumnName("day_of_week_id")
                    .HasColumnType("int");

                entity.Property(e => e.EdDay)
                    .HasColumnName("ed_day")
                    .HasColumnType("int");

                entity.Property(e => e.EdHour)
                    .HasColumnName("ed_hour")
                    .HasColumnType("int");

                entity.Property(e => e.EdMin)
                    .HasColumnName("ed_min")
                    .HasColumnType("int");

                entity.Property(e => e.EdMonth)
                    .HasColumnName("ed_month")
                    .HasColumnType("int");

                entity.Property(e => e.EdYear)
                    .HasColumnName("ed_year")
                    .HasColumnType("int");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasColumnType("int");

                entity.Property(e => e.EndTimeMin)
                    .HasColumnName("end_time_min")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.StDay)
                    .HasColumnName("st_day")
                    .HasColumnType("int");

                entity.Property(e => e.StHour)
                    .HasColumnName("st_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StMin)
                    .HasColumnName("st_min")
                    .HasColumnType("int");

                entity.Property(e => e.StMonth)
                    .HasColumnName("st_month")
                    .HasColumnType("int");

                entity.Property(e => e.StYear)
                    .HasColumnName("st_year")
                    .HasColumnType("int");

                entity.Property(e => e.StartTime)
                    .HasColumnName("start_time")
                    .HasColumnType("int");

                entity.Property(e => e.StartTimeMin)
                    .HasColumnName("start_time_min")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<GameScoreRules>(entity =>
            {
                entity.ToTable("game_score_rules");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EventId)
                    .HasColumnName("event_id")
                    .HasColumnType("int");

                entity.Property(e => e.EventScore)
                    .HasColumnName("event_score")
                    .HasColumnType("int");

                entity.Property(e => e.EventTagId)
                    .HasColumnName("event_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.EventValue)
                    .HasColumnName("event_value")
                    .HasColumnType("int");

                entity.Property(e => e.RuleSetCorps)
                    .HasColumnName("rule_set_corps")
                    .HasColumnType("int");

                entity.Property(e => e.RuleSetId)
                    .HasColumnName("rule_set_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<GameStances>(entity =>
            {
                entity.ToTable("game_stances");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActorModelId)
                    .HasColumnName("actor_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.AiMoveSpeedRun).HasColumnName("ai_move_speed_run");

                entity.Property(e => e.AiMoveSpeedSlow).HasColumnName("ai_move_speed_slow");

                entity.Property(e => e.AiMoveSpeedSprint).HasColumnName("ai_move_speed_sprint");

                entity.Property(e => e.AiMoveSpeedWalk).HasColumnName("ai_move_speed_walk");

                entity.Property(e => e.HeightCollider).HasColumnName("height_collider");

                entity.Property(e => e.HeightPivot).HasColumnName("height_pivot");

                entity.Property(e => e.IgnoreCollision)
                    .HasColumnName("ignore_collision")
                    .HasColumnType("bool");

                entity.Property(e => e.MaxSpeed).HasColumnName("max_speed");

                entity.Property(e => e.ModelOffsetX).HasColumnName("model_offset_x");

                entity.Property(e => e.ModelOffsetY).HasColumnName("model_offset_y");

                entity.Property(e => e.ModelOffsetZ).HasColumnName("model_offset_z");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NormalSpeed).HasColumnName("normal_speed");

                entity.Property(e => e.SizeX).HasColumnName("size_x");

                entity.Property(e => e.SizeY).HasColumnName("size_y");

                entity.Property(e => e.SizeZ).HasColumnName("size_z");

                entity.Property(e => e.StanceId)
                    .HasColumnName("stance_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseCapsule)
                    .HasColumnName("use_capsule")
                    .HasColumnType("bool");

                entity.Property(e => e.ViewOffsetX).HasColumnName("view_offset_x");

                entity.Property(e => e.ViewOffsetY).HasColumnName("view_offset_y");

                entity.Property(e => e.ViewOffsetZ).HasColumnName("view_offset_z");

                entity.HasOne(d => d.ActorModel)
                    .WithMany(p => p.GameStances)
                    .HasForeignKey(d => d.ActorModelId);
            });

            modelBuilder.Entity<GemVisualEffects>(entity =>
            {
                entity.ToTable("gem_visual_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Filename).HasColumnName("filename");
            });

            modelBuilder.Entity<Gimmicks>(entity =>
            {
                entity.ToTable("gimmicks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AirResistance).HasColumnName("air_resistance");

                entity.Property(e => e.CollisionMinSpeed).HasColumnName("collision_min_speed");

                entity.Property(e => e.CollisionSkillId)
                    .HasColumnName("collision_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.CollisionUnitOnly)
                    .HasColumnName("collision_unit_only")
                    .HasColumnType("bool");

                entity.Property(e => e.Damping).HasColumnName("damping");

                entity.Property(e => e.Density).HasColumnName("density");

                entity.Property(e => e.DisappearByCollision)
                    .HasColumnName("disappear_by_collision")
                    .HasColumnType("bool");

                entity.Property(e => e.FadeInDuration)
                    .HasColumnName("fade_in_duration")
                    .HasColumnType("int");

                entity.Property(e => e.FadeOutDuration)
                    .HasColumnName("fade_out_duration")
                    .HasColumnType("int");

                entity.Property(e => e.FreeFallDamping).HasColumnName("free_fall_damping");

                entity.Property(e => e.Graspable)
                    .HasColumnName("graspable")
                    .HasColumnType("bool");

                entity.Property(e => e.Gravity).HasColumnName("gravity");

                entity.Property(e => e.LifeTime)
                    .HasColumnName("life_time")
                    .HasColumnType("int");

                entity.Property(e => e.Mass).HasColumnName("mass");

                entity.Property(e => e.ModelPath).HasColumnName("model_path");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NoGroundCollider)
                    .HasColumnName("no_ground_collider")
                    .HasColumnType("bool");

                entity.Property(e => e.PushableByPlayer)
                    .HasColumnName("pushable_by_player")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillDelay)
                    .HasColumnName("skill_delay")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SpawnDelay)
                    .HasColumnName("spawn_delay")
                    .HasColumnType("int");

                entity.Property(e => e.WaterDamping).HasColumnName("water_damping");

                entity.Property(e => e.WaterDensity).HasColumnName("water_density");

                entity.Property(e => e.WaterResistance).HasColumnName("water_resistance");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.Gimmicks)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<GrammarTagNoneTypes>(entity =>
            {
                entity.ToTable("grammar_tag_none_types");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Locale).HasColumnName("locale");

                entity.Property(e => e.Macrotag).HasColumnName("macrotag");
            });

            modelBuilder.Entity<GrammarTags>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("grammar_tags");

                entity.Property(e => e.GrammartagA).HasColumnName("grammartag_a");

                entity.Property(e => e.GrammartagG).HasColumnName("grammartag_g");

                entity.Property(e => e.GrammartagI).HasColumnName("grammartag_i");

                entity.Property(e => e.GrammartagPl).HasColumnName("grammartag_pl");

                entity.Property(e => e.GrammartagPla).HasColumnName("grammartag_pla");

                entity.Property(e => e.GrammartagPld).HasColumnName("grammartag_pld");

                entity.Property(e => e.GrammartagPlg).HasColumnName("grammartag_plg");

                entity.Property(e => e.Idx)
                    .HasColumnName("idx")
                    .HasColumnType("int");

                entity.Property(e => e.Tagid)
                    .HasColumnName("tagid")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<GuardTowerSettings>(entity =>
            {
                entity.ToTable("guard_tower_settings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.InitialBuffId)
                    .HasColumnName("initial_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxDominionBuildings)
                    .HasColumnName("max_dominion_buildings")
                    .HasColumnType("int");

                entity.Property(e => e.MaxGates)
                    .HasColumnName("max_gates")
                    .HasColumnType("int");

                entity.Property(e => e.MaxKeeps)
                    .HasColumnName("max_keeps")
                    .HasColumnType("int");

                entity.Property(e => e.MaxWalls)
                    .HasColumnName("max_walls")
                    .HasColumnType("int");

                entity.Property(e => e.RadiusDeclare)
                    .HasColumnName("radius_declare")
                    .HasColumnType("int");

                entity.Property(e => e.RadiusDominion)
                    .HasColumnName("radius_dominion")
                    .HasColumnType("int");

                entity.Property(e => e.RadiusOffenseHq)
                    .HasColumnName("radius_offense_hq")
                    .HasColumnType("int");

                entity.Property(e => e.RadiusSiege)
                    .HasColumnName("radius_siege")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<GuardTowerStepConds>(entity =>
            {
                entity.ToTable("guard_tower_step_conds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.GuardTowerStepId)
                    .HasColumnName("guard_tower_step_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingPackId)
                    .HasColumnName("housing_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.HasOne(d => d.GuardTowerStep)
                    .WithMany(p => p.GuardTowerStepConds)
                    .HasForeignKey(d => d.GuardTowerStepId);

                entity.HasOne(d => d.HousingPack)
                    .WithMany(p => p.GuardTowerStepConds)
                    .HasForeignKey(d => d.HousingPackId);
            });

            modelBuilder.Entity<GuardTowerSteps>(entity =>
            {
                entity.ToTable("guard_tower_steps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.GuardTowerSettingId)
                    .HasColumnName("guard_tower_setting_id")
                    .HasColumnType("int");

                entity.Property(e => e.NumGates)
                    .HasColumnName("num_gates")
                    .HasColumnType("int");

                entity.Property(e => e.NumWalls)
                    .HasColumnName("num_walls")
                    .HasColumnType("int");

                entity.Property(e => e.Step)
                    .HasColumnName("step")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.GuardTowerSteps)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.GuardTowerSetting)
                    .WithMany(p => p.GuardTowerSteps)
                    .HasForeignKey(d => d.GuardTowerSettingId);
            });

            modelBuilder.Entity<HairColors>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hair_colors");

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.HairBaseColorB)
                    .HasColumnName("hair_base_color_b")
                    .HasColumnType("INT");

                entity.Property(e => e.HairBaseColorG)
                    .HasColumnName("hair_base_color_g")
                    .HasColumnType("INT");

                entity.Property(e => e.HairBaseColorR)
                    .HasColumnName("hair_base_color_r")
                    .HasColumnType("INT");

                entity.Property(e => e.HairDiffuseColorB)
                    .HasColumnName("hair_diffuse_color_b")
                    .HasColumnType("INT");

                entity.Property(e => e.HairDiffuseColorG)
                    .HasColumnName("hair_diffuse_color_g")
                    .HasColumnType("INT");

                entity.Property(e => e.HairDiffuseColorR)
                    .HasColumnName("hair_diffuse_color_r")
                    .HasColumnType("INT");

                entity.Property(e => e.HairMaterial).HasColumnName("hair_material");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("INT");

                entity.Property(e => e.NpcOnly)
                    .HasColumnName("npc_only")
                    .HasColumnType("NUM");
            });
            
            modelBuilder.Entity<HandIkOffsets>(entity =>
            {
                entity.HasKey(o => new { o.ModelId });

                entity.ToTable("hand_ik_offsets");

                entity.Property(e => e.IkOffsetX).HasColumnName("ik_offset_x");

                entity.Property(e => e.IkOffsetY).HasColumnName("ik_offset_y");

                entity.Property(e => e.IkOffsetZ).HasColumnName("ik_offset_z");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.HandIkOffsets)
                    .HasForeignKey(d => d.ModelId);
            });
            
            modelBuilder.Entity<HashCheckers>(entity =>
            {
                entity.ToTable("hash_checkers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Hash1).HasColumnName("hash1");

                entity.Property(e => e.Hash2).HasColumnName("hash2");

                entity.Property(e => e.Path).HasColumnName("path");
            });

            modelBuilder.Entity<HealEffects>(entity =>
            {
                entity.ToTable("heal_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActabilityAdd).HasColumnName("actability_add");

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActabilityMul).HasColumnName("actability_mul");

                entity.Property(e => e.ActabilityStep)
                    .HasColumnName("actability_step")
                    .HasColumnType("int");

                entity.Property(e => e.ChargedBuffId)
                    .HasColumnName("charged_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChargedMul).HasColumnName("charged_mul");

                entity.Property(e => e.DpsMultiplier).HasColumnName("dps_multiplier");

                entity.Property(e => e.ExtraEffects).HasColumnName("extra_effects");

                entity.Property(e => e.FixedMax)
                    .HasColumnName("fixed_max")
                    .HasColumnType("int");

                entity.Property(e => e.FixedMin)
                    .HasColumnName("fixed_min")
                    .HasColumnType("int");

                entity.Property(e => e.IgnoreHealAggro)
                    .HasColumnName("ignore_heal_aggro")
                    .HasColumnType("bool");

                entity.Property(e => e.LevelMd).HasColumnName("level_md");

                entity.Property(e => e.LevelVaEnd)
                    .HasColumnName("level_va_end")
                    .HasColumnType("int");

                entity.Property(e => e.LevelVaStart)
                    .HasColumnName("level_va_start")
                    .HasColumnType("int");

                entity.Property(e => e.Percent)
                    .HasColumnName("percent")
                    .HasColumnType("bool");

                entity.Property(e => e.SlaveApplicable)
                    .HasColumnName("slave_applicable")
                    .HasColumnType("bool");

                entity.Property(e => e.UseChargedBuff)
                    .HasColumnName("use_charged_buff")
                    .HasColumnType("bool");

                entity.Property(e => e.UseFixedHeal)
                    .HasColumnName("use_fixed_heal")
                    .HasColumnType("bool");

                entity.Property(e => e.UseLevelHeal)
                    .HasColumnName("use_level_heal")
                    .HasColumnType("bool");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.HealEffects)
                    .HasForeignKey(d => d.ActabilityGroupId);
            });

            modelBuilder.Entity<HeavyTaxes>(entity =>
            {
                entity.ToTable("heavy_taxes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.Multiplier).HasColumnName("multiplier");
            });

            modelBuilder.Entity<HeirLevels>(entity =>
            {
                entity.ToTable("heir_levels");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.ReqItemCount)
                    .HasColumnName("req_item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ReqItemId)
                    .HasColumnName("req_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ReqTotalExp)
                    .HasColumnName("req_total_exp")
                    .HasColumnType("int");

                entity.Property(e => e.Step)
                    .HasColumnName("step")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<HeirSkillDetails>(entity =>
            {
                entity.ToTable("heir_skill_details");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HeirSkillId)
                    .HasColumnName("heir_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");

                entity.Property(e => e.Pos)
                    .HasColumnName("pos")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.HeirSkill)
                    .WithMany(p => p.HeirSkillDetails)
                    .HasForeignKey(d => d.HeirSkillId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.HeirSkillDetails)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<HeirSkills>(entity =>
            {
                entity.ToTable("heir_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.Step)
                    .HasColumnName("step")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.HeirSkills)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<HeroBonuses>(entity =>
            {
                entity.ToTable("hero_bonuses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.LeadershipPoint)
                    .HasColumnName("leadership_point")
                    .HasColumnType("int");

                entity.Property(e => e.MobilizationOrderCount)
                    .HasColumnName("mobilization_order_count")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.HeroBonuses)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.HeroBonuses)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<HeroConditions>(entity =>
            {
                entity.ToTable("hero_conditions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CandidateMailBody).HasColumnName("candidate_mail_body");

                entity.Property(e => e.ElectionMailBody).HasColumnName("election_mail_body");

                entity.Property(e => e.HeroBonusMailBody).HasColumnName("hero_bonus_mail_body");

                entity.Property(e => e.HeroCandidateMinLevel)
                    .HasColumnName("hero_candidate_min_level")
                    .HasColumnType("int");

                entity.Property(e => e.HeroCandidateMinPoint)
                    .HasColumnName("hero_candidate_min_point")
                    .HasColumnType("int");

                entity.Property(e => e.HeroCandidateScope)
                    .HasColumnName("hero_candidate_scope")
                    .HasColumnType("int");

                entity.Property(e => e.HeroNewPeriodTitle).HasColumnName("hero_new_period_title");

                entity.Property(e => e.LeadershipRankingScope)
                    .HasColumnName("leadership_ranking_scope")
                    .HasColumnType("int");

                entity.Property(e => e.VotableLeadershipPoint)
                    .HasColumnName("votable_leadership_point")
                    .HasColumnType("int");

                entity.Property(e => e.VotableLevel)
                    .HasColumnName("votable_level")
                    .HasColumnType("int");

                entity.Property(e => e.VotingDayTitle).HasColumnName("voting_day_title");

                entity.Property(e => e.VotingDeyDesc).HasColumnName("voting_dey_desc");
            });

            modelBuilder.Entity<HeroGrades>(entity =>
            {
                entity.ToTable("hero_grades");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<HeroRewards>(entity =>
            {
                entity.ToTable("hero_rewards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HeroGradeId)
                    .HasColumnName("hero_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Ranking)
                    .HasColumnName("ranking")
                    .HasColumnType("int");

                entity.Property(e => e.TopFactionId)
                    .HasColumnName("top_faction_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.HeroGrade)
                    .WithMany(p => p.HeroRewards)
                    .HasForeignKey(d => d.HeroGradeId);

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.HeroRewards)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.HeroRewards)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<HeroSchedules>(entity =>
            {
                entity.ToTable("hero_schedules");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.End).HasColumnName("end");

                entity.Property(e => e.EventId)
                    .HasColumnName("event_id")
                    .HasColumnType("int");

                entity.Property(e => e.HeroId)
                    .HasColumnName("hero_id")
                    .HasColumnType("int");

                entity.Property(e => e.Start).HasColumnName("start");

                entity.HasOne(d => d.Hero)
                    .WithMany(p => p.HeroSchedules)
                    .HasForeignKey(d => d.HeroId);
            });

            modelBuilder.Entity<Heros>(entity =>
            {
                entity.ToTable("heros");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HeroConditionId)
                    .HasColumnName("hero_condition_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.HeroCondition)
                    .WithMany(p => p.Heros)
                    .HasForeignKey(d => d.HeroConditionId);
            });

            modelBuilder.Entity<HighAbilities>(entity =>
            {
                entity.ToTable("high_abilities");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbilityId)
                    .HasColumnName("ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighAbilityId)
                    .HasColumnName("high_ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighAbilityResourceRegen)
                    .HasColumnName("high_ability_resource_regen")
                    .HasColumnType("int");

                entity.Property(e => e.MaxHighAbilityResource)
                    .HasColumnName("max_high_ability_resource")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.PersistentHighAbilityResourceRegen)
                    .HasColumnName("persistent_high_ability_resource_regen")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<HighAbilityResourceEffects>(entity =>
            {
                entity.ToTable("high_ability_resource_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.MaxHighAbilityResource)
                    .HasColumnName("max_high_ability_resource")
                    .HasColumnType("int");

                entity.Property(e => e.MinHighAbilityResource)
                    .HasColumnName("min_high_ability_resource")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Holdables>(entity =>
            {
                entity.ToTable("holdables");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Angle)
                    .HasColumnName("angle")
                    .HasColumnType("int");

                entity.Property(e => e.AnimL1Id)
                    .HasColumnName("anim_l1_id")
                    .HasColumnType("int");

                entity.Property(e => e.AnimL1Ratio)
                    .HasColumnName("anim_l1_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.AnimL2Id)
                    .HasColumnName("anim_l2_id")
                    .HasColumnType("int");

                entity.Property(e => e.AnimL2Ratio)
                    .HasColumnName("anim_l2_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.AnimL3Id)
                    .HasColumnName("anim_l3_id")
                    .HasColumnType("int");

                entity.Property(e => e.AnimR1Id)
                    .HasColumnName("anim_r1_id")
                    .HasColumnType("int");

                entity.Property(e => e.AnimR1Ratio)
                    .HasColumnName("anim_r1_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.AnimR2Id)
                    .HasColumnName("anim_r2_id")
                    .HasColumnType("int");

                entity.Property(e => e.AnimR2Ratio)
                    .HasColumnName("anim_r2_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.AnimR3Id)
                    .HasColumnName("anim_r3_id")
                    .HasColumnType("int");

                entity.Property(e => e.DamageScale)
                    .HasColumnName("damage_scale")
                    .HasColumnType("int");

                entity.Property(e => e.DurabilityRatio).HasColumnName("durability_ratio");

                entity.Property(e => e.EnchantedDps1000)
                    .HasColumnName("enchanted_dps1000")
                    .HasColumnType("int");

                entity.Property(e => e.ExtraDamageBluntFactor)
                    .HasColumnName("extra_damage_blunt_factor")
                    .HasColumnType("int");

                entity.Property(e => e.ExtraDamagePierceFactor)
                    .HasColumnName("extra_damage_pierce_factor")
                    .HasColumnType("int");

                entity.Property(e => e.ExtraDamageSlashFactor)
                    .HasColumnName("extra_damage_slash_factor")
                    .HasColumnType("int");

                entity.Property(e => e.FormulaArmor).HasColumnName("formula_armor");

                entity.Property(e => e.FormulaDps).HasColumnName("formula_dps");

                entity.Property(e => e.FormulaHdps).HasColumnName("formula_hdps");

                entity.Property(e => e.FormulaMdps).HasColumnName("formula_mdps");

                entity.Property(e => e.GearScoreMultiplier)
                    .HasColumnName("gear_score_multiplier")
                    .HasColumnType("int");

                entity.Property(e => e.ItemProcId)
                    .HasColumnName("item_proc_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxRange)
                    .HasColumnName("max_range")
                    .HasColumnType("int");

                entity.Property(e => e.MinRange)
                    .HasColumnName("min_range")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PoseId)
                    .HasColumnName("pose_id")
                    .HasColumnType("int");

                entity.Property(e => e.RenewCategory)
                    .HasColumnName("renew_category")
                    .HasColumnType("int");

                entity.Property(e => e.SheathePriority)
                    .HasColumnName("sheathe_priority")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundMaterialId)
                    .HasColumnName("sound_material_id")
                    .HasColumnType("int");

                entity.Property(e => e.Speed)
                    .HasColumnName("speed")
                    .HasColumnType("int");

                entity.Property(e => e.StatMultiplier)
                    .HasColumnName("stat_multiplier")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemProc)
                    .WithMany(p => p.Holdables)
                    .HasForeignKey(d => d.ItemProcId);
            });

            modelBuilder.Entity<Hotkeys>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("hotkeys");

                entity.Property(e => e.ActionId)
                    .HasColumnName("action_id")
                    .HasColumnType("INT");

                entity.Property(e => e.ActionType1Id)
                    .HasColumnName("action_type1_id")
                    .HasColumnType("INT");

                entity.Property(e => e.ActionType2Id)
                    .HasColumnName("action_type2_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Activation).HasColumnName("activation");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.KeyPrimary).HasColumnName("key_primary");

                entity.Property(e => e.KeySecond).HasColumnName("key_second");

                entity.Property(e => e.ModeId)
                    .HasColumnName("mode_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<HousingAreas>(entity =>
            {
                entity.ToTable("housing_areas");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Activated)
                    .HasColumnName("activated")
                    .HasColumnType("bool");

                entity.Property(e => e.AtDay)
                    .HasColumnName("at_day")
                    .HasColumnType("int");

                entity.Property(e => e.AtHour)
                    .HasColumnName("at_hour")
                    .HasColumnType("int");

                entity.Property(e => e.AtMin)
                    .HasColumnName("at_min")
                    .HasColumnType("int");

                entity.Property(e => e.AtMonth)
                    .HasColumnName("at_month")
                    .HasColumnType("int");

                entity.Property(e => e.AtYear)
                    .HasColumnName("at_year")
                    .HasColumnType("int");

                entity.Property(e => e.ExceptBattle)
                    .HasColumnName("except_battle")
                    .HasColumnType("bool");

                entity.Property(e => e.ExceptChaosWar)
                    .HasColumnName("except_chaos_war")
                    .HasColumnType("bool");

                entity.Property(e => e.ExceptSiege)
                    .HasColumnName("except_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.ExceptWar)
                    .HasColumnName("except_war")
                    .HasColumnType("bool");

                entity.Property(e => e.HousingGroupId)
                    .HasColumnName("housing_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ProtectFactionId)
                    .HasColumnName("protect_faction_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.HousingGroup)
                    .WithMany(p => p.HousingAreas)
                    .HasForeignKey(d => d.HousingGroupId);
            });

            modelBuilder.Entity<HousingBindingDoodads>(entity =>
            {
                entity.ToTable("housing_binding_doodads");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.ForceDbSave)
                    .HasColumnName("force_db_save")
                    .HasColumnType("bool");

                entity.Property(e => e.HousingId)
                    .HasColumnName("housing_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Housing)
                    .WithMany(p => p.HousingBindingDoodads)
                    .HasForeignKey(d => d.HousingId);
            });

            modelBuilder.Entity<HousingBuildSteps>(entity =>
            {
                entity.ToTable("housing_build_steps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HousingId)
                    .HasColumnName("housing_id")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.NumActions)
                    .HasColumnName("num_actions")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.Step)
                    .HasColumnName("step")
                    .HasColumnType("int");

                entity.HasOne(d => d.Housing)
                    .WithMany(p => p.HousingBuildSteps)
                    .HasForeignKey(d => d.HousingId);

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.HousingBuildSteps)
                    .HasForeignKey(d => d.ModelId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.HousingBuildSteps)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<HousingDecoLimitElems>(entity =>
            {
                entity.ToTable("housing_deco_limit_elems");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DecoActabilityGroupId)
                    .HasColumnName("deco_actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingDecoLimitId)
                    .HasColumnName("housing_deco_limit_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DecoActabilityGroup)
                    .WithMany(p => p.HousingDecoLimitElems)
                    .HasForeignKey(d => d.DecoActabilityGroupId);

                entity.HasOne(d => d.HousingDecoLimit)
                    .WithMany(p => p.HousingDecoLimitElems)
                    .HasForeignKey(d => d.HousingDecoLimitId);
            });

            modelBuilder.Entity<HousingDecoLimits>(entity =>
            {
                entity.ToTable("housing_deco_limits");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<HousingDecorations>(entity =>
            {
                entity.ToTable("housing_decorations");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActabilityUp)
                    .HasColumnName("actability_up")
                    .HasColumnType("int");

                entity.Property(e => e.AllowMeshOnGarden)
                    .HasColumnName("allow_mesh_on_garden")
                    .HasColumnType("bool");

                entity.Property(e => e.AllowOnCeiling)
                    .HasColumnName("allow_on_ceiling")
                    .HasColumnType("bool");

                entity.Property(e => e.AllowOnFloor)
                    .HasColumnName("allow_on_floor")
                    .HasColumnType("bool");

                entity.Property(e => e.AllowOnWall)
                    .HasColumnName("allow_on_wall")
                    .HasColumnType("bool");

                entity.Property(e => e.AllowPivotOnGarden)
                    .HasColumnName("allow_pivot_on_garden")
                    .HasColumnType("bool");

                entity.Property(e => e.DecoActabilityGroupId)
                    .HasColumnName("deco_actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.VerticalAligned)
                    .HasColumnName("vertical_aligned")
                    .HasColumnType("bool");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.HousingDecorations)
                    .HasForeignKey(d => d.ActabilityGroupId);

                entity.HasOne(d => d.DecoActabilityGroup)
                    .WithMany(p => p.HousingDecorations)
                    .HasForeignKey(d => d.DecoActabilityGroupId);
            });

            modelBuilder.Entity<HousingGroupCategories>(entity =>
            {
                entity.ToTable("housing_group_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingGroupId)
                    .HasColumnName("housing_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxConstructCount)
                    .HasColumnName("max_construct_count")
                    .HasColumnType("int");

                entity.HasOne(d => d.HousingGroup)
                    .WithMany(p => p.HousingGroupCategories)
                    .HasForeignKey(d => d.HousingGroupId);
            });

            modelBuilder.Entity<HousingGroups>(entity =>
            {
                entity.ToTable("housing_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AllowedTaxDelayWeek)
                    .HasColumnName("allowed_tax_delay_week")
                    .HasColumnType("int");

                entity.Property(e => e.CanExtend)
                    .HasColumnName("can_extend")
                    .HasColumnType("bool");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.ExistingCategoryId)
                    .HasColumnName("existing_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.Houseless)
                    .HasColumnName("houseless")
                    .HasColumnType("bool");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<HousingPackMembers>(entity =>
            {
                entity.ToTable("housing_pack_members");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HousingId)
                    .HasColumnName("housing_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingPackId)
                    .HasColumnName("housing_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Housing)
                    .WithMany(p => p.HousingPackMembers)
                    .HasForeignKey(d => d.HousingId);

                entity.HasOne(d => d.HousingPack)
                    .WithMany(p => p.HousingPackMembers)
                    .HasForeignKey(d => d.HousingPackId);
            });

            modelBuilder.Entity<HousingPacks>(entity =>
            {
                entity.ToTable("housing_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<HousingRebuildingMaterials>(entity =>
            {
                entity.ToTable("housing_rebuilding_materials");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.HousingRebuildingId)
                    .HasColumnName("housing_rebuilding_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.HousingRebuilding)
                    .WithMany(p => p.HousingRebuildingMaterials)
                    .HasForeignKey(d => d.HousingRebuildingId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.HousingRebuildingMaterials)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<HousingRebuildingPackRebuildings>(entity =>
            {
                entity.ToTable("housing_rebuilding_pack_rebuildings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HousingRebuildingId)
                    .HasColumnName("housing_rebuilding_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingRebuildingPackId)
                    .HasColumnName("housing_rebuilding_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasColumnType("int");

                entity.HasOne(d => d.HousingRebuilding)
                    .WithMany(p => p.HousingRebuildingPackRebuildings)
                    .HasForeignKey(d => d.HousingRebuildingId);

                entity.HasOne(d => d.HousingRebuildingPack)
                    .WithMany(p => p.HousingRebuildingPackRebuildings)
                    .HasForeignKey(d => d.HousingRebuildingPackId);
            });

            modelBuilder.Entity<HousingRebuildingPacks>(entity =>
            {
                entity.ToTable("housing_rebuilding_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<HousingRebuildings>(entity =>
            {
                entity.ToTable("housing_rebuildings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChangePointDesc).HasColumnName("change_point_desc");

                entity.Property(e => e.HousingId)
                    .HasColumnName("housing_id")
                    .HasColumnType("int");

                entity.Property(e => e.LaborPower)
                    .HasColumnName("labor_power")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.HousingRebuildings)
                    .HasForeignKey(d => d.ActabilityGroupId);

                entity.HasOne(d => d.Housing)
                    .WithMany(p => p.HousingRebuildings)
                    .HasForeignKey(d => d.HousingId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.HousingRebuildings)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<HousingSizes>(entity =>
            {
                entity.ToTable("housing_sizes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GardenRadius).HasColumnName("garden_radius");

                entity.Property(e => e.HousingViewSizeId)
                    .HasColumnName("housing_view_size_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.HousingViewSize)
                    .WithMany(p => p.HousingSizes)
                    .HasForeignKey(d => d.HousingViewSizeId);
            });

            modelBuilder.Entity<HousingUccPacks>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("housing_ucc_packs");

                entity.Property(e => e.Id)
                    .IsRequired()
                    .HasColumnName("id");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<HousingUccSlots>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("housing_ucc_slots");

                entity.Property(e => e.HousingUccPackId).HasColumnName("housing_ucc_pack_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Preset).HasColumnName("preset");

                entity.Property(e => e.UccSlotId).HasColumnName("ucc_slot_id");
            });

            modelBuilder.Entity<HousingViewSizes>(entity =>
            {
                entity.ToTable("housing_view_sizes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Housings>(entity =>
            {
                entity.ToTable("housings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbsoluteDecoLimit)
                    .HasColumnName("absolute_deco_limit")
                    .HasColumnType("int");

                entity.Property(e => e.Alley).HasColumnName("alley");

                entity.Property(e => e.AlwaysPublic)
                    .HasColumnName("always_public")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoZ)
                    .HasColumnName("auto_z")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoZOffsetX).HasColumnName("auto_z_offset_x");

                entity.Property(e => e.AutoZOffsetY).HasColumnName("auto_z_offset_y");

                entity.Property(e => e.AutoZOffsetZ).HasColumnName("auto_z_offset_z");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.CinemaId)
                    .HasColumnName("cinema_id")
                    .HasColumnType("int");

                entity.Property(e => e.CinemaRadius).HasColumnName("cinema_radius");

                entity.Property(e => e.DecoExpandability)
                    .HasColumnName("deco_expandability")
                    .HasColumnType("bool");

                entity.Property(e => e.DecoLimit)
                    .HasColumnName("deco_limit")
                    .HasColumnType("int");

                entity.Property(e => e.DemolishRefundItemId)
                    .HasColumnName("demolish_refund_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoorModelId)
                    .HasColumnName("door_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.ExtraHeightAbove).HasColumnName("extra_height_above");

                entity.Property(e => e.ExtraHeightBelow).HasColumnName("extra_height_below");

                entity.Property(e => e.Family).HasColumnName("family");

                entity.Property(e => e.GateExists)
                    .HasColumnName("gate_exists")
                    .HasColumnType("bool");

                entity.Property(e => e.GuardTowerSettingId)
                    .HasColumnName("guard_tower_setting_id")
                    .HasColumnType("int");

                entity.Property(e => e.HeavyTax)
                    .HasColumnName("heavy_tax")
                    .HasColumnType("bool");

                entity.Property(e => e.HousingDecoLimitId)
                    .HasColumnName("housing_deco_limit_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingRebuildingPackId)
                    .HasColumnName("housing_rebuilding_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingSizeId)
                    .HasColumnName("housing_size_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingUccPackId)
                    .HasColumnName("housing_ucc_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.Hp)
                    .HasColumnName("hp")
                    .HasColumnType("int");

                entity.Property(e => e.IsSellable)
                    .HasColumnName("is_sellable")
                    .HasColumnType("bool");

                entity.Property(e => e.MainModelId)
                    .HasColumnName("main_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PackageDemolishSealCount)
                    .HasColumnName("package_demolish_seal_count")
                    .HasColumnType("int");

                entity.Property(e => e.RepairCost)
                    .HasColumnName("repair_cost")
                    .HasColumnType("int");

                entity.Property(e => e.RotateItemCount)
                    .HasColumnName("rotate_item_count")
                    .HasColumnType("int");

                entity.Property(e => e.RotateItemId)
                    .HasColumnName("rotate_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ServerTransferDemolishRefundItemId)
                    .HasColumnName("server_transfer_demolish_refund_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.StairModelId)
                    .HasColumnName("stair_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.TaxationId)
                    .HasColumnName("taxation_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Cinema)
                    .WithMany(p => p.Housings)
                    .HasForeignKey(d => d.CinemaId);

                entity.HasOne(d => d.GuardTowerSetting)
                    .WithMany(p => p.Housings)
                    .HasForeignKey(d => d.GuardTowerSettingId);

                entity.HasOne(d => d.HousingDecoLimit)
                    .WithMany(p => p.Housings)
                    .HasForeignKey(d => d.HousingDecoLimitId);

                entity.HasOne(d => d.HousingRebuildingPack)
                    .WithMany(p => p.Housings)
                    .HasForeignKey(d => d.HousingRebuildingPackId);

                entity.HasOne(d => d.HousingSize)
                    .WithMany(p => p.Housings)
                    .HasForeignKey(d => d.HousingSizeId);

                entity.HasOne(d => d.Taxation)
                    .WithMany(p => p.Housings)
                    .HasForeignKey(d => d.TaxationId);
            });

            modelBuilder.Entity<Icons>(entity =>
            {
                entity.ToTable("icons");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Filename).HasColumnName("filename");
            });

            modelBuilder.Entity<IgnoreTexts>(entity =>
            {
                entity.ToTable("ignore_texts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Bytes)
                    .HasColumnName("bytes")
                    .HasColumnType("int");

                entity.Property(e => e.Utf8str).HasColumnName("utf8str");
            });

            modelBuilder.Entity<ImprintUccEffects>(entity =>
            {
                entity.ToTable("imprint_ucc_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ImprintUccEffects)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ImpulseEffects>(entity =>
            {
                entity.ToTable("impulse_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AngImpulseX).HasColumnName("ang_impulse_x");

                entity.Property(e => e.AngImpulseY).HasColumnName("ang_impulse_y");

                entity.Property(e => e.AngImpulseZ).HasColumnName("ang_impulse_z");

                entity.Property(e => e.AngvelImpulseX).HasColumnName("angvel_impulse_x");

                entity.Property(e => e.AngvelImpulseY).HasColumnName("angvel_impulse_y");

                entity.Property(e => e.AngvelImpulseZ).HasColumnName("angvel_impulse_z");

                entity.Property(e => e.ImpulseX).HasColumnName("impulse_x");

                entity.Property(e => e.ImpulseY).HasColumnName("impulse_y");

                entity.Property(e => e.ImpulseZ).HasColumnName("impulse_z");

                entity.Property(e => e.VelImpulseX).HasColumnName("vel_impulse_x");

                entity.Property(e => e.VelImpulseY).HasColumnName("vel_impulse_y");

                entity.Property(e => e.VelImpulseZ).HasColumnName("vel_impulse_z");
            });
            
            modelBuilder.Entity<IndestructibleItems>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("indestructible_items");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.IndestructibleItems)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<IndunZones>(entity =>
            {
                entity.HasKey(o => new { o.ItemId, o.ZoneGroupId });

                entity.ToTable("indun_zones");

                entity.Property(e => e.ClientDriven)
                    .HasColumnName("client_driven")
                    .HasColumnType("bool");

                entity.Property(e => e.Duel)
                    .HasColumnName("duel")
                    .HasColumnType("bool");

                entity.Property(e => e.EnterCount)
                    .HasColumnName("enter_count")
                    .HasColumnType("int");

                entity.Property(e => e.ExpPanelty)
                    .HasColumnName("exp_panelty")
                    .HasColumnType("bool");

                entity.Property(e => e.HasGraveyard)
                    .HasColumnName("has_graveyard")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.LevelMax)
                    .HasColumnName("level_max")
                    .HasColumnType("int");

                entity.Property(e => e.LevelMin)
                    .HasColumnName("level_min")
                    .HasColumnType("int");

                entity.Property(e => e.MaxPlayers)
                    .HasColumnName("max_players")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PartyOnly)
                    .HasColumnName("party_only")
                    .HasColumnType("bool");

                entity.Property(e => e.Pvp)
                    .HasColumnName("pvp")
                    .HasColumnType("bool");

                entity.Property(e => e.RestoreItemTime)
                    .HasColumnName("restore_item_time")
                    .HasColumnType("int");

                entity.Property(e => e.SelectChannel)
                    .HasColumnName("select_channel")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.IndunZones)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.IndunZones)
                    .HasForeignKey(d => d.ZoneGroupId);
            });
            
            modelBuilder.Entity<InstrumentSounds>(entity =>
            {
                entity.ToTable("instrument_sounds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Midi)
                    .HasColumnName("midi")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.InstrumentSounds)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.InstrumentSounds)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<IntensifiedExpertLimits>(entity =>
            {
                entity.HasKey(o => new { o.ActabilityViewGroupId, o.ExpertLimitId });

                entity.ToTable("intensified_expert_limits");

                entity.Property(e => e.ActabilityViewGroupId)
                    .HasColumnName("actability_view_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ExpertLimitId)
                    .HasColumnName("expert_limit_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ActabilityViewGroup)
                    .WithMany(p => p.IntensifiedExpertLimits)
                    .HasForeignKey(d => d.ActabilityViewGroupId);

                entity.HasOne(d => d.ExpertLimit)
                    .WithMany(p => p.IntensifiedExpertLimits)
                    .HasForeignKey(d => d.ExpertLimitId);
            });
            
            modelBuilder.Entity<InteractionEffects>(entity =>
            {
                entity.ToTable("interaction_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<ItemAcceptQuests>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_accept_quests");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemAcceptQuests)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemAccessories>(entity =>
            {
                entity.ToTable("item_accessories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ChargeCount)
                    .HasColumnName("charge_count")
                    .HasColumnType("int");

                entity.Property(e => e.ChargeLifetime)
                    .HasColumnName("charge_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.DurabilityMultiplier)
                    .HasColumnName("durability_multiplier")
                    .HasColumnType("int");

                entity.Property(e => e.EisetId)
                    .HasColumnName("eiset_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemRndAttrCategoryId)
                    .HasColumnName("item_rnd_attr_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.ModSetId)
                    .HasColumnName("mod_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.RechargeBuffId)
                    .HasColumnName("recharge_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.RechargeRestrictItemId)
                    .HasColumnName("recharge_restrict_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.RechargeRndAttrUnitModifierRestrictItemId)
                    .HasColumnName("recharge_rnd_attr_unit_modifier_restrict_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Repairable)
                    .HasColumnName("repairable")
                    .HasColumnType("bool");

                entity.Property(e => e.RndAttrUnitModifierLifetime)
                    .HasColumnName("rnd_attr_unit_modifier_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemAccessories)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ItemArmorAssets>(entity =>
            {
                entity.ToTable("item_armor_assets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ArmorAssetId)
                    .HasColumnName("armor_asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ArmorAsset)
                    .WithMany(p => p.ItemArmorAssets)
                    .HasForeignKey(d => d.ArmorAssetId);
            });

            modelBuilder.Entity<ItemArmors>(entity =>
            {
                entity.ToTable("item_armors");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Asset2Id)
                    .HasColumnName("asset2_id")
                    .HasColumnType("int");

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.BaseEnchantable)
                    .HasColumnName("base_enchantable")
                    .HasColumnType("bool");

                entity.Property(e => e.BaseEquipment)
                    .HasColumnName("base_equipment")
                    .HasColumnType("bool");

                entity.Property(e => e.ChargeCount)
                    .HasColumnName("charge_count")
                    .HasColumnType("int");

                entity.Property(e => e.ChargeLifetime)
                    .HasColumnName("charge_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.DurabilityMultiplier)
                    .HasColumnName("durability_multiplier")
                    .HasColumnType("int");

                entity.Property(e => e.EisetId)
                    .HasColumnName("eiset_id")
                    .HasColumnType("int");

                entity.Property(e => e.EnhancedItemMaterialId)
                    .HasColumnName("enhanced_item_material_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipOnlyHasArmorVisual)
                    .HasColumnName("equip_only_has_armor_visual")
                    .HasColumnType("bool");

                entity.Property(e => e.InvisibleAsset)
                    .HasColumnName("invisible_asset")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemRndAttrCategoryId)
                    .HasColumnName("item_rnd_attr_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.ModSetId)
                    .HasColumnName("mod_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.NoVisualErrorMessage).HasColumnName("no_visual_error_message");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.RechargeBuffId)
                    .HasColumnName("recharge_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.RechargeRestrictItemId)
                    .HasColumnName("recharge_restrict_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.RechargeRndAttrUnitModifierRestrictItemId)
                    .HasColumnName("recharge_rnd_attr_unit_modifier_restrict_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Repairable)
                    .HasColumnName("repairable")
                    .HasColumnType("bool");

                entity.Property(e => e.RndAttrUnitModifierLifetime)
                    .HasColumnName("rnd_attr_unit_modifier_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.SkinKindId)
                    .HasColumnName("skin_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAsStat)
                    .HasColumnName("useAsStat")
                    .HasColumnType("bool");

                entity.HasOne(d => d.EnhancedItemMaterial)
                    .WithMany(p => p.ItemArmors)
                    .HasForeignKey(d => d.EnhancedItemMaterialId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemArmors)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ItemAssetTransforms>(entity =>
            {
                entity.HasKey(o => new { o.ItemAssetId, o.ItemId });

                entity.ToTable("item_asset_transforms");

                entity.Property(e => e.ItemAssetId)
                    .HasColumnName("item_asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.StartFxGroupId)
                    .HasColumnName("start_fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.TriggerId)
                    .HasColumnName("trigger_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemAsset)
                    .WithMany(p => p.ItemAssetTransforms)
                    .HasForeignKey(d => d.ItemAssetId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemAssetTransforms)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemAssets>(entity =>
            {
                entity.ToTable("item_assets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AllowMirror)
                    .HasColumnName("allow_mirror")
                    .HasColumnType("bool");

                entity.Property(e => e.AttachmentOffsetPosX).HasColumnName("attachment_offset_pos_x");

                entity.Property(e => e.AttachmentOffsetPosY).HasColumnName("attachment_offset_pos_y");

                entity.Property(e => e.AttachmentOffsetPosZ).HasColumnName("attachment_offset_pos_z");

                entity.Property(e => e.AttachmentOffsetRotX).HasColumnName("attachment_offset_rot_x");

                entity.Property(e => e.AttachmentOffsetRotY).HasColumnName("attachment_offset_rot_y");

                entity.Property(e => e.AttachmentOffsetRotZ).HasColumnName("attachment_offset_rot_z");

                entity.Property(e => e.DefaultAnim).HasColumnName("default_anim");

                entity.Property(e => e.Detail)
                    .HasColumnName("detail")
                    .HasColumnType("int");

                entity.Property(e => e.HeelOffsetHeight).HasColumnName("heel_offset_height");

                entity.Property(e => e.HideHorn)
                    .HasColumnName("hide_horn")
                    .HasColumnType("bool");

                entity.Property(e => e.HideTail)
                    .HasColumnName("hide_tail")
                    .HasColumnType("bool");

                entity.Property(e => e.HingeDamping).HasColumnName("hinge_damping");

                entity.Property(e => e.HingeIdx)
                    .HasColumnName("hinge_idx")
                    .HasColumnType("int");

                entity.Property(e => e.HingeLimit).HasColumnName("hinge_limit");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.MoreAssetId)
                    .HasColumnName("more_asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.NameTagOffsetHeight).HasColumnName("name_tag_offset_height");

                entity.Property(e => e.Path).HasColumnName("path");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ItemAssets)
                    .HasForeignKey(d => d.ModelId);
            });
            
            modelBuilder.Entity<ItemBackpacks>(entity =>
            {
                entity.HasKey(o => new { o.FreshnessGroupId, o.ItemId });

                entity.ToTable("item_backpacks");

                entity.Property(e => e.Asset2Id)
                    .HasColumnName("asset2_id")
                    .HasColumnType("int");

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.BackpackTypeId)
                    .HasColumnName("backpack_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.DeclareSiegeZoneGroupId)
                    .HasColumnName("declare_siege_zone_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.FreshnessGroupId)
                    .HasColumnName("freshness_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.GliderAnimActionId)
                    .HasColumnName("glider_anim_action_id")
                    .HasColumnType("int");

                entity.Property(e => e.GliderFastAnimActionId)
                    .HasColumnName("glider_fast_anim_action_id")
                    .HasColumnType("int");

                entity.Property(e => e.GliderSlidingAnimActionId)
                    .HasColumnName("glider_sliding_anim_action_id")
                    .HasColumnType("int");

                entity.Property(e => e.GliderSlowAnimActionId)
                    .HasColumnName("glider_slow_anim_action_id")
                    .HasColumnType("int");

                entity.Property(e => e.Heavy)
                    .HasColumnName("heavy")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.NormalSpecialty)
                    .HasColumnName("normal_specialty")
                    .HasColumnType("bool");

                entity.Property(e => e.SkinKindId)
                    .HasColumnName("skin_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.StorageVisual).HasColumnName("storage_visual");

                entity.Property(e => e.UseAsStat)
                    .HasColumnName("use_as_stat")
                    .HasColumnType("bool");

                entity.HasOne(d => d.FreshnessGroup)
                    .WithMany(p => p.ItemBackpacks)
                    .HasForeignKey(d => d.FreshnessGroupId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemBackpacks)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemBags>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_bags");

                entity.Property(e => e.Capacity)
                    .HasColumnName("capacity")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemBags)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemBodyParts>(entity =>
            {
                entity.HasKey(o => new { o.ItemId, o.ModelId });

                entity.ToTable("item_body_parts");

                entity.Property(e => e.Asset1Id)
                    .HasColumnName("asset_1_id")
                    .HasColumnType("int");

                entity.Property(e => e.Asset2Id)
                    .HasColumnName("asset_2_id")
                    .HasColumnType("int");

                entity.Property(e => e.Asset3Id)
                    .HasColumnName("asset_3_id")
                    .HasColumnType("int");

                entity.Property(e => e.Asset4Id)
                    .HasColumnName("asset_4_id")
                    .HasColumnType("int");

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.CustomTexture1Id)
                    .HasColumnName("custom_texture_1_id")
                    .HasColumnType("int");

                entity.Property(e => e.CustomTexture2Id)
                    .HasColumnName("custom_texture_2_id")
                    .HasColumnType("int");

                entity.Property(e => e.CustomTexture3Id)
                    .HasColumnName("custom_texture_3_id")
                    .HasColumnType("int");

                entity.Property(e => e.CustomTexture4Id)
                    .HasColumnName("custom_texture_4_id")
                    .HasColumnType("int");

                entity.Property(e => e.CustomTextureId)
                    .HasColumnName("custom_texture_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceMask).HasColumnName("face_mask");

                entity.Property(e => e.HairBase).HasColumnName("hair_base");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.LeftEyeHeight)
                    .HasColumnName("left_eye_height")
                    .HasColumnType("int");

                entity.Property(e => e.LeftEyeWidth)
                    .HasColumnName("left_eye_width")
                    .HasColumnType("int");

                entity.Property(e => e.LeftEyeX)
                    .HasColumnName("left_eye_x")
                    .HasColumnType("int");

                entity.Property(e => e.LeftEyeY)
                    .HasColumnName("left_eye_y")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcOnly)
                    .HasColumnName("npc_only")
                    .HasColumnType("bool");

                entity.Property(e => e.OddEye)
                    .HasColumnName("odd_eye")
                    .HasColumnType("bool");

                entity.Property(e => e.RightEyeHeight)
                    .HasColumnName("right_eye_height")
                    .HasColumnType("int");

                entity.Property(e => e.RightEyeWidth)
                    .HasColumnName("right_eye_width")
                    .HasColumnType("int");

                entity.Property(e => e.RightEyeX)
                    .HasColumnName("right_eye_x")
                    .HasColumnType("int");

                entity.Property(e => e.RightEyeY)
                    .HasColumnName("right_eye_y")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemBodyParts)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ItemBodyParts)
                    .HasForeignKey(d => d.ModelId);
            });
            
            modelBuilder.Entity<ItemCapScaleForbids>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_cap_scale_forbids");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemCapScaleForbids)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemCapScaleRandomRates>(entity =>
            {
                entity.ToTable("item_cap_scale_random_rates");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CapScaleId)
                    .HasColumnName("cap_scale_id")
                    .HasColumnType("int");

                entity.Property(e => e.CapScaleValue)
                    .HasColumnName("cap_scale_value")
                    .HasColumnType("int");

                entity.Property(e => e.ScaleRandomRate)
                    .HasColumnName("scale_random_rate")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ItemCapScales>(entity =>
            {
                entity.ToTable("item_cap_scales");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ScaleMax)
                    .HasColumnName("scale_max")
                    .HasColumnType("int");

                entity.Property(e => e.ScaleMin)
                    .HasColumnName("scale_min")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.ItemCapScales)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<ItemCategories>(entity =>
            {
                entity.ToTable("item_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AuctionCharge)
                    .HasColumnName("auction_charge")
                    .HasColumnType("int");

                entity.Property(e => e.AuctionChargeDefault)
                    .HasColumnName("auction_charge_default")
                    .HasColumnType("bool");

                entity.Property(e => e.AuctionChargeEachItem)
                    .HasColumnName("auction_charge_each_item")
                    .HasColumnType("bool");

                entity.Property(e => e.CategoryOrder)
                    .HasColumnName("category_order")
                    .HasColumnType("int");

                entity.Property(e => e.Impl1Id)
                    .HasColumnName("impl1_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGroupId)
                    .HasColumnName("item_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ProcessedStateId)
                    .HasColumnName("processed_state_id")
                    .HasColumnType("int");

                entity.Property(e => e.Secure)
                    .HasColumnName("secure")
                    .HasColumnType("bool");

                entity.Property(e => e.UsageId)
                    .HasColumnName("usage_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseOrEquipmentSoundId)
                    .HasColumnName("use_or_equipment_sound_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemGroup)
                    .WithMany(p => p.ItemCategories)
                    .HasForeignKey(d => d.ItemGroupId);
            });

            modelBuilder.Entity<ItemConfigs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("item_configs");

                entity.Property(e => e.DeathDurabilityLossRatio)
                    .HasColumnName("death_durability_loss_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.DurabilityConst).HasColumnName("durability_const");

                entity.Property(e => e.DurabilityDecrementChance).HasColumnName("durability_decrement_chance");

                entity.Property(e => e.DurabilityRepairCostFactor).HasColumnName("durability_repair_cost_factor");

                entity.Property(e => e.HoldableDurabilityConst).HasColumnName("holdable_durability_const");

                entity.Property(e => e.HoldableStatConst)
                    .HasColumnName("holdable_stat_const")
                    .HasColumnType("int");

                entity.Property(e => e.ItemStatConst)
                    .HasColumnName("item_stat_const")
                    .HasColumnType("int");

                entity.Property(e => e.StatValueConst)
                    .HasColumnName("stat_value_const")
                    .HasColumnType("int");

                entity.Property(e => e.WearableDurabilityConst).HasColumnName("wearable_durability_const");

                entity.Property(e => e.WearableStatConst)
                    .HasColumnName("wearable_stat_const")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ItemConvPpackMembers>(entity =>
            {
                entity.ToTable("item_conv_ppack_members");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemConvId)
                    .HasColumnName("item_conv_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemConvPpackId)
                    .HasColumnName("item_conv_ppack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemConv)
                    .WithMany(p => p.ItemConvPpackMembers)
                    .HasForeignKey(d => d.ItemConvId);

                entity.HasOne(d => d.ItemConvPpack)
                    .WithMany(p => p.ItemConvPpackMembers)
                    .HasForeignKey(d => d.ItemConvPpackId);
            });

            modelBuilder.Entity<ItemConvPpacks>(entity =>
            {
                entity.ToTable("item_conv_ppacks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ChanceRate)
                    .HasColumnName("chance_rate")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ItemConvProducts>(entity =>
            {
                entity.ToTable("item_conv_products");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemConvPpackId)
                    .HasColumnName("item_conv_ppack_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Max)
                    .HasColumnName("max")
                    .HasColumnType("int");

                entity.Property(e => e.Min)
                    .HasColumnName("min")
                    .HasColumnType("int");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemConvPpack)
                    .WithMany(p => p.ItemConvProducts)
                    .HasForeignKey(d => d.ItemConvPpackId);

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.ItemConvProducts)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemConvProducts)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ItemConvReagentFilters>(entity =>
            {
                entity.ToTable("item_conv_reagent_filters");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemConvRpackId)
                    .HasColumnName("item_conv_rpack_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemImplId)
                    .HasColumnName("item_impl_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxItemGradeId)
                    .HasColumnName("max_item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxLevel)
                    .HasColumnName("max_level")
                    .HasColumnType("int");

                entity.Property(e => e.MinLevel)
                    .HasColumnName("min_level")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemConvRpack)
                    .WithMany(p => p.ItemConvReagentFilters)
                    .HasForeignKey(d => d.ItemConvRpackId);

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.ItemConvReagentFilters)
                    .HasForeignKey(d => d.ItemGradeId);
            });

            modelBuilder.Entity<ItemConvReagents>(entity =>
            {
                entity.ToTable("item_conv_reagents");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemConvRpackId)
                    .HasColumnName("item_conv_rpack_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxGradeId)
                    .HasColumnName("max_grade_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemConvRpack)
                    .WithMany(p => p.ItemConvReagents)
                    .HasForeignKey(d => d.ItemConvRpackId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemConvReagents)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ItemConvRpackMembers>(entity =>
            {
                entity.ToTable("item_conv_rpack_members");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemConvId)
                    .HasColumnName("item_conv_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemConvRpackId)
                    .HasColumnName("item_conv_rpack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemConv)
                    .WithMany(p => p.ItemConvRpackMembers)
                    .HasForeignKey(d => d.ItemConvId);

                entity.HasOne(d => d.ItemConvRpack)
                    .WithMany(p => p.ItemConvRpackMembers)
                    .HasForeignKey(d => d.ItemConvRpackId);
            });

            modelBuilder.Entity<ItemConvRpacks>(entity =>
            {
                entity.ToTable("item_conv_rpacks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<ItemConvSets>(entity =>
            {
                entity.ToTable("item_conv_sets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DialogContent).HasColumnName("dialog_content");

                entity.Property(e => e.DialogTitle).HasColumnName("dialog_title");
            });

            modelBuilder.Entity<ItemConvs>(entity =>
            {
                entity.ToTable("item_convs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemConvSetId)
                    .HasColumnName("item_conv_set_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemConvSet)
                    .WithMany(p => p.ItemConvs)
                    .HasForeignKey(d => d.ItemConvSetId);
            });
            
            modelBuilder.Entity<ItemDyeings>(entity =>
            {
                entity.HasKey(o => new { o.DyeingColorId, o.ItemId });

                entity.ToTable("item_dyeings");

                entity.Property(e => e.DyeingColorId)
                    .HasColumnName("dyeing_color_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DyeingColor)
                    .WithMany(p => p.ItemDyeings)
                    .HasForeignKey(d => d.DyeingColorId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemDyeings)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemEnchantRatioGroups>(entity =>
            {
                entity.ToTable("item_enchant_ratio_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemEnchantRatioKindId)
                    .HasColumnName("item_enchant_ratio_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemImplId)
                    .HasColumnName("item_impl_id")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<ItemEnchantRatioItems>(entity =>
            {
                entity.HasKey(o => new { o.ItemEnchantRatioGroupId, o.ItemId });

                entity.ToTable("item_enchant_ratio_items");

                entity.Property(e => e.ItemEnchantRatioGroupId)
                    .HasColumnName("item_enchant_ratio_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemEnchantRatioGroup)
                    .WithMany(p => p.ItemEnchantRatioItems)
                    .HasForeignKey(d => d.ItemEnchantRatioGroupId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemEnchantRatioItems)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemEnchantRatios>(entity =>
            {
                entity.HasKey(o => new { o.ItemEnchantRatioGroupId });

                entity.ToTable("item_enchant_ratios");

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("currency_id")
                    .HasColumnType("int");

                entity.Property(e => e.Grade)
                    .HasColumnName("grade")
                    .HasColumnType("int");

                entity.Property(e => e.GradeEnchantBreakRatio)
                    .HasColumnName("grade_enchant_break_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.GradeEnchantCost)
                    .HasColumnName("grade_enchant_cost")
                    .HasColumnType("int");

                entity.Property(e => e.GradeEnchantDowngradeMax)
                    .HasColumnName("grade_enchant_downgrade_max")
                    .HasColumnType("int");

                entity.Property(e => e.GradeEnchantDowngradeMin)
                    .HasColumnName("grade_enchant_downgrade_min")
                    .HasColumnType("int");

                entity.Property(e => e.GradeEnchantDowngradeRatio)
                    .HasColumnName("grade_enchant_downgrade_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.GradeEnchantGreatSuccessRatio)
                    .HasColumnName("grade_enchant_great_success_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.GradeEnchantSuccessRatio)
                    .HasColumnName("grade_enchant_success_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.ItemEnchantRatioGroupId)
                    .HasColumnName("item_enchant_ratio_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemEnchantRatioGroup)
                    .WithMany(p => p.ItemEnchantRatios)
                    .HasForeignKey(d => d.ItemEnchantRatioGroupId);
            });
            
            modelBuilder.Entity<ItemEnchantingGems>(entity =>
            {
                entity.HasKey(o => new { o.EquipSlotGroupId, o.GemVisualEffectId, o.ItemGradeId, o.ItemId });

                entity.ToTable("item_enchanting_gems");

                entity.Property(e => e.EisetId)
                    .HasColumnName("eiset_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipItemId)
                    .HasColumnName("equip_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipItemTagId)
                    .HasColumnName("equip_item_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipLevel)
                    .HasColumnName("equip_level")
                    .HasColumnType("int");

                entity.Property(e => e.EquipSlotGroupId)
                    .HasColumnName("equip_slot_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.GemVisualEffectId)
                    .HasColumnName("gem_visual_effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.IgnoreEquipItemTag)
                    .HasColumnName("ignore_equip_item_tag")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.EquipSlotGroup)
                    .WithMany(p => p.ItemEnchantingGems)
                    .HasForeignKey(d => d.EquipSlotGroupId);

                entity.HasOne(d => d.GemVisualEffect)
                    .WithMany(p => p.ItemEnchantingGems)
                    .HasForeignKey(d => d.GemVisualEffectId);

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.ItemEnchantingGems)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemEnchantingGems)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemGradeBuffs>(entity =>
            {
                entity.ToTable("item_grade_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.ItemGradeBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.ItemGradeBuffs)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemGradeBuffs)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ItemGradeDistributions>(entity =>
            {
                entity.ToTable("item_grade_distributions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Weight0)
                    .HasColumnName("weight_0")
                    .HasColumnType("int");

                entity.Property(e => e.Weight1)
                    .HasColumnName("weight_1")
                    .HasColumnType("int");

                entity.Property(e => e.Weight10)
                    .HasColumnName("weight_10")
                    .HasColumnType("int");

                entity.Property(e => e.Weight11)
                    .HasColumnName("weight_11")
                    .HasColumnType("int");

                entity.Property(e => e.Weight12)
                    .HasColumnName("weight_12")
                    .HasColumnType("int");

                entity.Property(e => e.Weight2)
                    .HasColumnName("weight_2")
                    .HasColumnType("int");

                entity.Property(e => e.Weight3)
                    .HasColumnName("weight_3")
                    .HasColumnType("int");

                entity.Property(e => e.Weight4)
                    .HasColumnName("weight_4")
                    .HasColumnType("int");

                entity.Property(e => e.Weight5)
                    .HasColumnName("weight_5")
                    .HasColumnType("int");

                entity.Property(e => e.Weight6)
                    .HasColumnName("weight_6")
                    .HasColumnType("int");

                entity.Property(e => e.Weight7)
                    .HasColumnName("weight_7")
                    .HasColumnType("int");

                entity.Property(e => e.Weight8)
                    .HasColumnName("weight_8")
                    .HasColumnType("int");

                entity.Property(e => e.Weight9)
                    .HasColumnName("weight_9")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<ItemGradeEnchantingSupports>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_grade_enchanting_supports");

                entity.Property(e => e.AddBreakMul)
                    .HasColumnName("add_break_mul")
                    .HasColumnType("int");

                entity.Property(e => e.AddBreakRatio)
                    .HasColumnName("add_break_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.AddDowngradeMul)
                    .HasColumnName("add_downgrade_mul")
                    .HasColumnType("int");

                entity.Property(e => e.AddDowngradeRatio)
                    .HasColumnName("add_downgrade_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.AddGreatSuccessGrade)
                    .HasColumnName("add_great_success_grade")
                    .HasColumnType("int");

                entity.Property(e => e.AddGreatSuccessMul)
                    .HasColumnName("add_great_success_mul")
                    .HasColumnType("int");

                entity.Property(e => e.AddGreatSuccessRatio)
                    .HasColumnName("add_great_success_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.AddSuccessMul)
                    .HasColumnName("add_success_mul")
                    .HasColumnType("int");

                entity.Property(e => e.AddSuccessRatio)
                    .HasColumnName("add_success_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.Icons)
                    .HasColumnName("icons")
                    .HasColumnType("int");

                entity.Property(e => e.ImplFlags)
                    .HasColumnName("impl_flags")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.RequireGradeMax)
                    .HasColumnName("require_grade_max")
                    .HasColumnType("int");

                entity.Property(e => e.RequireGradeMin)
                    .HasColumnName("require_grade_min")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemGradeEnchantingSupports)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemGradeSkills>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("item_grade_skills");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemGradeId).HasColumnName("item_grade_id");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.SkillId).HasColumnName("skill_id");
            });

            modelBuilder.Entity<ItemGrades>(entity =>
            {
                entity.ToTable("item_grades");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ColorArgb).HasColumnName("color_argb");

                entity.Property(e => e.ColorArgbSecond).HasColumnName("color_argb_second");

                entity.Property(e => e.DurabilityValue).HasColumnName("durability_value");

                entity.Property(e => e.GradeOrder)
                    .HasColumnName("grade_order")
                    .HasColumnType("int");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.RefundMultiplier)
                    .HasColumnName("refund_multiplier")
                    .HasColumnType("int");

                entity.Property(e => e.StatMultiplier)
                    .HasColumnName("stat_multiplier")
                    .HasColumnType("int");

                entity.Property(e => e.UpgradeRatio)
                    .HasColumnName("upgrade_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.VarHoldableArmor).HasColumnName("var_holdable_armor");

                entity.Property(e => e.VarHoldableDps).HasColumnName("var_holdable_dps");

                entity.Property(e => e.VarHoldableHealDps).HasColumnName("var_holdable_heal_dps");

                entity.Property(e => e.VarHoldableMagicDps).HasColumnName("var_holdable_magic_dps");

                entity.Property(e => e.VarWearableArmor).HasColumnName("var_wearable_armor");

                entity.Property(e => e.VarWearableMagicResistance).HasColumnName("var_wearable_magic_resistance");

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.ItemGrades)
                    .HasForeignKey(d => d.IconId);
            });

            modelBuilder.Entity<ItemGroups>(entity =>
            {
                entity.ToTable("item_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.VisibleUi)
                    .HasColumnName("visible_ui")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<ItemGuideIcons>(entity =>
            {
                entity.ToTable("item_guide_icons");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.CategoryType).HasColumnName("category_type");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGuideId)
                    .HasColumnName("item_guide_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemImplId)
                    .HasColumnName("item_impl_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.ItemGuideIcons)
                    .HasForeignKey(d => d.IconId);

                entity.HasOne(d => d.ItemGuide)
                    .WithMany(p => p.ItemGuideIcons)
                    .HasForeignKey(d => d.ItemGuideId);
            });

            modelBuilder.Entity<ItemGuides>(entity =>
            {
                entity.ToTable("item_guides");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemGuideCategoryId)
                    .HasColumnName("item_guide_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.LootMainCategoryId)
                    .HasColumnName("loot_main_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.LootSubCategoryId)
                    .HasColumnName("loot_sub_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Show)
                    .HasColumnName("show")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowOrder)
                    .HasColumnName("show_order")
                    .HasColumnType("int");

                entity.Property(e => e.WayToLoot).HasColumnName("way_to_loot");

                entity.Property(e => e.ZoneKey)
                    .HasColumnName("zone_key")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<ItemHousingDecorations>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_housing_decorations");

                entity.Property(e => e.DesignId)
                    .HasColumnName("design_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Restore)
                    .HasColumnName("restore")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemHousingDecorations)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemHousings>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_housings");

                entity.Property(e => e.DesignId)
                    .HasColumnName("design_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemHousings)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemLookConvertHoldables>(entity =>
            {
                entity.ToTable("item_look_convert_holdables");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HoldableId)
                    .HasColumnName("holdable_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemLookConvertId)
                    .HasColumnName("item_look_convert_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Holdable)
                    .WithMany(p => p.ItemLookConvertHoldables)
                    .HasForeignKey(d => d.HoldableId);

                entity.HasOne(d => d.ItemLookConvert)
                    .WithMany(p => p.ItemLookConvertHoldables)
                    .HasForeignKey(d => d.ItemLookConvertId);
            });

            modelBuilder.Entity<ItemLookConvertRequiredItems>(entity =>
            {
                entity.ToTable("item_look_convert_required_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemLookConvertId)
                    .HasColumnName("item_look_convert_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemLookConvertRequiredItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.ItemLookConvert)
                    .WithMany(p => p.ItemLookConvertRequiredItems)
                    .HasForeignKey(d => d.ItemLookConvertId);
            });

            modelBuilder.Entity<ItemLookConvertWearables>(entity =>
            {
                entity.ToTable("item_look_convert_wearables");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemCategoryId)
                    .HasColumnName("item_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemLookConvertId)
                    .HasColumnName("item_look_convert_id")
                    .HasColumnType("int");

                entity.Property(e => e.WearableSlotId)
                    .HasColumnName("wearable_slot_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemLookConvert)
                    .WithMany(p => p.ItemLookConvertWearables)
                    .HasForeignKey(d => d.ItemLookConvertId);

                entity.HasOne(d => d.WearableSlot)
                    .WithMany(p => p.ItemLookConvertWearables)
                    .HasForeignKey(d => d.WearableSlotId);
            });

            modelBuilder.Entity<ItemLookConverts>(entity =>
            {
                entity.ToTable("item_look_converts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Gold)
                    .HasColumnName("gold")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<ItemLookRevertRequiredItems>(entity =>
            {
                entity.ToTable("item_look_revert_required_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemLookConvertId)
                    .HasColumnName("item_look_convert_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemLookRevertRequiredItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.ItemLookConvert)
                    .WithMany(p => p.ItemLookRevertRequiredItems)
                    .HasForeignKey(d => d.ItemLookConvertId);
            });
            
            modelBuilder.Entity<ItemOpenPapers>(entity =>
            {
                entity.HasKey(o => new { o.BookId, o.BookPageId, o.ItemId });

                entity.ToTable("item_open_papers");

                entity.Property(e => e.BookId)
                    .HasColumnName("book_id")
                    .HasColumnType("int");

                entity.Property(e => e.BookPageId)
                    .HasColumnName("book_page_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Book)
                    .WithMany(p => p.ItemOpenPapers)
                    .HasForeignKey(d => d.BookId);

                entity.HasOne(d => d.BookPage)
                    .WithMany(p => p.ItemOpenPapers)
                    .HasForeignKey(d => d.BookPageId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemOpenPapers)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemProcBindings>(entity =>
            {
                entity.ToTable("item_proc_bindings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ProcId)
                    .HasColumnName("proc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemProcBindings)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ItemProcs>(entity =>
            {
                entity.ToTable("item_procs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ChanceKindId)
                    .HasColumnName("chance_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChanceParam)
                    .HasColumnName("chance_param")
                    .HasColumnType("int");

                entity.Property(e => e.ChanceRate)
                    .HasColumnName("chance_rate")
                    .HasColumnType("int");

                entity.Property(e => e.CooldownSec)
                    .HasColumnName("cooldown_sec")
                    .HasColumnType("int");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Finisher)
                    .HasColumnName("finisher")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemLevelBasedChanceBonus)
                    .HasColumnName("item_level_based_chance_bonus")
                    .HasColumnType("int");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.TriggerSkillId)
                    .HasColumnName("trigger_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.TriggerTagId)
                    .HasColumnName("trigger_tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.ItemProcs)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<ItemRankAssignments>(entity =>
            {
                entity.ToTable("item_rank_assignments");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HoldableId)
                    .HasColumnName("holdable_id")
                    .HasColumnType("int");

                entity.Property(e => e.RankingId)
                    .HasColumnName("ranking_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Holdable)
                    .WithMany(p => p.ItemRankAssignments)
                    .HasForeignKey(d => d.HoldableId);

                entity.HasOne(d => d.Ranking)
                    .WithMany(p => p.ItemRankAssignments)
                    .HasForeignKey(d => d.RankingId);
            });
            
            modelBuilder.Entity<ItemRecipes>(entity =>
            {
                entity.HasKey(o => new { o.CraftId, o.ItemId});

                entity.ToTable("item_recipes");

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.ItemRecipes)
                    .HasForeignKey(d => d.CraftId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemRecipes)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemRndAttrCategories>(entity =>
            {
                entity.ToTable("item_rnd_attr_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CurrencyId)
                    .HasColumnName("currency_id")
                    .HasColumnType("int");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.MaterialGradeLimit)
                    .HasColumnName("material_grade_limit")
                    .HasColumnType("int");

                entity.Property(e => e.MaxEvolvingGrade)
                    .HasColumnName("max_evolving_grade")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ReRollItemId)
                    .HasColumnName("re_roll_item_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ItemRndAttrCategoryMaterials>(entity =>
            {
                entity.ToTable("item_rnd_attr_category_materials");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemRndAttrCategoryId)
                    .HasColumnName("item_rnd_attr_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaterialId)
                    .HasColumnName("material_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ItemRndAttrCategoryProperties>(entity =>
            {
                entity.ToTable("item_rnd_attr_category_properties");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GainExp)
                    .HasColumnName("gain_exp")
                    .HasColumnType("int");

                entity.Property(e => e.GoldMul)
                    .HasColumnName("gold_mul")
                    .HasColumnType("int");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemRndAttrCategoryId)
                    .HasColumnName("item_rnd_attr_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxUnitModifierNum)
                    .HasColumnName("max_unit_modifier_num")
                    .HasColumnType("int");

                entity.Property(e => e.ReqExp)
                    .HasColumnName("req_exp")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ItemRndAttrUnitModifierGroupSets>(entity =>
            {
                entity.ToTable("item_rnd_attr_unit_modifier_group_sets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemRndAttrCategoryId)
                    .HasColumnName("item_rnd_attr_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PickNum)
                    .HasColumnName("pick_num")
                    .HasColumnType("int");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ItemRndAttrUnitModifierGroups>(entity =>
            {
                entity.ToTable("item_rnd_attr_unit_modifier_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemRndAttrUnitModifierGroupSetId)
                    .HasColumnName("item_rnd_attr_unit_modifier_group_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnitAttributeId)
                    .HasColumnName("unit_attribute_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnitModifierTypeId)
                    .HasColumnName("unit_modifier_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemRndAttrUnitModifierGroupSet)
                    .WithMany(p => p.ItemRndAttrUnitModifierGroups)
                    .HasForeignKey(d => d.ItemRndAttrUnitModifierGroupSetId);
            });

            modelBuilder.Entity<ItemRndAttrUnitModifiers>(entity =>
            {
                entity.ToTable("item_rnd_attr_unit_modifiers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Max)
                    .HasColumnName("max")
                    .HasColumnType("int");

                entity.Property(e => e.Min)
                    .HasColumnName("min")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<ItemSecureExceptions>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_secure_exceptions");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSecureExceptions)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemSetItems>(entity =>
            {
                entity.ToTable("item_set_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemSetId)
                    .HasColumnName("item_set_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSetItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.ItemSet)
                    .WithMany(p => p.ItemSetItems)
                    .HasForeignKey(d => d.ItemSetId);
            });

            modelBuilder.Entity<ItemSets>(entity =>
            {
                entity.ToTable("item_sets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<ItemShipyards>(entity =>
            {
                entity.HasKey(o => new { o.ItemId, o.ShipyardId });

                entity.ToTable("item_shipyards");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShipyardId)
                    .HasColumnName("shipyard_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemShipyards)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Shipyard)
                    .WithMany(p => p.ItemShipyards)
                    .HasForeignKey(d => d.ShipyardId);
            });
            
            modelBuilder.Entity<ItemSlaveEquipmentGradeSpawns>(entity =>
            {
                entity.ToTable("item_slave_equipment_grade_spawns");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.ItemSlaveEquipmentGradeSpawns)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSlaveEquipmentGradeSpawns)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.ItemSlaveEquipmentGradeSpawns)
                    .HasForeignKey(d => d.SlaveId);
            });

            modelBuilder.Entity<ItemSlaveEquipmentSlaveEquipslotPacks>(entity =>
            {
                entity.ToTable("item_slave_equipment_slave_equipslot_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadScale).HasColumnName("doodad_scale");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveEquipPackId)
                    .HasColumnName("slave_equip_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlotPackId)
                    .HasColumnName("slot_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSlaveEquipmentSlaveEquipslotPacks)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.SlaveEquipPack)
                    .WithMany(p => p.ItemSlaveEquipmentSlaveEquipslotPacks)
                    .HasForeignKey(d => d.SlaveEquipPackId);
            });

            modelBuilder.Entity<ItemSlaveEquipments>(entity =>
            {
                entity.ToTable("item_slave_equipments");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadScale).HasColumnName("doodad_scale");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.RequireItemId)
                    .HasColumnName("require_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveEquipPackId)
                    .HasColumnName("slave_equip_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlotPackId)
                    .HasColumnName("slot_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSlaveEquipments)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.SlaveEquipPack)
                    .WithMany(p => p.ItemSlaveEquipments)
                    .HasForeignKey(d => d.SlaveEquipPackId);

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.ItemSlaveEquipments)
                    .HasForeignKey(d => d.SlaveId);
            });

            modelBuilder.Entity<ItemSmeltingItems>(entity =>
            {
                entity.ToTable("item_smelting_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisplayProb)
                    .HasColumnName("display_prob")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemSmeltingId)
                    .HasColumnName("item_smelting_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.ItemSmeltingItems)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSmeltingItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.ItemSmelting)
                    .WithMany(p => p.ItemSmeltingItems)
                    .HasForeignKey(d => d.ItemSmeltingId);
            });

            modelBuilder.Entity<ItemSmeltings>(entity =>
            {
                entity.ToTable("item_smeltings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActabilityLimit)
                    .HasColumnName("actability_limit")
                    .HasColumnType("int");

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.Gold)
                    .HasColumnName("gold")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemSetId)
                    .HasColumnName("item_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemSmeltingProbId)
                    .HasColumnName("item_smelting_prob_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSmeltings)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.ItemSet)
                    .WithMany(p => p.ItemSmeltings)
                    .HasForeignKey(d => d.ItemSetId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.ItemSmeltings)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<ItemSocketChances>(entity =>
            {
                entity.ToTable("item_socket_chances");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CostRatio)
                    .HasColumnName("cost_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.FailBreak)
                    .HasColumnName("fail_break")
                    .HasColumnType("bool");
            });
            
            modelBuilder.Entity<ItemSocketLevelLimits>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_socket_level_limits");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSocketLevelLimits)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemSocketNumLimits>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("item_socket_num_limits");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.NumSocket)
                    .HasColumnName("num_socket")
                    .HasColumnType("int");

                entity.Property(e => e.SlotId)
                    .HasColumnName("slot_id")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<ItemSockets>(entity =>
            {
                entity.HasKey(o => new { o.EquipSlotGroupId, o.ItemId, o.ItemSocketChanceId });

                entity.ToTable("item_sockets");

                entity.Property(e => e.EisetId)
                    .HasColumnName("eiset_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipItemId)
                    .HasColumnName("equip_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipItemTagId)
                    .HasColumnName("equip_item_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipSlotGroupId)
                    .HasColumnName("equip_slot_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Extractable)
                    .HasColumnName("extractable")
                    .HasColumnType("bool");

                entity.Property(e => e.IgnoreEquipItemTag)
                    .HasColumnName("ignore_equip_item_tag")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemSocketChanceId)
                    .HasColumnName("item_socket_chance_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.EquipSlotGroup)
                    .WithMany(p => p.ItemSockets)
                    .HasForeignKey(d => d.EquipSlotGroupId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSockets)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.ItemSocketChance)
                    .WithMany(p => p.ItemSockets)
                    .HasForeignKey(d => d.ItemSocketChanceId);
            });
            
            modelBuilder.Entity<ItemSpawnDoodads>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_spawn_doodads");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSpawnDoodads)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemSummonMates>(entity =>
            {
                entity.HasKey(o => new { o.ItemId, o.NpcId });

                entity.ToTable("item_summon_mates");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSummonMates)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.ItemSummonMates)
                    .HasForeignKey(d => d.NpcId);
            });
            
            modelBuilder.Entity<ItemSummonSlaves>(entity =>
            {
                entity.HasKey(o => new { o.ItemId, o.SlaveId });

                entity.ToTable("item_summon_slaves");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemSummonSlaves)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.ItemSummonSlaves)
                    .HasForeignKey(d => d.SlaveId);
            });
            
            modelBuilder.Entity<ItemTools>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("item_tools");

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemTools)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<ItemWeapons>(entity =>
            {
                entity.ToTable("item_weapons");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AssetId)
                    .HasColumnName("asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.BaseEnchantable)
                    .HasColumnName("base_enchantable")
                    .HasColumnType("bool");

                entity.Property(e => e.BaseEquipment)
                    .HasColumnName("base_equipment")
                    .HasColumnType("bool");

                entity.Property(e => e.ChargeCount)
                    .HasColumnName("charge_count")
                    .HasColumnType("int");

                entity.Property(e => e.ChargeLifetime)
                    .HasColumnName("charge_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.DrawnScale).HasColumnName("drawn_scale");

                entity.Property(e => e.DurabilityMultiplier)
                    .HasColumnName("durability_multiplier")
                    .HasColumnType("int");

                entity.Property(e => e.EisetId)
                    .HasColumnName("eiset_id")
                    .HasColumnType("int");

                entity.Property(e => e.EnhancedItemMaterialId)
                    .HasColumnName("enhanced_item_material_id")
                    .HasColumnType("int");

                entity.Property(e => e.FixedVisualEffectId)
                    .HasColumnName("fixed_visual_effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.HoldableId)
                    .HasColumnName("holdable_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemRndAttrCategoryId)
                    .HasColumnName("item_rnd_attr_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.ModSetId)
                    .HasColumnName("mod_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.RechargeBuffId)
                    .HasColumnName("recharge_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.RechargeRestrictItemId)
                    .HasColumnName("recharge_restrict_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.RechargeRndAttrUnitModifierRestrictItemId)
                    .HasColumnName("recharge_rnd_attr_unit_modifier_restrict_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Repairable)
                    .HasColumnName("repairable")
                    .HasColumnType("bool");

                entity.Property(e => e.RndAttrUnitModifierLifetime)
                    .HasColumnName("rnd_attr_unit_modifier_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.SkinKindId)
                    .HasColumnName("skin_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAsStat)
                    .HasColumnName("useAsStat")
                    .HasColumnType("bool");

                entity.Property(e => e.WornScale).HasColumnName("worn_scale");

                entity.HasOne(d => d.EnhancedItemMaterial)
                    .WithMany(p => p.ItemWeapons)
                    .HasForeignKey(d => d.EnhancedItemMaterialId);

                entity.HasOne(d => d.Holdable)
                    .WithMany(p => p.ItemWeapons)
                    .HasForeignKey(d => d.HoldableId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ItemWeapons)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<ItemTemplate>(entity =>
            {
                entity.ToTable("items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActabilityRequirement)
                    .HasColumnName("actability_requirement")
                    .HasColumnType("int");

                entity.Property(e => e.AuctionACategoryId)
                    .HasColumnName("auction_a_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.AuctionBCategoryId)
                    .HasColumnName("auction_b_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.AuctionCCategoryId)
                    .HasColumnName("auction_c_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.AuctionCharge)
                    .HasColumnName("auction_charge")
                    .HasColumnType("int");

                entity.Property(e => e.AuctionChargeDefault)
                    .HasColumnName("auction_charge_default")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoRegisterToActionbar)
                    .HasColumnName("auto_register_to_actionbar")
                    .HasColumnType("bool");

                entity.Property(e => e.BindId)
                    .HasColumnName("bind_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffModifierTooltip).HasColumnName("buff_modifier_tooltip");

                entity.Property(e => e.CashItem)
                    .HasColumnName("cash_item")
                    .HasColumnType("bool");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.CharGenderId)
                    .HasColumnName("char_gender_id")
                    .HasColumnType("int");

                entity.Property(e => e.ContributionPointPrice)
                    .HasColumnName("contribution_point_price")
                    .HasColumnType("int");

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.DisallowCoffer)
                    .HasColumnName("disallow_coffer")
                    .HasColumnType("bool");

                entity.Property(e => e.Disenchantable)
                    .HasColumnName("disenchantable")
                    .HasColumnType("bool");

                entity.Property(e => e.ExpAbsLifetime)
                    .HasColumnName("exp_abs_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.ExpDate).HasColumnName("exp_date");

                entity.Property(e => e.ExpOnlineLifetime)
                    .HasColumnName("exp_online_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.ExpeditionLevel)
                    .HasColumnName("expedition_level")
                    .HasColumnType("int");

                entity.Property(e => e.FixedGrade)
                    .HasColumnName("fixed_grade")
                    .HasColumnType("int");

                entity.Property(e => e.Gradable)
                    .HasColumnName("gradable")
                    .HasColumnType("bool");

                entity.Property(e => e.HonorPrice)
                    .HasColumnName("honor_price")
                    .HasColumnType("int");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.ImplId)
                    .HasColumnName("impl_id")
                    .HasColumnType("int");

                entity.Property(e => e.IngameshopMainCategory)
                    .HasColumnName("ingameshop_main_category")
                    .HasColumnType("int");

                entity.Property(e => e.IngameshopSubCategory)
                    .HasColumnName("ingameshop_sub_category")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGuideId)
                    .HasColumnName("item_guide_id")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.LevelLimit)
                    .HasColumnName("level_limit")
                    .HasColumnType("int");

                entity.Property(e => e.LevelRequirement)
                    .HasColumnName("level_requirement")
                    .HasColumnType("int");

                entity.Property(e => e.LimitedSaleCount)
                    .HasColumnName("limited_sale_count")
                    .HasColumnType("int");

                entity.Property(e => e.LivingPointPrice)
                    .HasColumnName("living_point_price")
                    .HasColumnType("int");

                entity.Property(e => e.LootMulti)
                    .HasColumnName("loot_multi")
                    .HasColumnType("bool");

                entity.Property(e => e.LootQuestId)
                    .HasColumnName("loot_quest_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaleIconId)
                    .HasColumnName("male_icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxEnchantableGrade)
                    .HasColumnName("max_enchantable_grade")
                    .HasColumnType("int");

                entity.Property(e => e.MaxStackSize)
                    .HasColumnName("max_stack_size")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NotifyUi)
                    .HasColumnName("notify_ui")
                    .HasColumnType("bool");

                entity.Property(e => e.OneTimeSale)
                    .HasColumnName("one_time_sale")
                    .HasColumnType("bool");

                entity.Property(e => e.OverIconId)
                    .HasColumnName("over_icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.PickupLimit)
                    .HasColumnName("pickup_limit")
                    .HasColumnType("int");

                entity.Property(e => e.PickupSoundId)
                    .HasColumnName("pickup_sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasColumnType("int");

                entity.Property(e => e.Refund)
                    .HasColumnName("refund")
                    .HasColumnType("int");

                entity.Property(e => e.Sellable)
                    .HasColumnName("sellable")
                    .HasColumnType("bool");

                entity.Property(e => e.SideEffect)
                    .HasColumnName("side_effect")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillModifierTooltip).HasColumnName("skill_modifier_tooltip");

                entity.Property(e => e.SpecialtyZoneId)
                    .HasColumnName("specialty_zone_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseOrEquipmentSoundId)
                    .HasColumnName("use_or_equipment_sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseSkillAsReagent)
                    .HasColumnName("use_skill_as_reagent")
                    .HasColumnType("bool");

                entity.Property(e => e.UseSkillId)
                    .HasColumnName("use_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseSkillLifetime)
                    .HasColumnName("use_skill_lifetime")
                    .HasColumnType("int");

                entity.Property(e => e.UseSkillRechargeRestrictItemId)
                    .HasColumnName("use_skill_recharge_restrict_item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.ActabilityGroupId);

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.CraftId);

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.IconId);

                entity.HasOne(d => d.ItemGuide)
                    .WithMany(p => p.Items)
                    .HasForeignKey(d => d.ItemGuideId);
            });

            modelBuilder.Entity<KillNpcWithoutCorpseEffects>(entity =>
            {
                entity.ToTable("kill_npc_without_corpse_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GiveExp)
                    .HasColumnName("give_exp")
                    .HasColumnType("bool");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.Radius).HasColumnName("radius");

                entity.Property(e => e.Vanish)
                    .HasColumnName("vanish")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.KillNpcWithoutCorpseEffects)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<LevelUpEffects>(entity =>
            {
                entity.ToTable("level_up_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Levels>(entity =>
            {
                entity.ToTable("levels");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ExpeditionExp)
                    .HasColumnName("expedition_exp")
                    .HasColumnType("int");

                entity.Property(e => e.ReqItemCount)
                    .HasColumnName("req_item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ReqItemId)
                    .HasColumnName("req_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillPoints)
                    .HasColumnName("skill_points")
                    .HasColumnType("int");

                entity.Property(e => e.TotalExp)
                    .HasColumnName("total_exp")
                    .HasColumnType("int");

                entity.Property(e => e.TotalMateExp)
                    .HasColumnName("total_mate_exp")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<LinearFuncs>(entity =>
            {
                entity.ToTable("linear_funcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EndValue)
                    .HasColumnName("end_value")
                    .HasColumnType("int");

                entity.Property(e => e.StartValue)
                    .HasColumnName("start_value")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<LocalDevelopments>(entity =>
            {
                entity.ToTable("local_developments");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadAlmightyId)
                    .HasColumnName("doodad_almighty_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadPhase0)
                    .HasColumnName("doodad_phase_0")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadPhase1)
                    .HasColumnName("doodad_phase_1")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadPhase2)
                    .HasColumnName("doodad_phase_2")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadPhase3)
                    .HasColumnName("doodad_phase_3")
                    .HasColumnType("int");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.PhaseEffect0).HasColumnName("phase_effect_0");

                entity.Property(e => e.PhaseEffect1).HasColumnName("phase_effect_1");

                entity.Property(e => e.PhaseEffect2).HasColumnName("phase_effect_2");

                entity.Property(e => e.PhaseEffect3).HasColumnName("phase_effect_3");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.LocalDevelopments)
                    .HasForeignKey(d => d.ZoneGroupId);
            });

            modelBuilder.Entity<LocalizedTexts>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("localized_texts");

                entity.Property(e => e.EnUs).HasColumnName("en_us");

                entity.Property(e => e.Idx)
                    .HasColumnName("idx")
                    .HasColumnType("int");

                entity.Property(e => e.TblColumnName).HasColumnName("tbl_column_name");

                entity.Property(e => e.TblName).HasColumnName("tbl_name");
            });

            modelBuilder.Entity<LootActabilityGroups>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("loot_actability_groups");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LootGroupId).HasColumnName("loot_group_id");

                entity.Property(e => e.LootPackId).HasColumnName("loot_pack_id");

                entity.Property(e => e.MaxDice).HasColumnName("max_dice");

                entity.Property(e => e.MinDice).HasColumnName("min_dice");
            });

            modelBuilder.Entity<LootGroups>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("loot_groups");

                entity.Property(e => e.DropRate).HasColumnName("drop_rate");

                entity.Property(e => e.GroupNo).HasColumnName("group_no");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemGradeDistributionId).HasColumnName("item_grade_distribution_id");

                entity.Property(e => e.PackId).HasColumnName("pack_id");
            });

            modelBuilder.Entity<LootPackDroppingNpcs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("loot_pack_dropping_npcs");

                entity.Property(e => e.DefaultPack).HasColumnName("default_pack");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.LootPackId).HasColumnName("loot_pack_id");

                entity.Property(e => e.NpcId).HasColumnName("npc_id");
            });

            modelBuilder.Entity<Loots>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("loots");

                entity.Property(e => e.AlwaysDrop).HasColumnName("always_drop");

                entity.Property(e => e.DropRate).HasColumnName("drop_rate");

                entity.Property(e => e.GradeId).HasColumnName("grade_id");

                entity.Property(e => e.Group).HasColumnName("group");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.LootPackId).HasColumnName("loot_pack_id");

                entity.Property(e => e.MaxAmount).HasColumnName("max_amount");

                entity.Property(e => e.MinAmount).HasColumnName("min_amount");
            });

            modelBuilder.Entity<ManaBurnEffects>(entity =>
            {
                entity.ToTable("mana_burn_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BaseMax)
                    .HasColumnName("base_max")
                    .HasColumnType("int");

                entity.Property(e => e.BaseMin)
                    .HasColumnName("base_min")
                    .HasColumnType("int");

                entity.Property(e => e.DamageRatio)
                    .HasColumnName("damage_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.LevelMd).HasColumnName("level_md");

                entity.Property(e => e.LevelVaEnd)
                    .HasColumnName("level_va_end")
                    .HasColumnType("int");

                entity.Property(e => e.LevelVaStart)
                    .HasColumnName("level_va_start")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ManualFuncs>(entity =>
            {
                entity.ToTable("manual_funcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ValueList).HasColumnName("value_list");
            });

            modelBuilder.Entity<MateEquipPackGroups>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mate_equip_pack_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.MateEquipPackId)
                    .HasColumnName("mate_equip_pack_id")
                    .HasColumnType("INT");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<MateEquipPackItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mate_equip_pack_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("INT");

                entity.Property(e => e.MateEquipPackId)
                    .HasColumnName("mate_equip_pack_id")
                    .HasColumnType("INT");
            });
            
            modelBuilder.Entity<MateEquipPacks>(entity =>
            {
                entity.HasKey(o => new { o.ItemId, o.NpcId });

                entity.ToTable("mate_equip_packs");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.MateEquipPacks)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.MateEquipPacks)
                    .HasForeignKey(d => d.NpcId);
            });
            
            modelBuilder.Entity<MateEquipSlotPacks>(entity =>
            {
                entity.ToTable("mate_equip_slot_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Chest)
                    .HasColumnName("chest")
                    .HasColumnType("bool");

                entity.Property(e => e.Feet)
                    .HasColumnName("feet")
                    .HasColumnType("bool");

                entity.Property(e => e.Head)
                    .HasColumnName("head")
                    .HasColumnType("bool");

                entity.Property(e => e.MateTypeId)
                    .HasColumnName("mate_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Waist)
                    .HasColumnName("waist")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<MerchantGoods>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("merchant_goods");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("INT");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("INT");

                entity.Property(e => e.MerchantPackId)
                    .HasColumnName("merchant_pack_id")
                    .HasColumnType("INT");
            });
            
            modelBuilder.Entity<MerchantPacks>(entity =>
            {
                entity.HasKey(o => new { o.ItemId });

                entity.ToTable("merchant_packs");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.PackId)
                    .HasColumnName("pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.MerchantPacks)
                    .HasForeignKey(d => d.ItemId);
            });
            
            modelBuilder.Entity<MerchantPriceRatios>(entity =>
            {
                entity.HasKey(o => new { o.NpcId });

                entity.ToTable("merchant_price_ratios");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.Ratio)
                    .HasColumnName("ratio")
                    .HasColumnType("int");

                entity.Property(e => e.TradegoodSaleRatio)
                    .HasColumnName("tradegood_sale_ratio")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.MerchantPriceRatios)
                    .HasForeignKey(d => d.NpcId);
            });
            
            modelBuilder.Entity<Merchants>(entity =>
            {
                entity.HasKey(o => new { o.ItemId, o.NpcId });

                entity.ToTable("merchants");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Merchants)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.Merchants)
                    .HasForeignKey(d => d.NpcId);
            });
            
            modelBuilder.Entity<MineJewelRates>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("mine_jewel_rates");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.JewelItemId).HasColumnName("jewel_item_id");

                entity.Property(e => e.MineItemId).HasColumnName("mine_item_id");

                entity.Property(e => e.Rate).HasColumnName("rate");
            });

            modelBuilder.Entity<ModelAttachPointStrings>(entity =>
            {
                entity.ToTable("model_attach_point_strings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Actor).HasColumnName("actor");

                entity.Property(e => e.Prefab).HasColumnName("prefab");
            });

            modelBuilder.Entity<ModelBindings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("model_bindings");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.BreathZ).HasColumnName("breath_z");

                entity.Property(e => e.HorseRein)
                    .HasColumnName("horse_rein")
                    .HasColumnType("bool");

                entity.Property(e => e.NotCollideWithCamera)
                    .HasColumnName("not_collide_with_camera")
                    .HasColumnType("bool");

                entity.Property(e => e.OffsetX).HasColumnName("offset_x");

                entity.Property(e => e.OffsetY).HasColumnName("offset_y");

                entity.Property(e => e.OffsetZ).HasColumnName("offset_z");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");
            });

            modelBuilder.Entity<ModelMutations>(entity =>
            {
                entity.ToTable("model_mutations");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BaseModelId)
                    .HasColumnName("base_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.MutatedModelId)
                    .HasColumnName("mutated_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.ModelMutations)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<ModelQuestCameras>(entity =>
            {
                entity.ToTable("model_quest_cameras");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestCameraId)
                    .HasColumnName("quest_camera_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ModelQuestCameras)
                    .HasForeignKey(d => d.ModelId);

                entity.HasOne(d => d.QuestCamera)
                    .WithMany(p => p.ModelQuestCameras)
                    .HasForeignKey(d => d.QuestCameraId);
            });

            modelBuilder.Entity<Models>(entity =>
            {
                entity.ToTable("models");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Big)
                    .HasColumnName("big")
                    .HasColumnType("bool");

                entity.Property(e => e.CameraDistance).HasColumnName("camera_distance");

                entity.Property(e => e.CameraDistanceForWideAngle).HasColumnName("camera_distance_for_wide_angle");

                entity.Property(e => e.DespawnDoodadOnCollision)
                    .HasColumnName("despawn_doodad_on_collision")
                    .HasColumnType("bool");

                entity.Property(e => e.DyingTime).HasColumnName("dying_time");

                entity.Property(e => e.HighImpactFxGroupId)
                    .HasColumnName("high_impact_fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.LowImpactFxGroupId)
                    .HasColumnName("low_impact_fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.MiddleImpactFxGroupId)
                    .HasColumnName("middle_impact_fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.MountPoseId)
                    .HasColumnName("mount_pose_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NameTagOffset).HasColumnName("name_tag_offset");

                entity.Property(e => e.PlayMountAnimation)
                    .HasColumnName("play_mount_animation")
                    .HasColumnType("bool");

                entity.Property(e => e.PlayerMountNameTagPos)
                    .HasColumnName("player_mount_name_tag_pos")
                    .HasColumnType("bool");

                entity.Property(e => e.Selectable)
                    .HasColumnName("selectable")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowNameTag)
                    .HasColumnName("show_name_tag")
                    .HasColumnType("bool");

                entity.Property(e => e.SoundMaterialId)
                    .HasColumnName("sound_material_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundPackId)
                    .HasColumnName("sound_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.SubId)
                    .HasColumnName("sub_id")
                    .HasColumnType("int");

                entity.Property(e => e.SubType).HasColumnName("sub_type");

                entity.Property(e => e.TargetDecalSize).HasColumnName("target_decal_size");

                entity.Property(e => e.UseTargetDecal)
                    .HasColumnName("use_target_decal")
                    .HasColumnType("bool");

                entity.Property(e => e.UseTargetHighlight)
                    .HasColumnName("use_target_highlight")
                    .HasColumnType("bool");

                entity.Property(e => e.UseTargetSilhouette)
                    .HasColumnName("use_target_silhouette")
                    .HasColumnType("bool");

                entity.HasOne(d => d.MountPose)
                    .WithMany(p => p.Models)
                    .HasForeignKey(d => d.MountPoseId);

                entity.HasOne(d => d.SoundPack)
                    .WithMany(p => p.Models)
                    .HasForeignKey(d => d.SoundPackId);
            });
            
            modelBuilder.Entity<MonitorNpcs>(entity =>
            {
                entity.HasKey(o => new { o.NpcId });

                entity.ToTable("monitor_npcs");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.MonitorNpcs)
                    .HasForeignKey(d => d.NpcId);
            });
            
            modelBuilder.Entity<MouldPackItems>(entity =>
            {
                entity.ToTable("mould_pack_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.MouldId)
                    .HasColumnName("mould_id")
                    .HasColumnType("int");

                entity.Property(e => e.MouldPackId)
                    .HasColumnName("mould_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Mould)
                    .WithMany(p => p.MouldPackItems)
                    .HasForeignKey(d => d.MouldId);

                entity.HasOne(d => d.MouldPack)
                    .WithMany(p => p.MouldPackItems)
                    .HasForeignKey(d => d.MouldPackId);
            });

            modelBuilder.Entity<MouldPacks>(entity =>
            {
                entity.ToTable("mould_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<Moulds>(entity =>
            {
                entity.ToTable("moulds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.Property(e => e.Delay)
                    .HasColumnName("delay")
                    .HasColumnType("int");

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.Moulds)
                    .HasForeignKey(d => d.CraftId);
            });

            modelBuilder.Entity<MountAttachedSkills>(entity =>
            {
                entity.ToTable("mount_attached_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.MountSkillId)
                    .HasColumnName("mount_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.MountSkill)
                    .WithMany(p => p.MountAttachedSkills)
                    .HasForeignKey(d => d.MountSkillId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.MountAttachedSkills)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<MountPoses>(entity =>
            {
                entity.ToTable("mount_poses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<MountSkills>(entity =>
            {
                entity.ToTable("mount_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CheckAttachPoint)
                    .HasColumnName("check_attach_point")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.MountSkills)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<MoveToLocationEffects>(entity =>
            {
                entity.ToTable("move_to_location_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.OwnHouseOnly)
                    .HasColumnName("own_house_only")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<MoveToRezPointEffects>(entity =>
            {
                entity.ToTable("move_to_rez_point_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<MusicNoteLimits>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("music_note_limits");

                entity.Property(e => e.NoteLength)
                    .HasColumnName("note_length")
                    .HasColumnType("int");

                entity.Property(e => e.Step)
                    .HasColumnName("step")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<NationMemberLimits>(entity =>
            {
                entity.ToTable("nation_member_limits");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DominionCount)
                    .HasColumnName("dominion_count")
                    .HasColumnType("int");

                entity.Property(e => e.MemberCount)
                    .HasColumnName("member_count")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<NationRelations>(entity =>
            {
                entity.ToTable("nation_relations");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DefaultMemberCount)
                    .HasColumnName("default_member_count")
                    .HasColumnType("int");

                entity.Property(e => e.HostileEndHour)
                    .HasColumnName("hostile_end_hour")
                    .HasColumnType("int");

                entity.Property(e => e.HostileEndMinute)
                    .HasColumnName("hostile_end_minute")
                    .HasColumnType("int");

                entity.Property(e => e.HostileEndWeek)
                    .HasColumnName("hostile_end_week")
                    .HasColumnType("int");

                entity.Property(e => e.HostileStartHour)
                    .HasColumnName("hostile_start_hour")
                    .HasColumnType("int");

                entity.Property(e => e.HostileStartMinute)
                    .HasColumnName("hostile_start_minute")
                    .HasColumnType("int");

                entity.Property(e => e.HostileStartWeek)
                    .HasColumnName("hostile_start_week")
                    .HasColumnType("int");

                entity.Property(e => e.HousingPack1Id)
                    .HasColumnName("housing_pack_1_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingPack2Id)
                    .HasColumnName("housing_pack_2_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingPack3Id)
                    .HasColumnName("housing_pack_3_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingPack4Id)
                    .HasColumnName("housing_pack_4_id")
                    .HasColumnType("int");

                entity.Property(e => e.HousingPack5Id)
                    .HasColumnName("housing_pack_5_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.PerMemberCount)
                    .HasColumnName("per_member_count")
                    .HasColumnType("int");

                entity.Property(e => e.PerMemberItemAdd)
                    .HasColumnName("per_member_item_add")
                    .HasColumnType("int");

                entity.Property(e => e.RejectChargePercent)
                    .HasColumnName("reject_charge_percent")
                    .HasColumnType("int");

                entity.Property(e => e.RequestEndHour)
                    .HasColumnName("request_end_hour")
                    .HasColumnType("int");

                entity.Property(e => e.RequestEndMinute)
                    .HasColumnName("request_end_minute")
                    .HasColumnType("int");

                entity.Property(e => e.RequestEndWeek)
                    .HasColumnName("request_end_week")
                    .HasColumnType("int");

                entity.Property(e => e.RequestStartHour)
                    .HasColumnName("request_start_hour")
                    .HasColumnType("int");

                entity.Property(e => e.RequestStartMinute)
                    .HasColumnName("request_start_minute")
                    .HasColumnType("int");

                entity.Property(e => e.RequestStartWeek)
                    .HasColumnName("request_start_week")
                    .HasColumnType("int");

                entity.Property(e => e.VoteEndHour)
                    .HasColumnName("vote_end_hour")
                    .HasColumnType("int");

                entity.Property(e => e.VoteEndMinute)
                    .HasColumnName("vote_end_minute")
                    .HasColumnType("int");

                entity.Property(e => e.VoteEndWeek)
                    .HasColumnName("vote_end_week")
                    .HasColumnType("int");

                entity.Property(e => e.VoteStartHour)
                    .HasColumnName("vote_start_hour")
                    .HasColumnType("int");

                entity.Property(e => e.VoteStartMinute)
                    .HasColumnName("vote_start_minute")
                    .HasColumnType("int");

                entity.Property(e => e.VoteStartWeek)
                    .HasColumnName("vote_start_week")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.NationRelations)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<NpcAiClientParams>(entity =>
            {
                entity.ToTable("npc_ai_client_params");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AiParam).HasColumnName("ai_param");
            });

            modelBuilder.Entity<NpcChatBubbles>(entity =>
            {
                entity.ToTable("npc_chat_bubbles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AiEventId)
                    .HasColumnName("ai_event_id")
                    .HasColumnType("int");

                entity.Property(e => e.Bubble).HasColumnName("bubble");

                entity.Property(e => e.ShowUi)
                    .HasColumnName("show_ui")
                    .HasColumnType("bool");

                entity.HasOne(d => d.AiEvent)
                    .WithMany(p => p.NpcChatBubbles)
                    .HasForeignKey(d => d.AiEventId);
            });

            modelBuilder.Entity<NpcDoodadBindings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("npc_doodad_bindings");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.Persist)
                    .HasColumnName("persist")
                    .HasColumnType("bool");
            });
            
            modelBuilder.Entity<NpcInitialBuffs>(entity =>
            {
                entity.HasKey(o => new { o.BuffId, o.NpcId });

                entity.ToTable("npc_initial_buffs");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.NpcInitialBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.NpcInitialBuffs)
                    .HasForeignKey(d => d.NpcId);
            });
            
            modelBuilder.Entity<NpcInteractionSets>(entity =>
            {
                entity.ToTable("npc_interaction_sets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<NpcInteractions>(entity =>
            {
                entity.ToTable("npc_interactions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcInteractionSetId)
                    .HasColumnName("npc_interaction_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.NpcInteractionSet)
                    .WithMany(p => p.NpcInteractions)
                    .HasForeignKey(d => d.NpcInteractionSetId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.NpcInteractions)
                    .HasForeignKey(d => d.SkillId);
            });
            
            modelBuilder.Entity<NpcMountSkills>(entity =>
            {
                entity.HasKey(o => new { o.MountSkillId, o.NpcId });

                entity.ToTable("npc_mount_skills");

                entity.Property(e => e.MountSkillId)
                    .HasColumnName("mount_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.MountSkill)
                    .WithMany(p => p.NpcMountSkills)
                    .HasForeignKey(d => d.MountSkillId);

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.NpcMountSkills)
                    .HasForeignKey(d => d.NpcId);
            });
            
            modelBuilder.Entity<NpcMoveToZoneEffectItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("npc_move_to_zone_effect_items");

                entity.Property(e => e.AiAnchorId).HasColumnName("ai_anchor_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.NpcMoveToZoneEffectId).HasColumnName("npc_move_to_zone_effect_id");

                entity.Property(e => e.Weight).HasColumnName("weight");

                entity.Property(e => e.ZoneId).HasColumnName("zone_id");
            });

            modelBuilder.Entity<NpcMoveToZoneEffects>(entity =>
            {
                entity.ToTable("npc_move_to_zone_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });
            
            modelBuilder.Entity<NpcNickBuffs>(entity =>
            {
                entity.HasKey(o => new { o.BuffId, o.NpcNicknameId });

                entity.ToTable("npc_nick_buffs");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcNicknameId)
                    .HasColumnName("npc_nickname_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.NpcNickBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.NpcNickname)
                    .WithMany(p => p.NpcNickBuffs)
                    .HasForeignKey(d => d.NpcNicknameId);
            });
            
            modelBuilder.Entity<NpcNicknames>(entity =>
            {
                entity.ToTable("npc_nicknames");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<NpcPostureSets>(entity =>
            {
                entity.ToTable("npc_posture_sets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestAnimActionId)
                    .HasColumnName("quest_anim_action_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<NpcPostures>(entity =>
            {
                entity.ToTable("npc_postures");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AnimActionId)
                    .HasColumnName("anim_action_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcPostureSetId)
                    .HasColumnName("npc_posture_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.StartTodTime)
                    .HasColumnName("start_tod_time")
                    .HasColumnType("int");

                entity.Property(e => e.TalkAnim).HasColumnName("talk_anim");

                entity.HasOne(d => d.AnimAction)
                    .WithMany(p => p.NpcPostures)
                    .HasForeignKey(d => d.AnimActionId);

                entity.HasOne(d => d.NpcPostureSet)
                    .WithMany(p => p.NpcPostures)
                    .HasForeignKey(d => d.NpcPostureSetId);
            });

            modelBuilder.Entity<NpcStrafeParams>(entity =>
            {
                entity.ToTable("npc_strafe_params");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EndDistance).HasColumnName("end_distance");

                entity.Property(e => e.StartDistance).HasColumnName("start_distance");

                entity.Property(e => e.UseDirectDistance)
                    .HasColumnName("use_direct_distance")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<Npcs>(entity =>
            {
                entity.ToTable("npcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbilityChanger)
                    .HasColumnName("ability_changer")
                    .HasColumnType("bool");

                entity.Property(e => e.AbsoluteReturnDistance).HasColumnName("absolute_return_distance");

                entity.Property(e => e.AcceptAggroLink)
                    .HasColumnName("accept_aggro_link")
                    .HasColumnType("bool");

                entity.Property(e => e.ActivateAiAlways)
                    .HasColumnName("activate_ai_always")
                    .HasColumnType("bool");

                entity.Property(e => e.Aggression)
                    .HasColumnName("aggression")
                    .HasColumnType("bool");

                entity.Property(e => e.AggroLinkHelpDist).HasColumnName("aggro_link_help_dist");

                entity.Property(e => e.AggroLinkSightCheck)
                    .HasColumnName("aggro_link_sight_check")
                    .HasColumnType("bool");

                entity.Property(e => e.AggroLinkSpecialGuard)
                    .HasColumnName("aggro_link_special_guard")
                    .HasColumnType("bool");

                entity.Property(e => e.AggroLinkSpecialIgnoreNpcAttacker)
                    .HasColumnName("aggro_link_special_ignore_npc_attacker")
                    .HasColumnType("bool");

                entity.Property(e => e.AggroLinkSpecialRuleId)
                    .HasColumnName("aggro_link_special_rule_id")
                    .HasColumnType("int");

                entity.Property(e => e.AiFileId)
                    .HasColumnName("ai_file_id")
                    .HasColumnType("int");

                entity.Property(e => e.AttackStartRangeScale).HasColumnName("attack_start_range_scale");

                entity.Property(e => e.Auctioneer)
                    .HasColumnName("auctioneer")
                    .HasColumnType("bool");

                entity.Property(e => e.Banker)
                    .HasColumnName("banker")
                    .HasColumnType("bool");

                entity.Property(e => e.BaseSkillDelay).HasColumnName("base_skill_delay");

                entity.Property(e => e.BaseSkillId)
                    .HasColumnName("base_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.BaseSkillStrafe)
                    .HasColumnName("base_skill_strafe")
                    .HasColumnType("bool");

                entity.Property(e => e.BattleFieldRecruiter)
                    .HasColumnName("battle_field_recruiter")
                    .HasColumnType("bool");

                entity.Property(e => e.Blacksmith)
                    .HasColumnName("blacksmith")
                    .HasColumnType("bool");

                entity.Property(e => e.CharRaceId)
                    .HasColumnName("char_race_id")
                    .HasColumnType("int");

                entity.Property(e => e.CheckBackpack)
                    .HasColumnName("check_backpack")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckTargetUnderTerrain)
                    .HasColumnName("check_target_under_terrain")
                    .HasColumnType("bool");

                entity.Property(e => e.CrowdEffect)
                    .HasColumnName("crowd_effect")
                    .HasColumnType("bool");

                entity.Property(e => e.DecayingSecAfterLooted)
                    .HasColumnName("decaying_sec_after_looted")
                    .HasColumnType("int");

                entity.Property(e => e.DontPushableLikeGhost)
                    .HasColumnName("dont_pushable_like_ghost")
                    .HasColumnType("bool");

                entity.Property(e => e.EngageCombatGiveQuestId)
                    .HasColumnName("engage_combat_give_quest_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipClothsId)
                    .HasColumnName("equip_cloths_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipWeaponsId)
                    .HasColumnName("equip_weapons_id")
                    .HasColumnType("int");

                entity.Property(e => e.ExpAdder)
                    .HasColumnName("exp_adder")
                    .HasColumnType("int");

                entity.Property(e => e.ExpMultiplier).HasColumnName("exp_multiplier");

                entity.Property(e => e.Expedition)
                    .HasColumnName("expedition")
                    .HasColumnType("bool");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.ForceTargetMeOnAttack)
                    .HasColumnName("force_target_me_on_attack")
                    .HasColumnType("bool");

                entity.Property(e => e.HeirLevel)
                    .HasColumnName("heir_level")
                    .HasColumnType("int");

                entity.Property(e => e.HonorPoint)
                    .HasColumnName("honor_point")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.LookConverter)
                    .HasColumnName("look_converter")
                    .HasColumnType("bool");

                entity.Property(e => e.MateEquipSlotPackId)
                    .HasColumnName("mate_equip_slot_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.MateKindId)
                    .HasColumnName("mate_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.MateReviveDelay)
                    .HasColumnName("mate_revive_delay")
                    .HasColumnType("int");

                entity.Property(e => e.MateReviveHpPercent)
                    .HasColumnName("mate_revive_hp_percent")
                    .HasColumnType("int");

                entity.Property(e => e.MateReviveMpPercent)
                    .HasColumnName("mate_revive_mp_percent")
                    .HasColumnType("int");

                entity.Property(e => e.Merchant)
                    .HasColumnName("merchant")
                    .HasColumnType("bool");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NationRelationVote)
                    .HasColumnName("nation_relation_vote")
                    .HasColumnType("bool");

                entity.Property(e => e.NoApplyTotalCustom)
                    .HasColumnName("no_apply_total_custom")
                    .HasColumnType("bool");

                entity.Property(e => e.NoExp)
                    .HasColumnName("no_exp")
                    .HasColumnType("bool");

                entity.Property(e => e.NoPenalty)
                    .HasColumnName("no_penalty")
                    .HasColumnType("bool");

                entity.Property(e => e.NonPushableByActor)
                    .HasColumnName("non_pushable_by_actor")
                    .HasColumnType("bool");

                entity.Property(e => e.NpcAiClientParamId)
                    .HasColumnName("npc_ai_client_param_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcAiParamId)
                    .HasColumnName("npc_ai_param_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcGradeId)
                    .HasColumnName("npc_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcInteractionSetId)
                    .HasColumnName("npc_interaction_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcKindId)
                    .HasColumnName("npc_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcNicknameId)
                    .HasColumnName("npc_nickname_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcPostureSetId)
                    .HasColumnName("npc_posture_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcStrafeParamId)
                    .HasColumnName("npc_strafe_param_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcTemplateId)
                    .HasColumnName("npc_template_id")
                    .HasColumnType("int");

                entity.Property(e => e.Opacity).HasColumnName("opacity");

                entity.Property(e => e.PetItemId)
                    .HasColumnName("pet_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Priest)
                    .HasColumnName("priest")
                    .HasColumnType("bool");

                entity.Property(e => e.Repairman)
                    .HasColumnName("repairman")
                    .HasColumnType("bool");

                entity.Property(e => e.ReturnDistance).HasColumnName("return_distance");

                entity.Property(e => e.ReturnWhenEnterHousingArea)
                    .HasColumnName("return_when_enter_housing_area")
                    .HasColumnType("bool");

                entity.Property(e => e.Scale).HasColumnName("scale");

                entity.Property(e => e.ShowFactionTag)
                    .HasColumnName("show_faction_tag")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowNameTag)
                    .HasColumnName("show_name_tag")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowOnBossTelescope)
                    .HasColumnName("show_on_boss_telescope")
                    .HasColumnType("bool");

                entity.Property(e => e.SightFovScale).HasColumnName("sight_fov_scale");

                entity.Property(e => e.SightRangeScale).HasColumnName("sight_range_scale");

                entity.Property(e => e.SkillTrainer)
                    .HasColumnName("skill_trainer")
                    .HasColumnType("bool");

                entity.Property(e => e.SoState).HasColumnName("so_state");

                entity.Property(e => e.SoundPackId)
                    .HasColumnName("sound_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.Specialty)
                    .HasColumnName("specialty")
                    .HasColumnType("bool");

                entity.Property(e => e.SpecialtyCoinId)
                    .HasColumnName("specialty_coin_id")
                    .HasColumnType("int");

                entity.Property(e => e.Stabler)
                    .HasColumnName("stabler")
                    .HasColumnType("bool");

                entity.Property(e => e.Teleporter)
                    .HasColumnName("teleporter")
                    .HasColumnType("bool");

                entity.Property(e => e.TotalCustomId)
                    .HasColumnName("total_custom_id")
                    .HasColumnType("int");

                entity.Property(e => e.TrackFriendship)
                    .HasColumnName("track_friendship")
                    .HasColumnType("bool");

                entity.Property(e => e.TradegoodBuy)
                    .HasColumnName("tradegood_buy")
                    .HasColumnType("bool");

                entity.Property(e => e.Trader)
                    .HasColumnName("trader")
                    .HasColumnType("bool");

                entity.Property(e => e.UseAbuserList)
                    .HasColumnName("use_abuser_list")
                    .HasColumnType("bool");

                entity.Property(e => e.UseDdcmsMountSkill)
                    .HasColumnName("use_ddcms_mount_skill")
                    .HasColumnType("bool");

                entity.Property(e => e.UseModelCameraDistance)
                    .HasColumnName("use_model_camera_distance")
                    .HasColumnType("bool");

                entity.Property(e => e.UseRangeMod)
                    .HasColumnName("use_range_mod")
                    .HasColumnType("bool");

                entity.Property(e => e.VisibleToCreatorOnly)
                    .HasColumnName("visible_to_creator_only")
                    .HasColumnType("bool");

                entity.HasOne(d => d.AiFile)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.AiFileId);

                entity.HasOne(d => d.MateEquipSlotPack)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.MateEquipSlotPackId);

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.ModelId);

                entity.HasOne(d => d.NpcAiClientParam)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.NpcAiClientParamId);

                entity.HasOne(d => d.NpcInteractionSet)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.NpcInteractionSetId);

                entity.HasOne(d => d.NpcNickname)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.NpcNicknameId);

                entity.HasOne(d => d.NpcPostureSet)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.NpcPostureSetId);

                entity.HasOne(d => d.NpcStrafeParam)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.NpcStrafeParamId);

                entity.HasOne(d => d.SoundPack)
                    .WithMany(p => p.Npcs)
                    .HasForeignKey(d => d.SoundPackId);
            });

            modelBuilder.Entity<OpenPortalEffects>(entity =>
            {
                entity.ToTable("open_portal_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Distance).HasColumnName("distance");
            });

            modelBuilder.Entity<OpenPortalInlandReagents>(entity =>
            {
                entity.ToTable("open_portal_inland_reagents");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.OpenPortalEffectId)
                    .HasColumnName("open_portal_effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OpenPortalInlandReagents)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.OpenPortalEffect)
                    .WithMany(p => p.OpenPortalInlandReagents)
                    .HasForeignKey(d => d.OpenPortalEffectId);
            });

            modelBuilder.Entity<OpenPortalOutlandReagents>(entity =>
            {
                entity.ToTable("open_portal_outland_reagents");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.OpenPortalEffectId)
                    .HasColumnName("open_portal_effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.OpenPortalOutlandReagents)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.OpenPortalEffect)
                    .WithMany(p => p.OpenPortalOutlandReagents)
                    .HasForeignKey(d => d.OpenPortalEffectId);
            });

            modelBuilder.Entity<PassiveBuffs>(entity =>
            {
                entity.ToTable("passive_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbilityId)
                    .HasColumnName("ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasColumnType("bool");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighAbilityId)
                    .HasColumnName("high_ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.ReqPoints)
                    .HasColumnName("req_points")
                    .HasColumnType("int");

                entity.Property(e => e.SkillPoints)
                    .HasColumnName("skill_points")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.PassiveBuffs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<PcbangBenefitLists>(entity =>
            {
                entity.ToTable("pcbang_benefit_lists");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GroupIdx)
                    .HasColumnName("group_idx")
                    .HasColumnType("int");

                entity.Property(e => e.Kind).HasColumnName("kind");

                entity.Property(e => e.Value1).HasColumnName("value1");

                entity.Property(e => e.Value2).HasColumnName("value2");

                entity.Property(e => e.Value3).HasColumnName("value3");
            });

            modelBuilder.Entity<PcbangBuffs>(entity =>
            {
                entity.ToTable("pcbang_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Active)
                    .HasColumnName("active")
                    .HasColumnType("bool");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.PremiumGradeId)
                    .HasColumnName("premium_grade_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.PcbangBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.PremiumGrade)
                    .WithMany(p => p.PcbangBuffs)
                    .HasForeignKey(d => d.PremiumGradeId);
            });

            modelBuilder.Entity<PeriodBuffs>(entity =>
            {
                entity.ToTable("period_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddMaxLp)
                    .HasColumnName("add_max_lp")
                    .HasColumnType("int");

                entity.Property(e => e.AddSpecialityRatio)
                    .HasColumnName("add_speciality_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.OfflineLaborpower)
                    .HasColumnName("offline_laborpower")
                    .HasColumnType("int");

                entity.Property(e => e.OnlineLaborpower)
                    .HasColumnName("online_laborpower")
                    .HasColumnType("int");

                entity.Property(e => e.ReplacePremiumOfflineLp)
                    .HasColumnName("replace_premium_offline_lp")
                    .HasColumnType("bool");

                entity.Property(e => e.ReplacePremiumOnlineLp)
                    .HasColumnName("replace_premium_online_lp")
                    .HasColumnType("bool");

                entity.Property(e => e.UseAuctionConfig)
                    .HasColumnName("use_auction_config")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.PeriodBuffs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<PhysicalExplosionEffects>(entity =>
            {
                entity.ToTable("physical_explosion_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HoleSize).HasColumnName("hole_size");

                entity.Property(e => e.Pressure).HasColumnName("pressure");

                entity.Property(e => e.Radius).HasColumnName("radius");
            });

            modelBuilder.Entity<PlayLogEffects>(entity =>
            {
                entity.ToTable("play_log_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Message).HasColumnName("message");
            });

            modelBuilder.Entity<PlotAoeConditions>(entity =>
            {
                entity.ToTable("plot_aoe_conditions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConditionId)
                    .HasColumnName("condition_id")
                    .HasColumnType("int");

                entity.Property(e => e.EventId)
                    .HasColumnName("event_id")
                    .HasColumnType("int");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<PlotConditions>(entity =>
            {
                entity.ToTable("plot_conditions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.NotCondition)
                    .HasColumnName("not_condition")
                    .HasColumnType("bool");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.Param1)
                    .HasColumnName("param1")
                    .HasColumnType("int");

                entity.Property(e => e.Param2)
                    .HasColumnName("param2")
                    .HasColumnType("int");

                entity.Property(e => e.Param3)
                    .HasColumnName("param3")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<PlotEffects>(entity =>
            {
                entity.ToTable("plot_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualId)
                    .HasColumnName("actual_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActualType).HasColumnName("actual_type");

                entity.Property(e => e.EventId)
                    .HasColumnName("event_id")
                    .HasColumnType("int");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasColumnType("int");

                entity.Property(e => e.SourceId)
                    .HasColumnName("source_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetId)
                    .HasColumnName("target_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<PlotEventConditions>(entity =>
            {
                entity.ToTable("plot_event_conditions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConditionId)
                    .HasColumnName("condition_id")
                    .HasColumnType("int");

                entity.Property(e => e.EventId)
                    .HasColumnName("event_id")
                    .HasColumnType("int");

                entity.Property(e => e.NotifyFailure)
                    .HasColumnName("notify_failure")
                    .HasColumnType("bool");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasColumnType("int");

                entity.Property(e => e.SourceId)
                    .HasColumnName("source_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetId)
                    .HasColumnName("target_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<PlotEvents>(entity =>
            {
                entity.ToTable("plot_events");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AoeDiminishing)
                    .HasColumnName("aoe_diminishing")
                    .HasColumnType("bool");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OnlyDieUnit)
                    .HasColumnName("only_die_unit")
                    .HasColumnType("bool");

                entity.Property(e => e.OnlyMyPet)
                    .HasColumnName("only_my_pet")
                    .HasColumnType("bool");

                entity.Property(e => e.OnlyMySlave)
                    .HasColumnName("only_my_slave")
                    .HasColumnType("bool");

                entity.Property(e => e.OnlyPetOwner)
                    .HasColumnName("only_pet_owner")
                    .HasColumnType("bool");

                entity.Property(e => e.PlotId)
                    .HasColumnName("plot_id")
                    .HasColumnType("int");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasColumnType("int");

                entity.Property(e => e.SourceUpdateMethodId)
                    .HasColumnName("source_update_method_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodId)
                    .HasColumnName("target_update_method_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam1)
                    .HasColumnName("target_update_method_param1")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam10)
                    .HasColumnName("target_update_method_param10")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam11)
                    .HasColumnName("target_update_method_param11")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam2)
                    .HasColumnName("target_update_method_param2")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam3)
                    .HasColumnName("target_update_method_param3")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam4)
                    .HasColumnName("target_update_method_param4")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam5)
                    .HasColumnName("target_update_method_param5")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam6)
                    .HasColumnName("target_update_method_param6")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam7)
                    .HasColumnName("target_update_method_param7")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam8)
                    .HasColumnName("target_update_method_param8")
                    .HasColumnType("int");

                entity.Property(e => e.TargetUpdateMethodParam9)
                    .HasColumnName("target_update_method_param9")
                    .HasColumnType("int");

                entity.Property(e => e.Tickets)
                    .HasColumnName("tickets")
                    .HasColumnType("int");

                entity.HasOne(d => d.Plot)
                    .WithMany(p => p.PlotEvents)
                    .HasForeignKey(d => d.PlotId);
            });

            modelBuilder.Entity<PlotNextEvents>(entity =>
            {
                entity.ToTable("plot_next_events");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddAnimCsTime)
                    .HasColumnName("add_anim_cs_time")
                    .HasColumnType("bool");

                entity.Property(e => e.CancelOnBigHit)
                    .HasColumnName("cancel_on_big_hit")
                    .HasColumnType("bool");

                entity.Property(e => e.Casting)
                    .HasColumnName("casting")
                    .HasColumnType("bool");

                entity.Property(e => e.CastingCancelable)
                    .HasColumnName("casting_cancelable")
                    .HasColumnType("bool");

                entity.Property(e => e.CastingDelayable)
                    .HasColumnName("casting_delayable")
                    .HasColumnType("bool");

                entity.Property(e => e.CastingInc)
                    .HasColumnName("casting_inc")
                    .HasColumnType("int");

                entity.Property(e => e.CastingUseable)
                    .HasColumnName("casting_useable")
                    .HasColumnType("bool");

                entity.Property(e => e.Channeling)
                    .HasColumnName("channeling")
                    .HasColumnType("bool");

                entity.Property(e => e.Delay)
                    .HasColumnName("delay")
                    .HasColumnType("int");

                entity.Property(e => e.EventId)
                    .HasColumnName("event_id")
                    .HasColumnType("int");

                entity.Property(e => e.Fail)
                    .HasColumnName("fail")
                    .HasColumnType("bool");

                entity.Property(e => e.HighAbilityResource)
                    .HasColumnName("high_ability_resource")
                    .HasColumnType("bool");

                entity.Property(e => e.NextEventId)
                    .HasColumnName("next_event_id")
                    .HasColumnType("int");

                entity.Property(e => e.PerTarget)
                    .HasColumnName("per_target")
                    .HasColumnType("bool");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasColumnType("int");

                entity.Property(e => e.Speed)
                    .HasColumnName("speed")
                    .HasColumnType("int");

                entity.Property(e => e.UseExeTime)
                    .HasColumnName("use_exe_time")
                    .HasColumnType("bool");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Plots>(entity =>
            {
                entity.ToTable("plots");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.TargetTypeId)
                    .HasColumnName("target_type_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<PreCompletedAchievements>(entity =>
            {
                entity.ToTable("pre_completed_achievements");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CompletedAchievementId)
                    .HasColumnName("completed_achievement_id")
                    .HasColumnType("int");

                entity.Property(e => e.MyAchievementId)
                    .HasColumnName("my_achievement_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<PrefabElements>(entity =>
            {
                entity.ToTable("prefab_elements");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FilePath).HasColumnName("file_path");

                entity.Property(e => e.PrefabModelId)
                    .HasColumnName("prefab_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.StateId)
                    .HasColumnName("state_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.PrefabModel)
                    .WithMany(p => p.PrefabElements)
                    .HasForeignKey(d => d.PrefabModelId);
            });

            modelBuilder.Entity<PrefabModels>(entity =>
            {
                entity.ToTable("prefab_models");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<PremiumBenefitLists>(entity =>
            {
                entity.ToTable("premium_benefit_lists");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Grade1).HasColumnName("grade1");

                entity.Property(e => e.Grade10).HasColumnName("grade10");

                entity.Property(e => e.Grade2).HasColumnName("grade2");

                entity.Property(e => e.Grade3).HasColumnName("grade3");

                entity.Property(e => e.Grade4).HasColumnName("grade4");

                entity.Property(e => e.Grade5).HasColumnName("grade5");

                entity.Property(e => e.Grade6).HasColumnName("grade6");

                entity.Property(e => e.Grade7).HasColumnName("grade7");

                entity.Property(e => e.Grade8).HasColumnName("grade8");

                entity.Property(e => e.Grade9).HasColumnName("grade9");

                entity.Property(e => e.MenuName).HasColumnName("menu_name");
            });

            modelBuilder.Entity<PremiumBenefits>(entity =>
            {
                entity.ToTable("premium_benefits");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.MaxLabor)
                    .HasColumnName("max_labor")
                    .HasColumnType("int");

                entity.Property(e => e.OfflineLabor)
                    .HasColumnName("offline_labor")
                    .HasColumnType("int");

                entity.Property(e => e.OnlineLabor)
                    .HasColumnName("online_labor")
                    .HasColumnType("int");

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.PremiumBenefits)
                    .HasForeignKey(d => d.IconId);
            });

            modelBuilder.Entity<PremiumConfigs>(entity =>
            {
                entity.ToTable("premium_configs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConnectPoint)
                    .HasColumnName("connect_point")
                    .HasColumnType("int");

                entity.Property(e => e.DeactivatePoint)
                    .HasColumnName("deactivate_point")
                    .HasColumnType("int");

                entity.Property(e => e.DisconnectPoint)
                    .HasColumnName("disconnect_point")
                    .HasColumnType("int");

                entity.Property(e => e.MaxGrade)
                    .HasColumnName("max_grade")
                    .HasColumnType("int");

                entity.Property(e => e.MaxPoint)
                    .HasColumnName("max_point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<PremiumGrades>(entity =>
            {
                entity.ToTable("premium_grades");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<PremiumPoints>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("premium_points");

                entity.Property(e => e.Grade).HasColumnName("grade");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Money).HasColumnName("money");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PremiumId).HasColumnName("premium_id");

                entity.Property(e => e.SellType).HasColumnName("sell_type");

                entity.Property(e => e.Time).HasColumnName("time");
            });

            modelBuilder.Entity<PriestBuffs>(entity =>
            {
                entity.ToTable("priest_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("int");

                entity.Property(e => e.Position)
                    .HasColumnName("position")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.PriestBuffs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<Projectiles>(entity =>
            {
                entity.ToTable("projectiles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DestBoneId)
                    .HasColumnName("dest_bone_id")
                    .HasColumnType("int");

                entity.Property(e => e.FxGroupId)
                    .HasColumnName("fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.IgnoreZRotation)
                    .HasColumnName("ignore_z_rotation")
                    .HasColumnType("bool");

                entity.Property(e => e.IsPermanent)
                    .HasColumnName("is_permanent")
                    .HasColumnType("bool");

                entity.Property(e => e.ProjPhysicId)
                    .HasColumnName("proj_physic_id")
                    .HasColumnType("int");

                entity.Property(e => e.SrcBoneId)
                    .HasColumnName("src_bone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.FxGroup)
                    .WithMany(p => p.Projectiles)
                    .HasForeignKey(d => d.FxGroupId);
            });

            modelBuilder.Entity<PutDownBackpackEffects>(entity =>
            {
                entity.ToTable("put_down_backpack_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BackpackDoodadId)
                    .HasColumnName("backpack_doodad_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActCheckCompleteComponents>(entity =>
            {
                entity.ToTable("quest_act_check_complete_components");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CompleteComponent)
                    .HasColumnName("complete_component")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActCheckDistances>(entity =>
            {
                entity.ToTable("quest_act_check_distances");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Distance)
                    .HasColumnName("distance")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.Within)
                    .HasColumnName("within")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActCheckDistances)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActCheckGuards>(entity =>
            {
                entity.ToTable("quest_act_check_guards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActCheckGuards)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActCheckSpheres>(entity =>
            {
                entity.ToTable("quest_act_check_spheres");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SphereId)
                    .HasColumnName("sphere_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Sphere)
                    .WithMany(p => p.QuestActCheckSpheres)
                    .HasForeignKey(d => d.SphereId);
            });

            modelBuilder.Entity<QuestActCheckTimers>(entity =>
            {
                entity.ToTable("quest_act_check_timers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.CheckBuf)
                    .HasColumnName("check_buf")
                    .HasColumnType("bool");

                entity.Property(e => e.ForceChangeComponent)
                    .HasColumnName("force_change_component")
                    .HasColumnType("bool");

                entity.Property(e => e.IsSkillPlayer)
                    .HasColumnName("is_skill_player")
                    .HasColumnType("bool");

                entity.Property(e => e.LimitTime)
                    .HasColumnName("limit_time")
                    .HasColumnType("int");

                entity.Property(e => e.NextComponent)
                    .HasColumnName("next_component")
                    .HasColumnType("int");

                entity.Property(e => e.PlaySkill)
                    .HasColumnName("play_skill")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SustainBuf)
                    .HasColumnName("sustain_buf")
                    .HasColumnType("bool");

                entity.Property(e => e.TimerNpcId)
                    .HasColumnName("timer_npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.QuestActCheckTimers)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.QuestActCheckTimers)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<QuestActConAcceptBuffs>(entity =>
            {
                entity.ToTable("quest_act_con_accept_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.QuestActConAcceptBuffs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<QuestActConAcceptComponents>(entity =>
            {
                entity.ToTable("quest_act_con_accept_components");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestContextId)
                    .HasColumnName("quest_context_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.QuestContext)
                    .WithMany(p => p.QuestActConAcceptComponents)
                    .HasForeignKey(d => d.QuestContextId);
            });

            modelBuilder.Entity<QuestActConAcceptDoodads>(entity =>
            {
                entity.ToTable("quest_act_con_accept_doodads");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActConAcceptItemEquips>(entity =>
            {
                entity.ToTable("quest_act_con_accept_item_equips");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActConAcceptItemEquips)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActConAcceptItemGains>(entity =>
            {
                entity.ToTable("quest_act_con_accept_item_gains");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActConAcceptItemGains)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActConAcceptItems>(entity =>
            {
                entity.ToTable("quest_act_con_accept_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cleanup)
                    .HasColumnName("cleanup")
                    .HasColumnType("bool");

                entity.Property(e => e.DestroyWhenDrop)
                    .HasColumnName("destroy_when_drop")
                    .HasColumnType("bool");

                entity.Property(e => e.DropWhenDestroy)
                    .HasColumnName("drop_when_destroy")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActConAcceptItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActConAcceptLevelUps>(entity =>
            {
                entity.ToTable("quest_act_con_accept_level_ups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActConAcceptNpcEmotions>(entity =>
            {
                entity.ToTable("quest_act_con_accept_npc_emotions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Emotion).HasColumnName("emotion");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActConAcceptNpcEmotions)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActConAcceptNpcGroups>(entity =>
            {
                entity.ToTable("quest_act_con_accept_npc_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestMonsterGroupId)
                    .HasColumnName("quest_monster_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.QuestMonsterGroup)
                    .WithMany(p => p.QuestActConAcceptNpcGroups)
                    .HasForeignKey(d => d.QuestMonsterGroupId);
            });

            modelBuilder.Entity<QuestActConAcceptNpcKills>(entity =>
            {
                entity.ToTable("quest_act_con_accept_npc_kills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActConAcceptNpcKills)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActConAcceptNpcs>(entity =>
            {
                entity.ToTable("quest_act_con_accept_npcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActConAcceptNpcs)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActConAcceptSkills>(entity =>
            {
                entity.ToTable("quest_act_con_accept_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.QuestActConAcceptSkills)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<QuestActConAcceptSpheres>(entity =>
            {
                entity.ToTable("quest_act_con_accept_spheres");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SphereId)
                    .HasColumnName("sphere_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Sphere)
                    .WithMany(p => p.QuestActConAcceptSpheres)
                    .HasForeignKey(d => d.SphereId);
            });

            modelBuilder.Entity<QuestActConAcceptUis>(entity =>
            {
                entity.ToTable("quest_act_con_accept_uis");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<QuestActConAutoCompletes>(entity =>
            {
                entity.ToTable("quest_act_con_auto_completes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<QuestActConFails>(entity =>
            {
                entity.ToTable("quest_act_con_fails");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ForceChangeComponent)
                    .HasColumnName("force_change_component")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActConReportDoodads>(entity =>
            {
                entity.ToTable("quest_act_con_report_doodads");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActConReportJournals>(entity =>
            {
                entity.ToTable("quest_act_con_report_journals");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<QuestActConReportNpcGroups>(entity =>
            {
                entity.ToTable("quest_act_con_report_npc_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestMonsterGroupId)
                    .HasColumnName("quest_monster_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.QuestMonsterGroup)
                    .WithMany(p => p.QuestActConReportNpcGroups)
                    .HasForeignKey(d => d.QuestMonsterGroupId);
            });

            modelBuilder.Entity<QuestActConReportNpcs>(entity =>
            {
                entity.ToTable("quest_act_con_report_npcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActConReportNpcs)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActEtcItemObtains>(entity =>
            {
                entity.ToTable("quest_act_etc_item_obtains");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cleanup)
                    .HasColumnName("cleanup")
                    .HasColumnType("bool");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActEtcItemObtains)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActObjAbilityLevels>(entity =>
            {
                entity.ToTable("quest_act_obj_ability_levels");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbilityId)
                    .HasColumnName("ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActObjAggros>(entity =>
            {
                entity.ToTable("quest_act_obj_aggros");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.Range)
                    .HasColumnName("range")
                    .HasColumnType("int");

                entity.Property(e => e.Rank1)
                    .HasColumnName("rank1")
                    .HasColumnType("int");

                entity.Property(e => e.Rank1Item)
                    .HasColumnName("rank1_item")
                    .HasColumnType("bool");

                entity.Property(e => e.Rank1Ratio)
                    .HasColumnName("rank1_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.Rank2)
                    .HasColumnName("rank2")
                    .HasColumnType("int");

                entity.Property(e => e.Rank2Item)
                    .HasColumnName("rank2_item")
                    .HasColumnType("bool");

                entity.Property(e => e.Rank2Ratio)
                    .HasColumnName("rank2_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.Rank3)
                    .HasColumnName("rank3")
                    .HasColumnType("int");

                entity.Property(e => e.Rank3Item)
                    .HasColumnName("rank3_item")
                    .HasColumnType("bool");

                entity.Property(e => e.Rank3Ratio)
                    .HasColumnName("rank3_ratio")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActObjAliases>(entity =>
            {
                entity.ToTable("quest_act_obj_aliases");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<QuestActObjCinemas>(entity =>
            {
                entity.ToTable("quest_act_obj_cinemas");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CinemaId)
                    .HasColumnName("cinema_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Cinema)
                    .WithMany(p => p.QuestActObjCinemas)
                    .HasForeignKey(d => d.CinemaId);
            });

            modelBuilder.Entity<QuestActObjCompleteQuestGroups>(entity =>
            {
                entity.ToTable("quest_act_obj_complete_quest_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AcceptWith)
                    .HasColumnName("accept_with")
                    .HasColumnType("bool");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestContextGroupId)
                    .HasColumnName("quest_context_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.QuestContextGroup)
                    .WithMany(p => p.QuestActObjCompleteQuestGroups)
                    .HasForeignKey(d => d.QuestContextGroupId);
            });

            modelBuilder.Entity<QuestActObjCompleteQuests>(entity =>
            {
                entity.ToTable("quest_act_obj_complete_quests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AcceptWith)
                    .HasColumnName("accept_with")
                    .HasColumnType("bool");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActObjConditions>(entity =>
            {
                entity.ToTable("quest_act_obj_conditions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ConditionId)
                    .HasColumnName("condition_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestContextId)
                    .HasColumnName("quest_context_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.QuestContext)
                    .WithMany(p => p.QuestActObjConditions)
                    .HasForeignKey(d => d.QuestContextId);
            });

            modelBuilder.Entity<QuestActObjConquestWars>(entity =>
            {
                entity.ToTable("quest_act_obj_conquest_wars");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CompleteRank)
                    .HasColumnName("complete_rank")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.QuestActObjConquestWars)
                    .HasForeignKey(d => d.ZoneGroupId);
            });

            modelBuilder.Entity<QuestActObjCrafts>(entity =>
            {
                entity.ToTable("quest_act_obj_crafts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.QuestActObjCrafts)
                    .HasForeignKey(d => d.CraftId);
            });

            modelBuilder.Entity<QuestActObjDistances>(entity =>
            {
                entity.ToTable("quest_act_obj_distances");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Distance)
                    .HasColumnName("distance")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.Property(e => e.Within)
                    .HasColumnName("within")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActObjDistances)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActObjDoodadPhaseChecks>(entity =>
            {
                entity.ToTable("quest_act_obj_doodad_phase_checks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.Phase1)
                    .HasColumnName("phase1")
                    .HasColumnType("int");

                entity.Property(e => e.Phase2)
                    .HasColumnName("phase2")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActObjEffectFires>(entity =>
            {
                entity.ToTable("quest_act_obj_effect_fires");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.EffectId)
                    .HasColumnName("effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Effect)
                    .WithMany(p => p.QuestActObjEffectFires)
                    .HasForeignKey(d => d.EffectId);
            });

            modelBuilder.Entity<QuestActObjExpressFires>(entity =>
            {
                entity.ToTable("quest_act_obj_express_fires");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ExpressKeyId)
                    .HasColumnName("express_key_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcGroupId)
                    .HasColumnName("npc_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActObjGainHonorPoints>(entity =>
            {
                entity.ToTable("quest_act_obj_gain_honor_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActObjGainLivingPoints>(entity =>
            {
                entity.ToTable("quest_act_obj_gain_living_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActObjInteractions>(entity =>
            {
                entity.ToTable("quest_act_obj_interactions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.Phase)
                    .HasColumnName("phase")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestDoodadGroupId)
                    .HasColumnName("quest_doodad_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.TeamShare)
                    .HasColumnName("team_share")
                    .HasColumnType("bool");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.QuestDoodadGroup)
                    .WithMany(p => p.QuestActObjInteractions)
                    .HasForeignKey(d => d.QuestDoodadGroupId);
            });

            modelBuilder.Entity<QuestActObjInviteTeamFactions>(entity =>
            {
                entity.ToTable("quest_act_obj_invite_team_factions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjInviteId)
                    .HasColumnName("quest_act_obj_invite_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.QuestActObjInviteTeamFactions)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<QuestActObjItemGathers>(entity =>
            {
                entity.ToTable("quest_act_obj_item_gathers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cleanup)
                    .HasColumnName("cleanup")
                    .HasColumnType("bool");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DestroyWhenDrop)
                    .HasColumnName("destroy_when_drop")
                    .HasColumnType("bool");

                entity.Property(e => e.DropWhenDestroy)
                    .HasColumnName("drop_when_destroy")
                    .HasColumnType("bool");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActObjItemGathers)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActObjItemGroupGathers>(entity =>
            {
                entity.ToTable("quest_act_obj_item_group_gathers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cleanup)
                    .HasColumnName("cleanup")
                    .HasColumnType("bool");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DestroyWhenDrop)
                    .HasColumnName("destroy_when_drop")
                    .HasColumnType("bool");

                entity.Property(e => e.DropWhenDestroy)
                    .HasColumnName("drop_when_destroy")
                    .HasColumnType("bool");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGroupId)
                    .HasColumnName("item_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.ItemGroup)
                    .WithMany(p => p.QuestActObjItemGroupGathers)
                    .HasForeignKey(d => d.ItemGroupId);
            });

            modelBuilder.Entity<QuestActObjItemGroupUses>(entity =>
            {
                entity.ToTable("quest_act_obj_item_group_uses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DropWhenDestroy)
                    .HasColumnName("drop_when_destroy")
                    .HasColumnType("bool");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGroupId)
                    .HasColumnName("item_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.ItemGroup)
                    .WithMany(p => p.QuestActObjItemGroupUses)
                    .HasForeignKey(d => d.ItemGroupId);
            });

            modelBuilder.Entity<QuestActObjItemUses>(entity =>
            {
                entity.ToTable("quest_act_obj_item_uses");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cinema).HasColumnName("cinema");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DropWhenDestroy)
                    .HasColumnName("drop_when_destroy")
                    .HasColumnType("bool");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActObjItemUses)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActObjLaborPowers>(entity =>
            {
                entity.ToTable("quest_act_obj_labor_powers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.QuestActObjLaborPowers)
                    .HasForeignKey(d => d.ActabilityGroupId);
            });

            modelBuilder.Entity<QuestActObjLevels>(entity =>
            {
                entity.ToTable("quest_act_obj_levels");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActObjMateLevels>(entity =>
            {
                entity.ToTable("quest_act_obj_mate_levels");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cleanup)
                    .HasColumnName("cleanup")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActObjMateLevels)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActObjMonsterGroupHunts>(entity =>
            {
                entity.ToTable("quest_act_obj_monster_group_hunts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.LongDist)
                    .HasColumnName("long_dist")
                    .HasColumnType("bool");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestMonsterGroupId)
                    .HasColumnName("quest_monster_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.QuestMonsterGroup)
                    .WithMany(p => p.QuestActObjMonsterGroupHunts)
                    .HasForeignKey(d => d.QuestMonsterGroupId);
            });

            modelBuilder.Entity<QuestActObjMonsterHunts>(entity =>
            {
                entity.ToTable("quest_act_obj_monster_hunts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.LongDist)
                    .HasColumnName("long_dist")
                    .HasColumnType("bool");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActObjMonsterHunts)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActObjSendMails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("quest_act_obj_send_mails");

                entity.Property(e => e.Count1).HasColumnName("count1");

                entity.Property(e => e.Count2).HasColumnName("count2");

                entity.Property(e => e.Count3).HasColumnName("count3");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Item1Id).HasColumnName("item1_id");

                entity.Property(e => e.Item2Id).HasColumnName("item2_id");

                entity.Property(e => e.Item3Id).HasColumnName("item3_id");

                entity.Property(e => e.QuestActObjAliasId).HasColumnName("quest_act_obj_alias_id");

                entity.Property(e => e.UseAlias).HasColumnName("use_alias");
            });

            modelBuilder.Entity<QuestActObjSpheres>(entity =>
            {
                entity.ToTable("quest_act_obj_spheres");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cinema).HasColumnName("cinema");

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.SphereId)
                    .HasColumnName("sphere_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActObjSpheres)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.Sphere)
                    .WithMany(p => p.QuestActObjSpheres)
                    .HasForeignKey(d => d.SphereId);
            });

            modelBuilder.Entity<QuestActObjTalkNpcGroups>(entity =>
            {
                entity.ToTable("quest_act_obj_talk_npc_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcGroupId)
                    .HasColumnName("npc_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<QuestActObjTalks>(entity =>
            {
                entity.ToTable("quest_act_obj_talks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.HighlightDoodadId)
                    .HasColumnName("highlight_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.HighlightDoodadPhase)
                    .HasColumnName("highlight_doodad_phase")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.TeamShare)
                    .HasColumnName("team_share")
                    .HasColumnType("bool");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActObjTalks)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActObjTalks)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActObjZoneKills>(entity =>
            {
                entity.ToTable("quest_act_obj_zone_kills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CountNpc)
                    .HasColumnName("count_npc")
                    .HasColumnType("int");

                entity.Property(e => e.CountPk)
                    .HasColumnName("count_pk")
                    .HasColumnType("int");

                entity.Property(e => e.IsParty)
                    .HasColumnName("is_party")
                    .HasColumnType("bool");

                entity.Property(e => e.LvMax)
                    .HasColumnName("lv_max")
                    .HasColumnType("int");

                entity.Property(e => e.LvMaxNpc)
                    .HasColumnName("lv_max_npc")
                    .HasColumnType("int");

                entity.Property(e => e.LvMin)
                    .HasColumnName("lv_min")
                    .HasColumnType("int");

                entity.Property(e => e.LvMinNpc)
                    .HasColumnName("lv_min_npc")
                    .HasColumnType("int");

                entity.Property(e => e.NpcFactionExclusive)
                    .HasColumnName("npc_faction_exclusive")
                    .HasColumnType("bool");

                entity.Property(e => e.NpcFactionId)
                    .HasColumnName("npc_faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.PcFactionExclusive)
                    .HasColumnName("pc_faction_exclusive")
                    .HasColumnType("bool");

                entity.Property(e => e.PcFactionId)
                    .HasColumnName("pc_faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.TeamShare)
                    .HasColumnName("team_share")
                    .HasColumnType("bool");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.QuestActObjZoneKills)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<QuestActObjZoneMonsterHunts>(entity =>
            {
                entity.ToTable("quest_act_obj_zone_monster_hunts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.QuestActObjZoneMonsterHunts)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<QuestActObjZoneNpcTalks>(entity =>
            {
                entity.ToTable("quest_act_obj_zone_npc_talks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestActObjZoneNpcTalks)
                    .HasForeignKey(d => d.NpcId);
            });

            modelBuilder.Entity<QuestActObjZoneQuestCompletes>(entity =>
            {
                entity.ToTable("quest_act_obj_zone_quest_completes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.QuestActObjAliasId)
                    .HasColumnName("quest_act_obj_alias_id")
                    .HasColumnType("int");

                entity.Property(e => e.UseAlias)
                    .HasColumnName("use_alias")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.QuestActObjZoneQuestCompletes)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<QuestActSupplyAaPoints>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("quest_act_supply_aa_points");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Point).HasColumnName("point");
            });

            modelBuilder.Entity<QuestActSupplyActabilities>(entity =>
            {
                entity.ToTable("quest_act_supply_actabilities");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.QuestActSupplyActabilities)
                    .HasForeignKey(d => d.ActabilityGroupId);
            });

            modelBuilder.Entity<QuestActSupplyAppellations>(entity =>
            {
                entity.ToTable("quest_act_supply_appellations");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppellationId)
                    .HasColumnName("appellation_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Appellation)
                    .WithMany(p => p.QuestActSupplyAppellations)
                    .HasForeignKey(d => d.AppellationId);
            });

            modelBuilder.Entity<QuestActSupplyContributionPoints>(entity =>
            {
                entity.ToTable("quest_act_supply_contribution_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyCoppers>(entity =>
            {
                entity.ToTable("quest_act_supply_coppers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyCrimePoints>(entity =>
            {
                entity.ToTable("quest_act_supply_crime_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyExpeditionExps>(entity =>
            {
                entity.ToTable("quest_act_supply_expedition_exps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyExps>(entity =>
            {
                entity.ToTable("quest_act_supply_exps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Exp)
                    .HasColumnName("exp")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyFamilyExps>(entity =>
            {
                entity.ToTable("quest_act_supply_family_exps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyHonorPoints>(entity =>
            {
                entity.ToTable("quest_act_supply_honor_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyInteractions>(entity =>
            {
                entity.ToTable("quest_act_supply_interactions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyItems>(entity =>
            {
                entity.ToTable("quest_act_supply_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Cleanup)
                    .HasColumnName("cleanup")
                    .HasColumnType("bool");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DestroyWhenDrop)
                    .HasColumnName("destroy_when_drop")
                    .HasColumnType("bool");

                entity.Property(e => e.DropWhenDestroy)
                    .HasColumnName("drop_when_destroy")
                    .HasColumnType("bool");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShowActionBar)
                    .HasColumnName("show_action_bar")
                    .HasColumnType("bool");

                entity.Property(e => e.TryEquip)
                    .HasColumnName("try_equip")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActSupplyItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActSupplyJuryPoints>(entity =>
            {
                entity.ToTable("quest_act_supply_jury_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyLeadershipPoints>(entity =>
            {
                entity.ToTable("quest_act_supply_leadership_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyLivingPoints>(entity =>
            {
                entity.ToTable("quest_act_supply_living_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Point)
                    .HasColumnName("point")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyLps>(entity =>
            {
                entity.ToTable("quest_act_supply_lps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Lp)
                    .HasColumnName("lp")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestActSupplyRankedItems>(entity =>
            {
                entity.ToTable("quest_act_supply_ranked_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Rank)
                    .HasColumnName("rank")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActSupplyRankedItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActSupplyRemoveItems>(entity =>
            {
                entity.ToTable("quest_act_supply_remove_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActSupplyRemoveItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActSupplySelectiveItems>(entity =>
            {
                entity.ToTable("quest_act_supply_selective_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestActSupplySelectiveItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<QuestActSupplySkills>(entity =>
            {
                entity.ToTable("quest_act_supply_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.QuestActSupplySkills)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<QuestActs>(entity =>
            {
                entity.ToTable("quest_acts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActDetailId)
                    .HasColumnName("act_detail_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActDetailType).HasColumnName("act_detail_type");

                entity.Property(e => e.QuestComponentId)
                    .HasColumnName("quest_component_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.QuestComponent)
                    .WithMany(p => p.QuestActs)
                    .HasForeignKey(d => d.QuestComponentId);
            });

            modelBuilder.Entity<QuestCameras>(entity =>
            {
                entity.ToTable("quest_cameras");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CameraOffsetX).HasColumnName("camera_offset_x");

                entity.Property(e => e.CameraOffsetY).HasColumnName("camera_offset_y");

                entity.Property(e => e.CameraOffsetZ).HasColumnName("camera_offset_z");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Dof)
                    .HasColumnName("dof")
                    .HasColumnType("bool");

                entity.Property(e => e.Fov).HasColumnName("fov");

                entity.Property(e => e.Interpolate)
                    .HasColumnName("interpolate")
                    .HasColumnType("bool");

                entity.Property(e => e.Invisible)
                    .HasColumnName("invisible")
                    .HasColumnType("bool");

                entity.Property(e => e.NpcOffsetX).HasColumnName("npc_offset_x");

                entity.Property(e => e.NpcOffsetY).HasColumnName("npc_offset_y");

                entity.Property(e => e.NpcOffsetZ).HasColumnName("npc_offset_z");

                entity.Property(e => e.NvBokehSize).HasColumnName("nv_bokeh_size");

                entity.Property(e => e.NvDof)
                    .HasColumnName("nv_dof")
                    .HasColumnType("bool");

                entity.Property(e => e.NvIntensity).HasColumnName("nv_intensity");

                entity.Property(e => e.NvLuminance).HasColumnName("nv_luminance");
            });

            modelBuilder.Entity<QuestCategories>(entity =>
            {
                entity.ToTable("quest_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<QuestChatBubbles>(entity =>
            {
                entity.ToTable("quest_chat_bubbles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Angle)
                    .HasColumnName("angle")
                    .HasColumnType("int");

                entity.Property(e => e.CameraId)
                    .HasColumnName("camera_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChangeSpeakerName).HasColumnName("change_speaker_name");

                entity.Property(e => e.ChatBubbleKindId)
                    .HasColumnName("chat_bubble_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Facial).HasColumnName("facial");

                entity.Property(e => e.IsStart)
                    .HasColumnName("is_start")
                    .HasColumnType("bool");

                entity.Property(e => e.NextBubble)
                    .HasColumnName("next_bubble")
                    .HasColumnType("int");

                entity.Property(e => e.NpcGroupId)
                    .HasColumnName("npc_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcSpawnerId)
                    .HasColumnName("npc_spawner_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestComponentId)
                    .HasColumnName("quest_component_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.Speech).HasColumnName("speech");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestChatBubbles)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.QuestComponent)
                    .WithMany(p => p.QuestChatBubbles)
                    .HasForeignKey(d => d.QuestComponentId);

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.QuestChatBubbles)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<QuestComponentTexts>(entity =>
            {
                entity.ToTable("quest_component_texts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestComponentId)
                    .HasColumnName("quest_component_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestComponentTextKindId)
                    .HasColumnName("quest_component_text_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Text).HasColumnName("text");

                entity.HasOne(d => d.QuestComponent)
                    .WithMany(p => p.QuestComponentTexts)
                    .HasForeignKey(d => d.QuestComponentId);
            });

            modelBuilder.Entity<QuestComponents>(entity =>
            {
                entity.ToTable("quest_components");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AiCommandSetId)
                    .HasColumnName("ai_command_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.AiPathName).HasColumnName("ai_path_name");

                entity.Property(e => e.AiPathTypeId)
                    .HasColumnName("ai_path_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.CinemaId)
                    .HasColumnName("cinema_id")
                    .HasColumnType("int");

                entity.Property(e => e.ComponentKindId)
                    .HasColumnName("component_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.HideQuestMarker)
                    .HasColumnName("hide_quest_marker")
                    .HasColumnType("bool");

                entity.Property(e => e.NextComponent)
                    .HasColumnName("next_component")
                    .HasColumnType("int");

                entity.Property(e => e.NpcAiId)
                    .HasColumnName("npc_ai_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcSpawnerId)
                    .HasColumnName("npc_spawner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.PlayCinemaBeforeBubble)
                    .HasColumnName("play_cinema_before_bubble")
                    .HasColumnType("bool");

                entity.Property(e => e.QuestContextId)
                    .HasColumnName("quest_context_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillSelf)
                    .HasColumnName("skill_self")
                    .HasColumnType("bool");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.SummaryVoiceId)
                    .HasColumnName("summary_voice_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.QuestComponents)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Cinema)
                    .WithMany(p => p.QuestComponents)
                    .HasForeignKey(d => d.CinemaId);

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestComponents)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.QuestContext)
                    .WithMany(p => p.QuestComponents)
                    .HasForeignKey(d => d.QuestContextId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.QuestComponents)
                    .HasForeignKey(d => d.SkillId);

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.QuestComponents)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<QuestContextGroupMembers>(entity =>
            {
                entity.ToTable("quest_context_group_members");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ContextId)
                    .HasColumnName("context_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestContextGroupId)
                    .HasColumnName("quest_context_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.QuestContextGroup)
                    .WithMany(p => p.QuestContextGroupMembers)
                    .HasForeignKey(d => d.QuestContextGroupId);
            });

            modelBuilder.Entity<QuestContextGroups>(entity =>
            {
                entity.ToTable("quest_context_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<QuestContextTexts>(entity =>
            {
                entity.ToTable("quest_context_texts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestContextId)
                    .HasColumnName("quest_context_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestContextTextKindId)
                    .HasColumnName("quest_context_text_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Text).HasColumnName("text");

                entity.HasOne(d => d.QuestContext)
                    .WithMany(p => p.QuestContextTexts)
                    .HasForeignKey(d => d.QuestContextId);
            });

            modelBuilder.Entity<QuestContexts>(entity =>
            {
                entity.ToTable("quest_contexts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChapterIdx)
                    .HasColumnName("chapter_idx")
                    .HasColumnType("int");

                entity.Property(e => e.Degree)
                    .HasColumnName("degree")
                    .HasColumnType("int");

                entity.Property(e => e.DetailId)
                    .HasColumnName("detail_id")
                    .HasColumnType("int");

                entity.Property(e => e.GradeId)
                    .HasColumnName("grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.LetItDone)
                    .HasColumnName("let_it_done")
                    .HasColumnType("bool");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.MaxLevel)
                    .HasColumnName("max_level")
                    .HasColumnType("int");

                entity.Property(e => e.MinLevel)
                    .HasColumnName("min_level")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");

                entity.Property(e => e.QuestIdx)
                    .HasColumnName("quest_idx")
                    .HasColumnType("int");

                entity.Property(e => e.Race)
                    .HasColumnName("race")
                    .HasColumnType("int");

                entity.Property(e => e.Repeatable)
                    .HasColumnName("repeatable")
                    .HasColumnType("bool");

                entity.Property(e => e.RestartOnFail)
                    .HasColumnName("restart_on_fail")
                    .HasColumnType("bool");

                entity.Property(e => e.Score)
                    .HasColumnName("score")
                    .HasColumnType("int");

                entity.Property(e => e.Selective)
                    .HasColumnName("selective")
                    .HasColumnType("bool");

                entity.Property(e => e.Successive)
                    .HasColumnName("successive")
                    .HasColumnType("bool");

                entity.Property(e => e.UseAcceptMessage)
                    .HasColumnName("use_accept_message")
                    .HasColumnType("bool");

                entity.Property(e => e.UseCompleteMessage)
                    .HasColumnName("use_complete_message")
                    .HasColumnType("bool");

                entity.Property(e => e.UseQuestCamera)
                    .HasColumnName("use_quest_camera")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.QuestContexts)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<QuestDoodadGroups>(entity =>
            {
                entity.ToTable("quest_doodad_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<QuestDoodads>(entity =>
            {
                entity.ToTable("quest_doodads");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestDoodadGroupId)
                    .HasColumnName("quest_doodad_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.QuestDoodadGroup)
                    .WithMany(p => p.QuestDoodads)
                    .HasForeignKey(d => d.QuestDoodadGroupId);
            });

            modelBuilder.Entity<QuestItemGroupItems>(entity =>
            {
                entity.ToTable("quest_item_group_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestItemGroupId)
                    .HasColumnName("quest_item_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.QuestItemGroupItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.QuestItemGroup)
                    .WithMany(p => p.QuestItemGroupItems)
                    .HasForeignKey(d => d.QuestItemGroupId);
            });

            modelBuilder.Entity<QuestItemGroups>(entity =>
            {
                entity.ToTable("quest_item_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<QuestMailAttachmentItems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("quest_mail_attachment_items");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.GradeId).HasColumnName("grade_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ItemId).HasColumnName("item_id");

                entity.Property(e => e.QuestMailAttachmentId).HasColumnName("quest_mail_attachment_id");
            });

            modelBuilder.Entity<QuestMailAttachments>(entity =>
            {
                entity.ToTable("quest_mail_attachments");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<QuestMailSends>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("quest_mail_sends");

                entity.Property(e => e.ActabilityGroupId).HasColumnName("actability_group_id");

                entity.Property(e => e.ActabilityPoint).HasColumnName("actability_point");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.ComponentId).HasColumnName("component_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Level).HasColumnName("level");

                entity.Property(e => e.OrUnitReqs).HasColumnName("or_unit_reqs");

                entity.Property(e => e.QuestId).HasColumnName("quest_id");

                entity.Property(e => e.QuestMailId).HasColumnName("quest_mail_id");

                entity.Property(e => e.SphereId).HasColumnName("sphere_id");
            });

            modelBuilder.Entity<QuestMails>(entity =>
            {
                entity.ToTable("quest_mails");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestMailAttachmentId)
                    .HasColumnName("quest_mail_attachment_id")
                    .HasColumnType("int");

                entity.Property(e => e.SendMoney)
                    .HasColumnName("send_money")
                    .HasColumnType("int");

                entity.Property(e => e.SenderName).HasColumnName("sender_name");

                entity.Property(e => e.Text).HasColumnName("text");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestMails)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.QuestMailAttachment)
                    .WithMany(p => p.QuestMails)
                    .HasForeignKey(d => d.QuestMailAttachmentId);
            });

            modelBuilder.Entity<QuestMonsterGroups>(entity =>
            {
                entity.ToTable("quest_monster_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<QuestMonsterNpcs>(entity =>
            {
                entity.ToTable("quest_monster_npcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestMonsterGroupId)
                    .HasColumnName("quest_monster_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.QuestMonsterNpcs)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.QuestMonsterGroup)
                    .WithMany(p => p.QuestMonsterNpcs)
                    .HasForeignKey(d => d.QuestMonsterGroupId);
            });

            modelBuilder.Entity<QuestNames>(entity =>
            {
                entity.ToTable("quest_names");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.QuestContextId)
                    .HasColumnName("quest_context_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestNameKindId)
                    .HasColumnName("quest_name_kind_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.QuestContext)
                    .WithMany(p => p.QuestNames)
                    .HasForeignKey(d => d.QuestContextId);
            });

            modelBuilder.Entity<QuestSupplies>(entity =>
            {
                entity.ToTable("quest_supplies");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Copper)
                    .HasColumnName("copper")
                    .HasColumnType("int");

                entity.Property(e => e.Exp)
                    .HasColumnName("exp")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<QuestTaskQuests>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("quest_task_quests");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.QuestId).HasColumnName("quest_id");

                entity.Property(e => e.QuestTaskId).HasColumnName("quest_task_id");
            });

            modelBuilder.Entity<QuestTasks>(entity =>
            {
                entity.ToTable("quest_tasks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<RaceTrackShapes>(entity =>
            {
                entity.ToTable("race_track_shapes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.RaceTrackId)
                    .HasColumnName("race_track_id")
                    .HasColumnType("int");

                entity.Property(e => e.ShapeOrder)
                    .HasColumnName("shape_order")
                    .HasColumnType("int");

                entity.Property(e => e.V1)
                    .HasColumnName("v1")
                    .HasColumnType("int");

                entity.HasOne(d => d.RaceTrack)
                    .WithMany(p => p.RaceTrackShapes)
                    .HasForeignKey(d => d.RaceTrackId);
            });

            modelBuilder.Entity<RaceTracks>(entity =>
            {
                entity.ToTable("race_tracks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadGroupId)
                    .HasColumnName("doodad_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.EndBuffId)
                    .HasColumnName("end_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.EndNpcId)
                    .HasColumnName("end_npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.RaceLoop)
                    .HasColumnName("race_loop")
                    .HasColumnType("int");

                entity.Property(e => e.ReadyBuffId)
                    .HasColumnName("ready_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ReadyDelay)
                    .HasColumnName("ready_delay")
                    .HasColumnType("int");

                entity.Property(e => e.ReadyNpcId)
                    .HasColumnName("ready_npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.RecordMax)
                    .HasColumnName("record_max")
                    .HasColumnType("int");

                entity.Property(e => e.RecordMin)
                    .HasColumnName("record_min")
                    .HasColumnType("int");

                entity.Property(e => e.StartBuffId)
                    .HasColumnName("start_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.StartDelay)
                    .HasColumnName("start_delay")
                    .HasColumnType("int");

                entity.Property(e => e.StartNpcId)
                    .HasColumnName("start_npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.WaitDelay)
                    .HasColumnName("wait_delay")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneId)
                    .HasColumnName("zone_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.DoodadGroup)
                    .WithMany(p => p.RaceTracks)
                    .HasForeignKey(d => d.DoodadGroupId);

                entity.HasOne(d => d.Zone)
                    .WithMany(p => p.RaceTracks)
                    .HasForeignKey(d => d.ZoneId);
            });

            modelBuilder.Entity<RankRewardLinks>(entity =>
            {
                entity.ToTable("rank_reward_links");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.RankId)
                    .HasColumnName("rank_id")
                    .HasColumnType("int");

                entity.Property(e => e.RankRewardId)
                    .HasColumnName("rank_reward_id")
                    .HasColumnType("int");

                entity.Property(e => e.RankScopeId)
                    .HasColumnName("rank_scope_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Rank)
                    .WithMany(p => p.RankRewardLinks)
                    .HasForeignKey(d => d.RankId);

                entity.HasOne(d => d.RankReward)
                    .WithMany(p => p.RankRewardLinks)
                    .HasForeignKey(d => d.RankRewardId);

                entity.HasOne(d => d.RankScope)
                    .WithMany(p => p.RankRewardLinks)
                    .HasForeignKey(d => d.RankScopeId);
            });

            modelBuilder.Entity<RankRewards>(entity =>
            {
                entity.ToTable("rank_rewards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AppellationId)
                    .HasColumnName("appellation_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemGradeId)
                    .HasColumnName("item_grade_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Weeks)
                    .HasColumnName("weeks")
                    .HasColumnType("int");

                entity.HasOne(d => d.Appellation)
                    .WithMany(p => p.RankRewards)
                    .HasForeignKey(d => d.AppellationId);

                entity.HasOne(d => d.ItemGrade)
                    .WithMany(p => p.RankRewards)
                    .HasForeignKey(d => d.ItemGradeId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.RankRewards)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<RankScopeLinks>(entity =>
            {
                entity.ToTable("rank_scope_links");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.RankId)
                    .HasColumnName("rank_id")
                    .HasColumnType("int");

                entity.Property(e => e.RankScopeId)
                    .HasColumnName("rank_scope_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Rank)
                    .WithMany(p => p.RankScopeLinks)
                    .HasForeignKey(d => d.RankId);

                entity.HasOne(d => d.RankScope)
                    .WithMany(p => p.RankScopeLinks)
                    .HasForeignKey(d => d.RankScopeId);
            });

            modelBuilder.Entity<RankScopes>(entity =>
            {
                entity.ToTable("rank_scopes");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ScopeFrom)
                    .HasColumnName("scope_from")
                    .HasColumnType("int");

                entity.Property(e => e.ScopeTo)
                    .HasColumnName("scope_to")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<RankingRewards>(entity =>
            {
                entity.ToTable("ranking_rewards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Begin)
                    .HasColumnName("begin")
                    .HasColumnType("int");

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Division).HasColumnName("division");

                entity.Property(e => e.End)
                    .HasColumnName("end")
                    .HasColumnType("int");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Ranking).HasColumnName("ranking");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.RankingRewards)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<RankingTabs>(entity =>
            {
                entity.ToTable("ranking_tabs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Option).HasColumnName("option");
            });

            modelBuilder.Entity<Rankings>(entity =>
            {
                entity.ToTable("rankings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Option).HasColumnName("option");

                entity.Property(e => e.Schedule).HasColumnName("schedule");

                entity.Property(e => e.SeasonOff).HasColumnName("season_off");

                entity.Property(e => e.Tab).HasColumnName("tab");

                entity.Property(e => e.Tooltip).HasColumnName("tooltip");

                entity.Property(e => e.TopRank)
                    .HasColumnName("top_rank")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Ranks>(entity =>
            {
                entity.ToTable("ranks");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DayOfWeekId)
                    .HasColumnName("day_of_week_id")
                    .HasColumnType("int");

                entity.Property(e => e.EdDay)
                    .HasColumnName("ed_day")
                    .HasColumnType("int");

                entity.Property(e => e.EdHour)
                    .HasColumnName("ed_hour")
                    .HasColumnType("int");

                entity.Property(e => e.EdMin)
                    .HasColumnName("ed_min")
                    .HasColumnType("int");

                entity.Property(e => e.EdMonth)
                    .HasColumnName("ed_month")
                    .HasColumnType("int");

                entity.Property(e => e.EdYear)
                    .HasColumnName("ed_year")
                    .HasColumnType("int");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasColumnType("int");

                entity.Property(e => e.EndTimeAlarm)
                    .HasColumnName("end_time_alarm")
                    .HasColumnType("int");

                entity.Property(e => e.EndTimeAlarmMsg).HasColumnName("end_time_alarm_msg");

                entity.Property(e => e.GlobalRanking)
                    .HasColumnName("global_ranking")
                    .HasColumnType("bool");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ProcessExplain).HasColumnName("process_explain");

                entity.Property(e => e.RankKindId)
                    .HasColumnName("rank_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.RankerQueriable)
                    .HasColumnName("ranker_queriable")
                    .HasColumnType("bool");

                entity.Property(e => e.ResetWeek)
                    .HasColumnName("reset_week")
                    .HasColumnType("int");

                entity.Property(e => e.StDay)
                    .HasColumnName("st_day")
                    .HasColumnType("int");

                entity.Property(e => e.StHour)
                    .HasColumnName("st_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StMin)
                    .HasColumnName("st_min")
                    .HasColumnType("int");

                entity.Property(e => e.StMonth)
                    .HasColumnName("st_month")
                    .HasColumnType("int");

                entity.Property(e => e.StYear)
                    .HasColumnName("st_year")
                    .HasColumnType("int");

                entity.Property(e => e.StartTime)
                    .HasColumnName("start_time")
                    .HasColumnType("int");

                entity.Property(e => e.StartTimeAlarm)
                    .HasColumnName("start_time_alarm")
                    .HasColumnType("int");

                entity.Property(e => e.StartTimeAlarmMsg).HasColumnName("start_time_alarm_msg");

                entity.Property(e => e.TabDisplay)
                    .HasColumnName("tab_display")
                    .HasColumnType("bool");

                entity.Property(e => e.V1).HasColumnName("v1");

                entity.Property(e => e.V2).HasColumnName("v2");

                entity.Property(e => e.ValueColumnTooltip).HasColumnName("value_column_tooltip");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.Ranks)
                    .HasForeignKey(d => d.ZoneGroupId);
            });

            modelBuilder.Entity<RecoverExpEffects>(entity =>
            {
                entity.ToTable("recover_exp_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NeedLaborPower)
                    .HasColumnName("need_labor_power")
                    .HasColumnType("bool");

                entity.Property(e => e.NeedMoney)
                    .HasColumnName("need_money")
                    .HasColumnType("bool");

                entity.Property(e => e.NeedPriest)
                    .HasColumnName("need_priest")
                    .HasColumnType("bool");

                entity.Property(e => e.Penaltied)
                    .HasColumnName("penaltied")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<RepairSlaveEffects>(entity =>
            {
                entity.ToTable("repair_slave_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Health)
                    .HasColumnName("health")
                    .HasColumnType("int");

                entity.Property(e => e.Mana)
                    .HasColumnName("mana")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<RepairableSlaves>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("repairable_slaves");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.RepairSlaveEffectId)
                    .HasColumnName("repair_slave_effect_id")
                    .HasColumnType("INT");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<ReplaceChatKeys>(entity =>
            {
                entity.ToTable("replace_chat_keys");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Key).HasColumnName("key");

                entity.Property(e => e.ReplaceChatId)
                    .HasColumnName("replace_chat_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ReplaceChat)
                    .WithMany(p => p.ReplaceChatKeys)
                    .HasForeignKey(d => d.ReplaceChatId);
            });

            modelBuilder.Entity<ReplaceChatTexts>(entity =>
            {
                entity.ToTable("replace_chat_texts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ReplaceChatId)
                    .HasColumnName("replace_chat_id")
                    .HasColumnType("int");

                entity.Property(e => e.Text).HasColumnName("text");

                entity.HasOne(d => d.ReplaceChat)
                    .WithMany(p => p.ReplaceChatTexts)
                    .HasForeignKey(d => d.ReplaceChatId);
            });

            modelBuilder.Entity<ReplaceChats>(entity =>
            {
                entity.ToTable("replace_chats");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<ReportCrimeEffects>(entity =>
            {
                entity.ToTable("report_crime_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CrimeKindId)
                    .HasColumnName("crime_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ReputationResets>(entity =>
            {
                entity.ToTable("reputation_resets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Time)
                    .HasColumnName("time")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ReputationRewards>(entity =>
            {
                entity.ToTable("reputation_rewards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.LeadershipPoint)
                    .HasColumnName("leadership_point")
                    .HasColumnType("int");

                entity.Property(e => e.Percent).HasColumnName("percent");
            });

            modelBuilder.Entity<ResetAoeDiminishingEffects>(entity =>
            {
                entity.ToTable("reset_aoe_diminishing_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<ResidentConditions>(entity =>
            {
                entity.ToTable("resident_conditions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<RestoreManaEffects>(entity =>
            {
                entity.ToTable("restore_mana_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FixedMax)
                    .HasColumnName("fixed_max")
                    .HasColumnType("int");

                entity.Property(e => e.FixedMin)
                    .HasColumnName("fixed_min")
                    .HasColumnType("int");

                entity.Property(e => e.LevelMd).HasColumnName("level_md");

                entity.Property(e => e.LevelVaEnd)
                    .HasColumnName("level_va_end")
                    .HasColumnType("int");

                entity.Property(e => e.LevelVaStart)
                    .HasColumnName("level_va_start")
                    .HasColumnType("int");

                entity.Property(e => e.Percent)
                    .HasColumnName("percent")
                    .HasColumnType("bool");

                entity.Property(e => e.UseFixedValue)
                    .HasColumnName("use_fixed_value")
                    .HasColumnType("bool");

                entity.Property(e => e.UseLevelValue)
                    .HasColumnName("use_level_value")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<ReturnPoints>(entity =>
            {
                entity.ToTable("return_points");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EditorName).HasColumnName("editor_name");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<ScheduleItems>(entity =>
            {
                entity.ToTable("schedule_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActiveTake)
                    .HasColumnName("active_take")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoTakeDelay)
                    .HasColumnName("auto_take_delay")
                    .HasColumnType("int");

                entity.Property(e => e.DisableKeyString).HasColumnName("disable_key_string");

                entity.Property(e => e.EdDay)
                    .HasColumnName("ed_day")
                    .HasColumnType("int");

                entity.Property(e => e.EdHour)
                    .HasColumnName("ed_hour")
                    .HasColumnType("int");

                entity.Property(e => e.EdMin)
                    .HasColumnName("ed_min")
                    .HasColumnType("int");

                entity.Property(e => e.EdMonth)
                    .HasColumnName("ed_month")
                    .HasColumnType("int");

                entity.Property(e => e.EdYear)
                    .HasColumnName("ed_year")
                    .HasColumnType("int");

                entity.Property(e => e.EnableKeyString).HasColumnName("enable_key_string");

                entity.Property(e => e.GiveMax)
                    .HasColumnName("give_max")
                    .HasColumnType("int");

                entity.Property(e => e.GiveTerm)
                    .HasColumnName("give_term")
                    .HasColumnType("int");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.ItemCount)
                    .HasColumnName("item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindValue)
                    .HasColumnName("kind_value")
                    .HasColumnType("int");

                entity.Property(e => e.LabelKeyString).HasColumnName("label_key_string");

                entity.Property(e => e.MailBody).HasColumnName("mail_body");

                entity.Property(e => e.MailTitle).HasColumnName("mail_title");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OnAir)
                    .HasColumnName("on_air")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowWhenever)
                    .HasColumnName("show_whenever")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowWherever)
                    .HasColumnName("show_wherever")
                    .HasColumnType("bool");

                entity.Property(e => e.StDay)
                    .HasColumnName("st_day")
                    .HasColumnType("int");

                entity.Property(e => e.StHour)
                    .HasColumnName("st_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StMin)
                    .HasColumnName("st_min")
                    .HasColumnType("int");

                entity.Property(e => e.StMonth)
                    .HasColumnName("st_month")
                    .HasColumnType("int");

                entity.Property(e => e.StYear)
                    .HasColumnName("st_year")
                    .HasColumnType("int");

                entity.Property(e => e.ToolTip).HasColumnName("tool_tip");

                entity.Property(e => e.WheneverTooltip).HasColumnName("whenever_tooltip");

                entity.Property(e => e.WhereverTooltip).HasColumnName("wherever_tooltip");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.ScheduleItems)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<SchemaMigrations>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("schema_migrations");

                entity.Property(e => e.Version).HasColumnName("version");
            });

            modelBuilder.Entity<ScopedFEffects>(entity =>
            {
                entity.ToTable("scoped_f_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.Key).HasColumnName("key");

                entity.Property(e => e.Range)
                    .HasColumnName("range")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<ShipModels>(entity =>
            {
                entity.ToTable("ship_models");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Accel).HasColumnName("accel");

                entity.Property(e => e.AccelExponent).HasColumnName("accel_exponent");

                entity.Property(e => e.CharAnimSteerBackwardId)
                    .HasColumnName("char_anim_steer_backward_id")
                    .HasColumnType("int");

                entity.Property(e => e.CharAnimSteerForwardId)
                    .HasColumnName("char_anim_steer_forward_id")
                    .HasColumnType("int");

                entity.Property(e => e.CollisionBoxCenterX).HasColumnName("collision_box_center_x");

                entity.Property(e => e.CollisionBoxCenterY).HasColumnName("collision_box_center_y");

                entity.Property(e => e.CollisionBoxCenterZ).HasColumnName("collision_box_center_z");

                entity.Property(e => e.CollisionBoxOffsetX).HasColumnName("collision_box_offset_x");

                entity.Property(e => e.CollisionBoxOffsetY).HasColumnName("collision_box_offset_y");

                entity.Property(e => e.CollisionBoxOffsetZ).HasColumnName("collision_box_offset_z");

                entity.Property(e => e.CollisionBoxScaleX).HasColumnName("collision_box_scale_x");

                entity.Property(e => e.CollisionBoxScaleY).HasColumnName("collision_box_scale_y");

                entity.Property(e => e.CollisionBoxScaleZ).HasColumnName("collision_box_scale_z");

                entity.Property(e => e.CollisionBoxSizeX).HasColumnName("collision_box_size_x");

                entity.Property(e => e.CollisionBoxSizeY).HasColumnName("collision_box_size_y");

                entity.Property(e => e.CollisionBoxSizeZ).HasColumnName("collision_box_size_z");

                entity.Property(e => e.CollisionSphereRadius).HasColumnName("collision_sphere_radius");

                entity.Property(e => e.Damaged25).HasColumnName("damaged25");

                entity.Property(e => e.Damaged50).HasColumnName("damaged50");

                entity.Property(e => e.Damaged75).HasColumnName("damaged75");

                entity.Property(e => e.Dead).HasColumnName("dead");

                entity.Property(e => e.HaltRate).HasColumnName("halt_rate");

                entity.Property(e => e.ImpactMass).HasColumnName("impact_mass");

                entity.Property(e => e.KeelHeight).HasColumnName("keel_height");

                entity.Property(e => e.KeelLength).HasColumnName("keel_length");

                entity.Property(e => e.KeelOffsetZ).HasColumnName("keel_offset_z");

                entity.Property(e => e.Mass).HasColumnName("mass");

                entity.Property(e => e.MassBoxSizeX).HasColumnName("mass_box_size_x");

                entity.Property(e => e.MassBoxSizeY).HasColumnName("mass_box_size_y");

                entity.Property(e => e.MassBoxSizeZ).HasColumnName("mass_box_size_z");

                entity.Property(e => e.MassCenterX).HasColumnName("mass_center_x");

                entity.Property(e => e.MassCenterY).HasColumnName("mass_center_y");

                entity.Property(e => e.MassCenterZ).HasColumnName("mass_center_z");

                entity.Property(e => e.MaxRpmSec).HasColumnName("max_rpm_sec");

                entity.Property(e => e.MinRpmSec).HasColumnName("min_rpm_sec");

                entity.Property(e => e.Normal).HasColumnName("normal");

                entity.Property(e => e.PassengerBoxOffsetX).HasColumnName("passenger_box_offset_x");

                entity.Property(e => e.PassengerBoxOffsetY).HasColumnName("passenger_box_offset_y");

                entity.Property(e => e.PassengerBoxOffsetZ).HasColumnName("passenger_box_offset_z");

                entity.Property(e => e.PassengerBoxScaleX).HasColumnName("passenger_box_scale_x");

                entity.Property(e => e.PassengerBoxScaleY).HasColumnName("passenger_box_scale_y");

                entity.Property(e => e.PassengerBoxScaleZ).HasColumnName("passenger_box_scale_z");

                entity.Property(e => e.ReverseAccel).HasColumnName("reverse_accel");

                entity.Property(e => e.ReverseVelocity).HasColumnName("reverse_velocity");

                entity.Property(e => e.SteerVel).HasColumnName("steer_vel");

                entity.Property(e => e.TubeLength).HasColumnName("tube_length");

                entity.Property(e => e.TubeOffsetZ).HasColumnName("tube_offset_z");

                entity.Property(e => e.TubeRadius).HasColumnName("tube_radius");

                entity.Property(e => e.TurnAccel).HasColumnName("turn_accel");

                entity.Property(e => e.Velocity).HasColumnName("velocity");

                entity.Property(e => e.WaterDamping).HasColumnName("water_damping");

                entity.Property(e => e.WaterDensity).HasColumnName("water_density");

                entity.Property(e => e.WaterResistance).HasColumnName("water_resistance");
            });

            modelBuilder.Entity<ShipyardRewards>(entity =>
            {
                entity.ToTable("shipyard_rewards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OnWater)
                    .HasColumnName("on_water")
                    .HasColumnType("bool");

                entity.Property(e => e.Radius).HasColumnName("radius");

                entity.Property(e => e.ShipyardId)
                    .HasColumnName("shipyard_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Shipyard)
                    .WithMany(p => p.ShipyardRewards)
                    .HasForeignKey(d => d.ShipyardId);
            });

            modelBuilder.Entity<ShipyardSteps>(entity =>
            {
                entity.ToTable("shipyard_steps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.MaxHp)
                    .HasColumnName("max_hp")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.NumActions)
                    .HasColumnName("num_actions")
                    .HasColumnType("int");

                entity.Property(e => e.ShipyardId)
                    .HasColumnName("shipyard_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.Step)
                    .HasColumnName("step")
                    .HasColumnType("int");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.ShipyardSteps)
                    .HasForeignKey(d => d.ModelId);

                entity.HasOne(d => d.Shipyard)
                    .WithMany(p => p.ShipyardSteps)
                    .HasForeignKey(d => d.ShipyardId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.ShipyardSteps)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<Shipyards>(entity =>
            {
                entity.ToTable("shipyards");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuildRadius)
                    .HasColumnName("build_radius")
                    .HasColumnType("int");

                entity.Property(e => e.CeremonyAnimKey).HasColumnName("ceremony_anim_key");

                entity.Property(e => e.CeremonyAnimTime)
                    .HasColumnName("ceremony_anim_time")
                    .HasColumnType("int");

                entity.Property(e => e.CeremonyModelId)
                    .HasColumnName("ceremony_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.MainModelId)
                    .HasColumnName("main_model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OriginItemId)
                    .HasColumnName("origin_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SpawnOffsetFront).HasColumnName("spawn_offset_front");

                entity.Property(e => e.SpawnOffsetZ).HasColumnName("spawn_offset_z");

                entity.Property(e => e.TaxDuration)
                    .HasColumnName("tax_duration")
                    .HasColumnType("int");

                entity.Property(e => e.TaxationId)
                    .HasColumnName("taxation_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Shipyards)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Taxation)
                    .WithMany(p => p.Shipyards)
                    .HasForeignKey(d => d.TaxationId);
            });

            modelBuilder.Entity<SiegeItems>(entity =>
            {
                entity.ToTable("siege_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DefenseHqDuringSiege)
                    .HasColumnName("defense_hq_during_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.DefenseHqDuringWarmup)
                    .HasColumnName("defense_hq_during_warmup")
                    .HasColumnType("bool");

                entity.Property(e => e.DuringDeclare)
                    .HasColumnName("during_declare")
                    .HasColumnType("bool");

                entity.Property(e => e.DuringNoDominion)
                    .HasColumnName("during_no_dominion")
                    .HasColumnType("bool");

                entity.Property(e => e.DuringPeace)
                    .HasColumnName("during_peace")
                    .HasColumnType("bool");

                entity.Property(e => e.OffenseHqDuringSiege)
                    .HasColumnName("offense_hq_during_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.OffenseHqDuringWarmup)
                    .HasColumnName("offense_hq_during_warmup")
                    .HasColumnType("bool");

                entity.Property(e => e.OutsideSiegeAreaDuringSiege)
                    .HasColumnName("outside_siege_area_during_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.OutsideSiegeAreaDuringWarmup)
                    .HasColumnName("outside_siege_area_during_warmup")
                    .HasColumnType("bool");

                entity.Property(e => e.OutsideSiegeZone)
                    .HasColumnName("outside_siege_zone")
                    .HasColumnType("bool");

                entity.Property(e => e.SiegeCircleDuringSiege)
                    .HasColumnName("siege_circle_during_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.SiegeCircleDuringWarmup)
                    .HasColumnName("siege_circle_during_warmup")
                    .HasColumnType("bool");

                entity.Property(e => e.Usage).HasColumnName("usage");
            });

            modelBuilder.Entity<SiegeSettings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("siege_settings");

                entity.Property(e => e.NumDefenders)
                    .HasColumnName("num_defenders")
                    .HasColumnType("int");

                entity.Property(e => e.NumReinforcements)
                    .HasColumnName("num_reinforcements")
                    .HasColumnType("int");

                entity.Property(e => e.TotalCastles)
                    .HasColumnName("total_castles")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<SiegeSkills>(entity =>
            {
                entity.ToTable("siege_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DefenseHqDuringSiege)
                    .HasColumnName("defense_hq_during_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.DefenseHqDuringWarmup)
                    .HasColumnName("defense_hq_during_warmup")
                    .HasColumnType("bool");

                entity.Property(e => e.DuringDeclare)
                    .HasColumnName("during_declare")
                    .HasColumnType("bool");

                entity.Property(e => e.DuringNoDominion)
                    .HasColumnName("during_no_dominion")
                    .HasColumnType("bool");

                entity.Property(e => e.DuringPeace)
                    .HasColumnName("during_peace")
                    .HasColumnType("bool");

                entity.Property(e => e.OffenseHqDuringSiege)
                    .HasColumnName("offense_hq_during_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.OffenseHqDuringWarmup)
                    .HasColumnName("offense_hq_during_warmup")
                    .HasColumnType("bool");

                entity.Property(e => e.OutsideSiegeAreaDuringSiege)
                    .HasColumnName("outside_siege_area_during_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.OutsideSiegeAreaDuringWarmup)
                    .HasColumnName("outside_siege_area_during_warmup")
                    .HasColumnType("bool");

                entity.Property(e => e.OutsideSiegeZone)
                    .HasColumnName("outside_siege_zone")
                    .HasColumnType("bool");

                entity.Property(e => e.SiegeCircleDuringSiege)
                    .HasColumnName("siege_circle_during_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.SiegeCircleDuringWarmup)
                    .HasColumnName("siege_circle_during_warmup")
                    .HasColumnType("bool");

                entity.Property(e => e.Usage).HasColumnName("usage");
            });

            modelBuilder.Entity<SiegeTicketOffensePrices>(entity =>
            {
                entity.ToTable("siege_ticket_offense_prices");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.PerPrice)
                    .HasColumnName("per_price")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<SiegeZones>(entity =>
            {
                entity.HasKey(o => new { o.ZoneGroupId });

                entity.ToTable("siege_zones");

                entity.Property(e => e.DeclareItemId)
                    .HasColumnName("declare_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefenseMerchantId)
                    .HasColumnName("defense_merchant_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefenseTicketId)
                    .HasColumnName("defense_ticket_id")
                    .HasColumnType("int");

                entity.Property(e => e.DominionMerchantId)
                    .HasColumnName("dominion_merchant_id")
                    .HasColumnType("int");

                entity.Property(e => e.MonumentDoodadId)
                    .HasColumnName("monument_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffenseMerchantId)
                    .HasColumnName("offense_merchant_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffenseTicketId)
                    .HasColumnName("offense_ticket_id")
                    .HasColumnType("int");

                entity.Property(e => e.OpenDurationHours)
                    .HasColumnName("open_duration_hours")
                    .HasColumnType("int");

                entity.Property(e => e.OpenHour)
                    .HasColumnName("open_hour")
                    .HasColumnType("int");

                entity.Property(e => e.OpenWeekday)
                    .HasColumnName("open_weekday")
                    .HasColumnType("int");

                entity.Property(e => e.PayHour)
                    .HasColumnName("pay_hour")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem1Id)
                    .HasColumnName("pay_item1_id")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem1Num)
                    .HasColumnName("pay_item1_num")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem2Id)
                    .HasColumnName("pay_item2_id")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem2Num)
                    .HasColumnName("pay_item2_num")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem3Id)
                    .HasColumnName("pay_item3_id")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem3Num)
                    .HasColumnName("pay_item3_num")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem4Id)
                    .HasColumnName("pay_item4_id")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem4Num)
                    .HasColumnName("pay_item4_num")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem5Id)
                    .HasColumnName("pay_item5_id")
                    .HasColumnType("int");

                entity.Property(e => e.PayItem5Num)
                    .HasColumnName("pay_item5_num")
                    .HasColumnType("int");

                entity.Property(e => e.PayMin)
                    .HasColumnName("pay_min")
                    .HasColumnType("int");

                entity.Property(e => e.PayWeekday)
                    .HasColumnName("pay_weekday")
                    .HasColumnType("int");

                entity.Property(e => e.ReinforceDefenseDelayMins)
                    .HasColumnName("reinforce_defense_delay_mins")
                    .HasColumnType("int");

                entity.Property(e => e.SiegeDays)
                    .HasColumnName("siege_days")
                    .HasColumnType("int");

                entity.Property(e => e.SiegeHours)
                    .HasColumnName("siege_hours")
                    .HasColumnType("int");

                entity.Property(e => e.SiegeMins)
                    .HasColumnName("siege_mins")
                    .HasColumnType("int");

                entity.Property(e => e.StartAuctionHour)
                    .HasColumnName("start_auction_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StartAuctionMin)
                    .HasColumnName("start_auction_min")
                    .HasColumnType("int");

                entity.Property(e => e.StartAuctionWeekday)
                    .HasColumnName("start_auction_weekday")
                    .HasColumnType("int");

                entity.Property(e => e.StartDeclareHour)
                    .HasColumnName("start_declare_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StartDeclareMin)
                    .HasColumnName("start_declare_min")
                    .HasColumnType("int");

                entity.Property(e => e.StartDeclareWeekday)
                    .HasColumnName("start_declare_weekday")
                    .HasColumnType("int");

                entity.Property(e => e.StartSiegeHour)
                    .HasColumnName("start_siege_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StartSiegeMin)
                    .HasColumnName("start_siege_min")
                    .HasColumnType("int");

                entity.Property(e => e.StartSiegeWeekday)
                    .HasColumnName("start_siege_weekday")
                    .HasColumnType("int");

                entity.Property(e => e.StartWarmupHour)
                    .HasColumnName("start_warmup_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StartWarmupMin)
                    .HasColumnName("start_warmup_min")
                    .HasColumnType("int");

                entity.Property(e => e.StartWarmupWeekday)
                    .HasColumnName("start_warmup_weekday")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.SiegeZones)
                    .HasForeignKey(d => d.ZoneGroupId);
            });
            
            modelBuilder.Entity<SkillControllers>(entity =>
            {
                entity.ToTable("skill_controllers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActiveWeaponId)
                    .HasColumnName("active_weapon_id")
                    .HasColumnType("int");

                entity.Property(e => e.EndAnimId)
                    .HasColumnName("end_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.EndSkillId)
                    .HasColumnName("end_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.StartAnimId)
                    .HasColumnName("start_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.StrValue1).HasColumnName("str_value1");

                entity.Property(e => e.TransitionAnim1Id)
                    .HasColumnName("transition_anim_1_id")
                    .HasColumnType("int");

                entity.Property(e => e.TransitionAnim2Id)
                    .HasColumnName("transition_anim_2_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value1)
                    .HasColumnName("value1")
                    .HasColumnType("int");

                entity.Property(e => e.Value10)
                    .HasColumnName("value10")
                    .HasColumnType("int");

                entity.Property(e => e.Value11)
                    .HasColumnName("value11")
                    .HasColumnType("int");

                entity.Property(e => e.Value12)
                    .HasColumnName("value12")
                    .HasColumnType("int");

                entity.Property(e => e.Value13)
                    .HasColumnName("value13")
                    .HasColumnType("int");

                entity.Property(e => e.Value14)
                    .HasColumnName("value14")
                    .HasColumnType("int");

                entity.Property(e => e.Value15)
                    .HasColumnName("value15")
                    .HasColumnType("int");

                entity.Property(e => e.Value2)
                    .HasColumnName("value2")
                    .HasColumnType("int");

                entity.Property(e => e.Value3)
                    .HasColumnName("value3")
                    .HasColumnType("int");

                entity.Property(e => e.Value4)
                    .HasColumnName("value4")
                    .HasColumnType("int");

                entity.Property(e => e.Value5)
                    .HasColumnName("value5")
                    .HasColumnType("int");

                entity.Property(e => e.Value6)
                    .HasColumnName("value6")
                    .HasColumnType("int");

                entity.Property(e => e.Value7)
                    .HasColumnName("value7")
                    .HasColumnType("int");

                entity.Property(e => e.Value8)
                    .HasColumnName("value8")
                    .HasColumnType("int");

                entity.Property(e => e.Value9)
                    .HasColumnName("value9")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<SkillDynamicEffects>(entity =>
            {
                entity.ToTable("skill_dynamic_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Code).HasColumnName("code");

                entity.Property(e => e.Effect).HasColumnName("effect");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SkillDynamicEffects)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<SkillEffects>(entity =>
            {
                entity.ToTable("skill_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AlwaysHit)
                    .HasColumnName("always_hit")
                    .HasColumnType("bool");

                entity.Property(e => e.ApplicationMethodId)
                    .HasColumnName("application_method_id")
                    .HasColumnType("int");

                entity.Property(e => e.Back)
                    .HasColumnName("back")
                    .HasColumnType("bool");

                entity.Property(e => e.Chance)
                    .HasColumnName("chance")
                    .HasColumnType("int");

                entity.Property(e => e.CheckNoSourceTagSrc)
                    .HasColumnName("check_no_source_tag_src")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckNoTargetTagSrc)
                    .HasColumnName("check_no_target_tag_src")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckSourceTagSrc)
                    .HasColumnName("check_source_tag_src")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckTargetTagSrc)
                    .HasColumnName("check_target_tag_src")
                    .HasColumnType("bool");

                entity.Property(e => e.ConsumeItemCount)
                    .HasColumnName("consume_item_count")
                    .HasColumnType("int");

                entity.Property(e => e.ConsumeItemId)
                    .HasColumnName("consume_item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ConsumeSourceItem)
                    .HasColumnName("consume_source_item")
                    .HasColumnType("bool");

                entity.Property(e => e.EffectId)
                    .HasColumnName("effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.EndCastingUseChance)
                    .HasColumnName("end_casting_use_chance")
                    .HasColumnType("int");

                entity.Property(e => e.EndHighAbilityResource)
                    .HasColumnName("end_high_ability_resource")
                    .HasColumnType("int");

                entity.Property(e => e.EndLevel)
                    .HasColumnName("end_level")
                    .HasColumnType("int");

                entity.Property(e => e.Friendly)
                    .HasColumnName("friendly")
                    .HasColumnType("bool");

                entity.Property(e => e.Front)
                    .HasColumnName("front")
                    .HasColumnType("bool");

                entity.Property(e => e.InteractionSuccessHit)
                    .HasColumnName("interaction_success_hit")
                    .HasColumnType("bool");

                entity.Property(e => e.ItemSetId)
                    .HasColumnName("item_set_id")
                    .HasColumnType("int");

                entity.Property(e => e.NonFriendly)
                    .HasColumnName("non_friendly")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SourceBuffTagId)
                    .HasColumnName("source_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.SourceNobuffTagId)
                    .HasColumnName("source_nobuff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.StartCastingUseChance)
                    .HasColumnName("start_casting_use_chance")
                    .HasColumnType("int");

                entity.Property(e => e.StartHighAbilityResource)
                    .HasColumnName("start_high_ability_resource")
                    .HasColumnType("int");

                entity.Property(e => e.StartLevel)
                    .HasColumnName("start_level")
                    .HasColumnType("int");

                entity.Property(e => e.SynergyText)
                    .HasColumnName("synergy_text")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetBuffTagId)
                    .HasColumnName("target_buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetNobuffTagId)
                    .HasColumnName("target_nobuff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetNpcTagId)
                    .HasColumnName("target_npc_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.Weight)
                    .HasColumnName("weight")
                    .HasColumnType("int");

                entity.HasOne(d => d.Effect)
                    .WithMany(p => p.SkillEffects)
                    .HasForeignKey(d => d.EffectId);

                entity.HasOne(d => d.ItemSet)
                    .WithMany(p => p.SkillEffects)
                    .HasForeignKey(d => d.ItemSetId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SkillEffects)
                    .HasForeignKey(d => d.SkillId);
            });
            
            modelBuilder.Entity<SkillModifiers>(entity =>
            {
                entity.HasKey(o => new { o.SkillId, o.TagId });

                entity.ToTable("skill_modifiers");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.SkillAttributeId)
                    .HasColumnName("skill_attribute_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.Synergy)
                    .HasColumnName("synergy")
                    .HasColumnType("bool");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnitModifierTypeId)
                    .HasColumnName("unit_modifier_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SkillModifiers)
                    .HasForeignKey(d => d.SkillId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.SkillModifiers)
                    .HasForeignKey(d => d.TagId);
            });
            
            modelBuilder.Entity<SkillProducts>(entity =>
            {
                entity.ToTable("skill_products");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SkillProducts)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SkillProducts)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<SkillReagents>(entity =>
            {
                entity.ToTable("skill_reagents");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Amount)
                    .HasColumnName("amount")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SkillReagents)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SkillReagents)
                    .HasForeignKey(d => d.SkillId);
            });
            
            modelBuilder.Entity<SkillReqSkillTags>(entity =>
            {
                entity.HasKey(o => new { o.SkillReqId });

                entity.ToTable("skill_req_skill_tags");

                entity.Property(e => e.SkillReqId)
                    .HasColumnName("skill_req_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillTagId)
                    .HasColumnName("skill_tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.SkillReq)
                    .WithMany(p => p.SkillReqSkillTags)
                    .HasForeignKey(d => d.SkillReqId);
            });
            
            modelBuilder.Entity<SkillReqSkills>(entity =>
            {
                entity.HasKey(o => new { o.SkillId, o.SkillReqId });

                entity.ToTable("skill_req_skills");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillReqId)
                    .HasColumnName("skill_req_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SkillReqSkills)
                    .HasForeignKey(d => d.SkillId);

                entity.HasOne(d => d.SkillReq)
                    .WithMany(p => p.SkillReqSkills)
                    .HasForeignKey(d => d.SkillReqId);
            });
            
            modelBuilder.Entity<SkillReqs>(entity =>
            {
                entity.ToTable("skill_reqs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffTagId)
                    .HasColumnName("buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultResult)
                    .HasColumnName("default_result")
                    .HasColumnType("bool");

                entity.Property(e => e.Message).HasColumnName("message");

                entity.Property(e => e.Target)
                    .HasColumnName("target")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.SkillReqs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<SkillSynergyIcons>(entity =>
            {
                entity.ToTable("skill_synergy_icons");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffTagId)
                    .HasColumnName("buff_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.ConditionBuffkind)
                    .HasColumnName("condition_buffkind")
                    .HasColumnType("bool");

                entity.Property(e => e.ConditionIconId)
                    .HasColumnName("condition_icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.ResultBuffkind)
                    .HasColumnName("result_buffkind")
                    .HasColumnType("bool");

                entity.Property(e => e.ResultIconId)
                    .HasColumnName("result_icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnitSelectionId)
                    .HasColumnName("unit_selection_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SkillSynergyIcons)
                    .HasForeignKey(d => d.SkillId);
            });
            
            modelBuilder.Entity<SkillVisualGroups>(entity =>
            {
                entity.HasKey(o => new { o.FxGroupId, o.ProjectileId });

                entity.ToTable("skill_visual_groups");

                entity.Property(e => e.FxGroupId)
                    .HasColumnName("fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.ProjectileId)
                    .HasColumnName("projectile_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.FxGroup)
                    .WithMany(p => p.SkillVisualGroups)
                    .HasForeignKey(d => d.FxGroupId);

                entity.HasOne(d => d.Projectile)
                    .WithMany(p => p.SkillVisualGroups)
                    .HasForeignKey(d => d.ProjectileId);
            });
            
            modelBuilder.Entity<Skills>(entity =>
            {
                entity.ToTable("skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AbilityId)
                    .HasColumnName("ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.AbilityLevel)
                    .HasColumnName("ability_level")
                    .HasColumnType("int");

                entity.Property(e => e.AccountCooldown)
                    .HasColumnName("account_cooldown")
                    .HasColumnType("bool");

                entity.Property(e => e.ActabilityGroupId)
                    .HasColumnName("actability_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActiveWeaponId)
                    .HasColumnName("active_weapon_id")
                    .HasColumnType("int");

                entity.Property(e => e.Aggro)
                    .HasColumnName("aggro")
                    .HasColumnType("int");

                entity.Property(e => e.AllowToPrisoner)
                    .HasColumnName("allow_to_prisoner")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoFire)
                    .HasColumnName("auto_fire")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoLearn)
                    .HasColumnName("auto_learn")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoReuse)
                    .HasColumnName("auto_reuse")
                    .HasColumnType("bool");

                entity.Property(e => e.AutoReuseDelay)
                    .HasColumnName("auto_reuse_delay")
                    .HasColumnType("int");

                entity.Property(e => e.CalcUserLevel)
                    .HasColumnName("calc_user_level")
                    .HasColumnType("bool");

                entity.Property(e => e.CameraAcceleration).HasColumnName("camera_acceleration");

                entity.Property(e => e.CameraDuration).HasColumnName("camera_duration");

                entity.Property(e => e.CameraHoldZ)
                    .HasColumnName("camera_hold_z")
                    .HasColumnType("bool");

                entity.Property(e => e.CameraMaxDistance).HasColumnName("camera_max_distance");

                entity.Property(e => e.CameraSlowDownDistance).HasColumnName("camera_slow_down_distance");

                entity.Property(e => e.CameraSpeed).HasColumnName("camera_speed");

                entity.Property(e => e.CanActiveWeaponWithoutAnim)
                    .HasColumnName("can_active_weapon_without_anim")
                    .HasColumnType("bool");

                entity.Property(e => e.CancelOngoingBuffExceptionTagId)
                    .HasColumnName("cancel_ongoing_buff_exception_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.CancelOngoingBuffs)
                    .HasColumnName("cancel_ongoing_buffs")
                    .HasColumnType("bool");

                entity.Property(e => e.CastingCancelable)
                    .HasColumnName("casting_cancelable")
                    .HasColumnType("bool");

                entity.Property(e => e.CastingDelayable)
                    .HasColumnName("casting_delayable")
                    .HasColumnType("bool");

                entity.Property(e => e.CastingInc)
                    .HasColumnName("casting_inc")
                    .HasColumnType("int");

                entity.Property(e => e.CastingTime)
                    .HasColumnName("casting_time")
                    .HasColumnType("int");

                entity.Property(e => e.CastingUseable)
                    .HasColumnName("casting_useable")
                    .HasColumnType("bool");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChannelingAnimId)
                    .HasColumnName("channeling_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChannelingBuffId)
                    .HasColumnName("channeling_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChannelingCancelable)
                    .HasColumnName("channeling_cancelable")
                    .HasColumnType("bool");

                entity.Property(e => e.ChannelingDoodadId)
                    .HasColumnName("channeling_doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChannelingMana)
                    .HasColumnName("channeling_mana")
                    .HasColumnType("int");

                entity.Property(e => e.ChannelingTargetBuffId)
                    .HasColumnName("channeling_target_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChannelingTick)
                    .HasColumnName("channeling_tick")
                    .HasColumnType("int");

                entity.Property(e => e.ChannelingTime)
                    .HasColumnName("channeling_time")
                    .HasColumnType("int");

                entity.Property(e => e.CharRaceId)
                    .HasColumnName("char_race_id")
                    .HasColumnType("int");

                entity.Property(e => e.CheckObstacle)
                    .HasColumnName("check_obstacle")
                    .HasColumnType("bool");

                entity.Property(e => e.CheckTerrain)
                    .HasColumnName("check_terrain")
                    .HasColumnType("bool");

                entity.Property(e => e.CombatDiceId)
                    .HasColumnName("combat_dice_id")
                    .HasColumnType("int");

                entity.Property(e => e.ConsumeLp)
                    .HasColumnName("consume_lp")
                    .HasColumnType("int");

                entity.Property(e => e.ControllerCamera)
                    .HasColumnName("controller_camera")
                    .HasColumnType("bool");

                entity.Property(e => e.ControllerCameraSpeed)
                    .HasColumnName("controller_camera_speed")
                    .HasColumnType("int");

                entity.Property(e => e.CooldownTagId)
                    .HasColumnName("cooldown_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.CooldownTime)
                    .HasColumnName("cooldown_time")
                    .HasColumnType("int");

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("int");

                entity.Property(e => e.CrimePoint)
                    .HasColumnName("crime_point")
                    .HasColumnType("int");

                entity.Property(e => e.CustomGcd)
                    .HasColumnName("custom_gcd")
                    .HasColumnType("int");

                entity.Property(e => e.DamageTypeId)
                    .HasColumnName("damage_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultGcd)
                    .HasColumnName("default_gcd")
                    .HasColumnType("bool");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.DoodadBundleId)
                    .HasColumnName("doodad_bundle_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadHitFamily)
                    .HasColumnName("doodad_hit_family")
                    .HasColumnType("int");

                entity.Property(e => e.DualWieldFireAnimId)
                    .HasColumnName("dual_wield_fire_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.EffectDelay)
                    .HasColumnName("effect_delay")
                    .HasColumnType("int");

                entity.Property(e => e.EffectRepeatCount)
                    .HasColumnName("effect_repeat_count")
                    .HasColumnType("int");

                entity.Property(e => e.EffectRepeatTick)
                    .HasColumnName("effect_repeat_tick")
                    .HasColumnType("int");

                entity.Property(e => e.EffectSpeed).HasColumnName("effect_speed");

                entity.Property(e => e.EndSkillController)
                    .HasColumnName("end_skill_controller")
                    .HasColumnType("bool");

                entity.Property(e => e.FireAnimId)
                    .HasColumnName("fire_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.FirstReagentOnly)
                    .HasColumnName("first_reagent_only")
                    .HasColumnType("bool");

                entity.Property(e => e.FrontAngle)
                    .HasColumnName("front_angle")
                    .HasColumnType("int");

                entity.Property(e => e.FxGroupId)
                    .HasColumnName("fx_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.GainLifePoint)
                    .HasColumnName("gain_life_point")
                    .HasColumnType("int");

                entity.Property(e => e.HighAbilityId)
                    .HasColumnName("high_ability_id")
                    .HasColumnType("int");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.IgnoreGlobalCooldown)
                    .HasColumnName("ignore_global_cooldown")
                    .HasColumnType("bool");

                entity.Property(e => e.KeepManaRegen)
                    .HasColumnName("keep_mana_regen")
                    .HasColumnType("bool");

                entity.Property(e => e.KeepStealth)
                    .HasColumnName("keep_stealth")
                    .HasColumnType("bool");

                entity.Property(e => e.LevelRuleNoConsideration)
                    .HasColumnName("level_rule_no_consideration")
                    .HasColumnType("bool");

                entity.Property(e => e.LevelStep)
                    .HasColumnName("level_step")
                    .HasColumnType("int");

                entity.Property(e => e.LinkBackpackTypeId)
                    .HasColumnName("link_backpack_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.LinkEquipSlotId)
                    .HasColumnName("link_equip_slot_id")
                    .HasColumnType("int");

                entity.Property(e => e.MainhandToolId)
                    .HasColumnName("mainhand_tool_id")
                    .HasColumnType("int");

                entity.Property(e => e.ManaCost)
                    .HasColumnName("mana_cost")
                    .HasColumnType("int");

                entity.Property(e => e.ManaLevelMd).HasColumnName("mana_level_md");

                entity.Property(e => e.MatchAnimation)
                    .HasColumnName("match_animation")
                    .HasColumnType("bool");

                entity.Property(e => e.MatchAnimationCount)
                    .HasColumnName("match_animation_count")
                    .HasColumnType("bool");

                entity.Property(e => e.MaxHighAbilityResource)
                    .HasColumnName("max_high_ability_resource")
                    .HasColumnType("int");

                entity.Property(e => e.MaxRange)
                    .HasColumnName("max_range")
                    .HasColumnType("int");

                entity.Property(e => e.MinHighAbilityResource)
                    .HasColumnName("min_high_ability_resource")
                    .HasColumnType("int");

                entity.Property(e => e.MinRange)
                    .HasColumnName("min_range")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OffhandToolId)
                    .HasColumnName("offhand_tool_id")
                    .HasColumnType("int");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.PercussionInstrumentFireAnimId)
                    .HasColumnName("percussion_instrument_fire_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.PercussionInstrumentStartAnimId)
                    .HasColumnName("percussion_instrument_start_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.PitchAngle).HasColumnName("pitch_angle");

                entity.Property(e => e.PlotId)
                    .HasColumnName("plot_id")
                    .HasColumnType("int");

                entity.Property(e => e.PlotOnly)
                    .HasColumnName("plot_only")
                    .HasColumnType("bool");

                entity.Property(e => e.ProjectileId)
                    .HasColumnName("projectile_id")
                    .HasColumnType("int");

                entity.Property(e => e.ReagentCorpseStatusId)
                    .HasColumnName("reagent_corpse_status_id")
                    .HasColumnType("int");

                entity.Property(e => e.RepeatCount)
                    .HasColumnName("repeat_count")
                    .HasColumnType("int");

                entity.Property(e => e.RepeatTick)
                    .HasColumnName("repeat_tick")
                    .HasColumnType("int");

                entity.Property(e => e.SecondCooldownTagId)
                    .HasColumnName("second_cooldown_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.SensitiveOperation)
                    .HasColumnName("sensitive_operation")
                    .HasColumnType("bool");

                entity.Property(e => e.Show)
                    .HasColumnName("show")
                    .HasColumnType("bool");

                entity.Property(e => e.ShowTargetCastingTime)
                    .HasColumnName("show_target_casting_time")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillControllerAtEnd)
                    .HasColumnName("skill_controller_at_end")
                    .HasColumnType("bool");

                entity.Property(e => e.SkillControllerId)
                    .HasColumnName("skill_controller_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillPoints)
                    .HasColumnName("skill_points")
                    .HasColumnType("int");

                entity.Property(e => e.SkipQuestApplyUseItem)
                    .HasColumnName("skip_quest_apply_use_item")
                    .HasColumnType("bool");

                entity.Property(e => e.SkipValidateSource)
                    .HasColumnName("skip_validate_source")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceAlive)
                    .HasColumnName("source_alive")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceCannotUseWhileWalk)
                    .HasColumnName("source_cannot_use_while_walk")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceDead)
                    .HasColumnName("source_dead")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceMount)
                    .HasColumnName("source_mount")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceMountMate)
                    .HasColumnName("source_mount_mate")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceNoSlave)
                    .HasColumnName("source_no_slave")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceNotCollided)
                    .HasColumnName("source_not_collided")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceNotSwim)
                    .HasColumnName("source_not_swim")
                    .HasColumnType("bool");

                entity.Property(e => e.SourceStun)
                    .HasColumnName("source_stun")
                    .HasColumnType("bool");

                entity.Property(e => e.StartAnimId)
                    .HasColumnName("start_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.StartAutoattack)
                    .HasColumnName("start_autoattack")
                    .HasColumnType("bool");

                entity.Property(e => e.StopAutoattack)
                    .HasColumnName("stop_autoattack")
                    .HasColumnType("bool");

                entity.Property(e => e.StopCastingByTurn)
                    .HasColumnName("stop_casting_by_turn")
                    .HasColumnType("bool");

                entity.Property(e => e.StopCastingOnBigHit)
                    .HasColumnName("stop_casting_on_big_hit")
                    .HasColumnType("bool");

                entity.Property(e => e.StopChannelingOnBigHit)
                    .HasColumnName("stop_channeling_on_big_hit")
                    .HasColumnType("bool");

                entity.Property(e => e.StopChannelingOnStartSkill)
                    .HasColumnName("stop_channeling_on_start_skill")
                    .HasColumnType("bool");

                entity.Property(e => e.StringInstrumentFireAnimId)
                    .HasColumnName("string_instrument_fire_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.StringInstrumentStartAnimId)
                    .HasColumnName("string_instrument_start_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.SwitchToSkillCooldown)
                    .HasColumnName("switch_to_skill_cooldown")
                    .HasColumnType("bool");

                entity.Property(e => e.SynergyIcon1Buffkind)
                    .HasColumnName("synergy_icon1_buffkind")
                    .HasColumnType("bool");

                entity.Property(e => e.SynergyIcon1Id)
                    .HasColumnName("synergy_icon1_id")
                    .HasColumnType("int");

                entity.Property(e => e.SynergyIcon2Buffkind)
                    .HasColumnName("synergy_icon2_buffkind")
                    .HasColumnType("bool");

                entity.Property(e => e.SynergyIcon2Id)
                    .HasColumnName("synergy_icon2_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetAlive)
                    .HasColumnName("target_alive")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetAngle)
                    .HasColumnName("target_angle")
                    .HasColumnType("int");

                entity.Property(e => e.TargetAreaAngle)
                    .HasColumnName("target_area_angle")
                    .HasColumnType("int");

                entity.Property(e => e.TargetAreaCount)
                    .HasColumnName("target_area_count")
                    .HasColumnType("int");

                entity.Property(e => e.TargetAreaRadius)
                    .HasColumnName("target_area_radius")
                    .HasColumnType("int");

                entity.Property(e => e.TargetDead)
                    .HasColumnName("target_dead")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetDecalRadius)
                    .HasColumnName("target_decal_radius")
                    .HasColumnType("int");

                entity.Property(e => e.TargetFishing)
                    .HasColumnName("target_fishing")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetMyNpc)
                    .HasColumnName("target_my_npc")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetOffsetAngle).HasColumnName("target_offset_angle");

                entity.Property(e => e.TargetOffsetDistance).HasColumnName("target_offset_distance");

                entity.Property(e => e.TargetOnlyWater)
                    .HasColumnName("target_only_water")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetPreoccupied)
                    .HasColumnName("target_preoccupied")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetRelationId)
                    .HasColumnName("target_relation_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetSelectionId)
                    .HasColumnName("target_selection_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetSiege)
                    .HasColumnName("target_siege")
                    .HasColumnType("bool");

                entity.Property(e => e.TargetTypeId)
                    .HasColumnName("target_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetValidHeight).HasColumnName("target_valid_height");

                entity.Property(e => e.TargetWater)
                    .HasColumnName("target_water")
                    .HasColumnType("bool");

                entity.Property(e => e.ThirdCooldownTagId)
                    .HasColumnName("third_cooldown_tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.TimingId)
                    .HasColumnName("timing_id")
                    .HasColumnType("int");

                entity.Property(e => e.ToggleBuffId)
                    .HasColumnName("toggle_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.TubeInstrumentFireAnimId)
                    .HasColumnName("tube_instrument_fire_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.TubeInstrumentStartAnimId)
                    .HasColumnName("tube_instrument_start_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.TwohandFireAnimId)
                    .HasColumnName("twohand_fire_anim_id")
                    .HasColumnType("int");

                entity.Property(e => e.Unmount)
                    .HasColumnName("unmount")
                    .HasColumnType("bool");

                entity.Property(e => e.UseAnimTime)
                    .HasColumnName("use_anim_time")
                    .HasColumnType("bool");

                entity.Property(e => e.UseSkillCamera)
                    .HasColumnName("use_skill_camera")
                    .HasColumnType("bool");

                entity.Property(e => e.UseWeaponCooldownTime)
                    .HasColumnName("use_weapon_cooldown_time")
                    .HasColumnType("bool");

                entity.Property(e => e.ValidHeight).HasColumnName("valid_height");

                entity.Property(e => e.ValidHeightEdgeToEdge)
                    .HasColumnName("valid_height_edge_to_edge")
                    .HasColumnType("bool");

                entity.Property(e => e.WeaponSlotForAngleId)
                    .HasColumnName("weapon_slot_for_angle_id")
                    .HasColumnType("int");

                entity.Property(e => e.WeaponSlotForAutoattackId)
                    .HasColumnName("weapon_slot_for_autoattack_id")
                    .HasColumnType("int");

                entity.Property(e => e.WeaponSlotForRangeId)
                    .HasColumnName("weapon_slot_for_range_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ActabilityGroup)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.ActabilityGroupId);

                entity.HasOne(d => d.DoodadBundle)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.DoodadBundleId);

                entity.HasOne(d => d.FxGroup)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.FxGroupId);

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.IconId);

                entity.HasOne(d => d.Plot)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.PlotId);

                entity.HasOne(d => d.Projectile)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.ProjectileId);

                entity.HasOne(d => d.SkillController)
                    .WithMany(p => p.Skills)
                    .HasForeignKey(d => d.SkillControllerId);
            });

            modelBuilder.Entity<SkinColors>(entity =>
            {
                entity.ToTable("skin_colors");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BrightSkinColorB)
                    .HasColumnName("bright_skin_color_b")
                    .HasColumnType("int");

                entity.Property(e => e.BrightSkinColorG)
                    .HasColumnName("bright_skin_color_g")
                    .HasColumnType("int");

                entity.Property(e => e.BrightSkinColorR)
                    .HasColumnName("bright_skin_color_r")
                    .HasColumnType("int");

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.CustomPostfix).HasColumnName("custom_postfix");

                entity.Property(e => e.DiffuseColorB)
                    .HasColumnName("diffuse_color_b")
                    .HasColumnType("int");

                entity.Property(e => e.DiffuseColorG)
                    .HasColumnName("diffuse_color_g")
                    .HasColumnType("int");

                entity.Property(e => e.DiffuseColorR)
                    .HasColumnName("diffuse_color_r")
                    .HasColumnType("int");

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("int");

                entity.Property(e => e.Glossness)
                    .HasColumnName("glossness")
                    .HasColumnType("int");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.MiddleSkinColorB)
                    .HasColumnName("middle_skin_color_b")
                    .HasColumnType("int");

                entity.Property(e => e.MiddleSkinColorG)
                    .HasColumnName("middle_skin_color_g")
                    .HasColumnType("int");

                entity.Property(e => e.MiddleSkinColorR)
                    .HasColumnName("middle_skin_color_r")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcOnly)
                    .HasColumnName("npc_only")
                    .HasColumnType("bool");

                entity.Property(e => e.SpecularColorB)
                    .HasColumnName("specular_color_b")
                    .HasColumnType("int");

                entity.Property(e => e.SpecularColorG)
                    .HasColumnName("specular_color_g")
                    .HasColumnType("int");

                entity.Property(e => e.SpecularColorR)
                    .HasColumnName("specular_color_r")
                    .HasColumnType("int");

                entity.Property(e => e.SpecularLevel).HasColumnName("specular_level");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.SkinColors)
                    .HasForeignKey(d => d.ModelId);
            });

            modelBuilder.Entity<SlashCommands>(entity =>
            {
                entity.ToTable("slash_commands");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActionId)
                    .HasColumnName("action_id")
                    .HasColumnType("int");

                entity.Property(e => e.ActionType).HasColumnName("action_type");

                entity.Property(e => e.CommandList).HasColumnName("command_list");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SlashCommands)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<SlashFunctions>(entity =>
            {
                entity.ToTable("slash_functions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SlashFuncId)
                    .HasColumnName("slash_func_id")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<SlaveBindings>(entity =>
            {
                entity.HasKey(o => new { o.SlaveId });

                entity.ToTable("slave_bindings");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.Basic)
                    .HasColumnName("basic")
                    .HasColumnType("bool");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.SlaveBindings)
                    .HasForeignKey(d => d.SlaveId);
            });
            
            modelBuilder.Entity<SlaveCollisionDamages>(entity =>
            {
                entity.ToTable("slave_collision_damages");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BottomGain).HasColumnName("bottom_gain");

                entity.Property(e => e.FrontGain).HasColumnName("front_gain");

                entity.Property(e => e.RearGain).HasColumnName("rear_gain");

                entity.Property(e => e.SideGain).HasColumnName("side_gain");
            });

            modelBuilder.Entity<SlaveCustomizingEquipSlots>(entity =>
            {
                entity.ToTable("slave_customizing_equip_slots");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EquipSlotId)
                    .HasColumnName("equip_slot_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipSlotName).HasColumnName("equip_slot_name");

                entity.Property(e => e.SlaveCustomizingId)
                    .HasColumnName("slave_customizing_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.SlaveCustomizing)
                    .WithMany(p => p.SlaveCustomizingEquipSlots)
                    .HasForeignKey(d => d.SlaveCustomizingId);
            });

            modelBuilder.Entity<SlaveCustomizings>(entity =>
            {
                entity.ToTable("slave_customizings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<SlaveDoodadBindings>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("slave_doodad_bindings");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.Basic)
                    .HasColumnName("basic")
                    .HasColumnType("bool");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.Persist)
                    .HasColumnName("persist")
                    .HasColumnType("bool");

                entity.Property(e => e.Scale).HasColumnName("scale");
            });

            modelBuilder.Entity<SlaveDropDoodads>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("slave_drop_doodads");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OnWater)
                    .HasColumnName("on_water")
                    .HasColumnType("bool");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.Radius).HasColumnName("radius");

                entity.Property(e => e.SlaveVsSlave)
                    .HasColumnName("slave_vs_slave")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<SlaveEquipPacks>(entity =>
            {
                entity.ToTable("slave_equip_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<SlaveEquipSlots>(entity =>
            {
                entity.ToTable("slave_equip_slots");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.EquipSlotId)
                    .HasColumnName("equip_slot_id")
                    .HasColumnType("int");

                entity.Property(e => e.RequireSlotId)
                    .HasColumnName("require_slot_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.SlaveEquipSlots)
                    .HasForeignKey(d => d.SlaveId);
            });

            modelBuilder.Entity<SlaveEquipmentEquipSlotPacks>(entity =>
            {
                entity.ToTable("slave_equipment_equip_slot_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.GradeEnchantCost)
                    .HasColumnName("grade_enchant_cost")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<SlaveHealingPointDoodads>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("slave_healing_point_doodads");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");
            });
            
            modelBuilder.Entity<SlaveInitialBuffs>(entity =>
            {
                entity.HasKey(o => new { o.BuffId, o.SlaveId});

                entity.ToTable("slave_initial_buffs");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.SlaveInitialBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.SlaveInitialBuffs)
                    .HasForeignKey(d => d.SlaveId);
            });
            
            modelBuilder.Entity<SlaveInitialItemPacks>(entity =>
            {
                entity.ToTable("slave_initial_item_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<SlaveInitialItems>(entity =>
            {
                entity.ToTable("slave_initial_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EquipSlotId)
                    .HasColumnName("equip_slot_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveInitialItemPackId)
                    .HasColumnName("slave_initial_item_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SlaveInitialItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.SlaveInitialItemPack)
                    .WithMany(p => p.SlaveInitialItems)
                    .HasForeignKey(d => d.SlaveInitialItemPackId);
            });
            
            modelBuilder.Entity<SlaveInteractionSkills>(entity =>
            {
                entity.HasKey(o => new { o.SkillId, o.SlaveId });

                entity.ToTable("slave_interaction_skills");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SlaveInteractionSkills)
                    .HasForeignKey(d => d.SkillId);

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.SlaveInteractionSkills)
                    .HasForeignKey(d => d.SlaveId);
            });
            
            modelBuilder.Entity<SlaveMountSkills>(entity =>
            {
                entity.HasKey(o => new { o.MountSkillId, o.SlaveId });

                entity.ToTable("slave_mount_skills");

                entity.Property(e => e.MountSkillId)
                    .HasColumnName("mount_skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveId)
                    .HasColumnName("slave_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.MountSkill)
                    .WithMany(p => p.SlaveMountSkills)
                    .HasForeignKey(d => d.MountSkillId);

                entity.HasOne(d => d.Slave)
                    .WithMany(p => p.SlaveMountSkills)
                    .HasForeignKey(d => d.SlaveId);
            });
            
            modelBuilder.Entity<SlavePassiveBuffs>(entity =>
            {
                entity.HasKey(o => new { o.PassiveBuffId });

                entity.ToTable("slave_passive_buffs");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.PassiveBuffId)
                    .HasColumnName("passive_buff_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.PassiveBuff)
                    .WithMany(p => p.SlavePassiveBuffs)
                    .HasForeignKey(d => d.PassiveBuffId);
            });
            
            modelBuilder.Entity<Slaves>(entity =>
            {
                entity.ToTable("slaves");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AddedShipMassPerUnit).HasColumnName("added_ship_mass_per_unit");

                entity.Property(e => e.CannotRideBackpacker)
                    .HasColumnName("cannot_ride_backpacker")
                    .HasColumnType("bool");

                entity.Property(e => e.Capacity)
                    .HasColumnName("capacity")
                    .HasColumnType("int");

                entity.Property(e => e.Cost)
                    .HasColumnName("cost")
                    .HasColumnType("int");

                entity.Property(e => e.Customizable)
                    .HasColumnName("customizable")
                    .HasColumnType("bool");

                entity.Property(e => e.DestroyRate)
                    .HasColumnName("destroy_rate")
                    .HasColumnType("int");

                entity.Property(e => e.DriverPosInteraction)
                    .HasColumnName("driver_pos_interaction")
                    .HasColumnType("bool");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.Hp25DoodadCount)
                    .HasColumnName("hp25_doodad_count")
                    .HasColumnType("int");

                entity.Property(e => e.Hp50DoodadCount)
                    .HasColumnName("hp50_doodad_count")
                    .HasColumnType("int");

                entity.Property(e => e.Hp75DoodadCount)
                    .HasColumnName("hp75_doodad_count")
                    .HasColumnType("int");

                entity.Property(e => e.Hp99DoodadCount)
                    .HasColumnName("hp99_doodad_count")
                    .HasColumnType("int");

                entity.Property(e => e.IconVisible)
                    .HasColumnName("icon_visible")
                    .HasColumnType("bool");

                entity.Property(e => e.IgnoreParentDestroyRate)
                    .HasColumnName("ignore_parent_destroy_rate")
                    .HasColumnType("bool");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Mountable)
                    .HasColumnName("mountable")
                    .HasColumnType("bool");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ObbPosX).HasColumnName("obb_pos_x");

                entity.Property(e => e.ObbPosY).HasColumnName("obb_pos_y");

                entity.Property(e => e.ObbPosZ).HasColumnName("obb_pos_z");

                entity.Property(e => e.ObbSizeX).HasColumnName("obb_size_x");

                entity.Property(e => e.ObbSizeY).HasColumnName("obb_size_y");

                entity.Property(e => e.ObbSizeZ).HasColumnName("obb_size_z");

                entity.Property(e => e.OffsetX).HasColumnName("offset_x");

                entity.Property(e => e.OffsetY).HasColumnName("offset_y");

                entity.Property(e => e.OffsetZ).HasColumnName("offset_z");

                entity.Property(e => e.OnBindUnhangDirectly)
                    .HasColumnName("on_bind_unhang_directly")
                    .HasColumnType("bool");

                entity.Property(e => e.PortalDespawnFxId)
                    .HasColumnName("portal_despawn_fx_id")
                    .HasColumnType("int");

                entity.Property(e => e.PortalScale).HasColumnName("portal_scale");

                entity.Property(e => e.PortalSpawnFxId)
                    .HasColumnName("portal_spawn_fx_id")
                    .HasColumnType("int");

                entity.Property(e => e.PortalTime).HasColumnName("portal_time");

                entity.Property(e => e.Respawn)
                    .HasColumnName("respawn")
                    .HasColumnType("bool");

                entity.Property(e => e.SinkingCapacity)
                    .HasColumnName("sinking_capacity")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveCollisionDamageId)
                    .HasColumnName("slave_collision_damage_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveCustomizingId)
                    .HasColumnName("slave_customizing_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveEquipmentCategoryId)
                    .HasColumnName("slave_equipment_category_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveInitialItemPackId)
                    .HasColumnName("slave_initial_item_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.SlaveKindId)
                    .HasColumnName("slave_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.SpawnValidAreaRange)
                    .HasColumnName("spawn_valid_area_range")
                    .HasColumnType("int");

                entity.Property(e => e.SpawnXOffset).HasColumnName("spawn_x_offset");

                entity.Property(e => e.SpawnYOffset).HasColumnName("spawn_y_offset");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.Slaves)
                    .HasForeignKey(d => d.ModelId);

                entity.HasOne(d => d.SlaveCollisionDamage)
                    .WithMany(p => p.Slaves)
                    .HasForeignKey(d => d.SlaveCollisionDamageId);

                entity.HasOne(d => d.SlaveCustomizing)
                    .WithMany(p => p.Slaves)
                    .HasForeignKey(d => d.SlaveCustomizingId);

                entity.HasOne(d => d.SlaveInitialItemPack)
                    .WithMany(p => p.Slaves)
                    .HasForeignKey(d => d.SlaveInitialItemPackId);
            });

            modelBuilder.Entity<SoundPackItems>(entity =>
            {
                entity.ToTable("sound_pack_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundPackId)
                    .HasColumnName("sound_pack_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.SoundPackItems)
                    .HasForeignKey(d => d.SoundId);

                entity.HasOne(d => d.SoundPack)
                    .WithMany(p => p.SoundPackItems)
                    .HasForeignKey(d => d.SoundPackId);
            });

            modelBuilder.Entity<SoundPacks>(entity =>
            {
                entity.ToTable("sound_packs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NoMoodNoSound)
                    .HasColumnName("no_mood_no_sound")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<Sounds>(entity =>
            {
                entity.ToTable("sounds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.EndMethodId)
                    .HasColumnName("end_method_id")
                    .HasColumnType("int");

                entity.Property(e => e.LevelId)
                    .HasColumnName("level_id")
                    .HasColumnType("int");

                entity.Property(e => e.Path).HasColumnName("path");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.Sounds)
                    .HasForeignKey(d => d.LevelId);
            });

            modelBuilder.Entity<SpawnEffects>(entity =>
            {
                entity.ToTable("spawn_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DespawnOnCreatorDeath)
                    .HasColumnName("despawn_on_creator_death")
                    .HasColumnType("bool");

                entity.Property(e => e.LifeTime).HasColumnName("life_time");

                entity.Property(e => e.MateStateId)
                    .HasColumnName("mate_state_id")
                    .HasColumnType("int");

                entity.Property(e => e.OriAngle).HasColumnName("ori_angle");

                entity.Property(e => e.OriDirId)
                    .HasColumnName("ori_dir_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerTypeId)
                    .HasColumnName("owner_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.PosAngleMax).HasColumnName("pos_angle_max");

                entity.Property(e => e.PosAngleMin).HasColumnName("pos_angle_min");

                entity.Property(e => e.PosDirId)
                    .HasColumnName("pos_dir_id")
                    .HasColumnType("int");

                entity.Property(e => e.PosDistanceMax).HasColumnName("pos_distance_max");

                entity.Property(e => e.PosDistanceMin).HasColumnName("pos_distance_min");

                entity.Property(e => e.SubType)
                    .HasColumnName("sub_type")
                    .HasColumnType("int");

                entity.Property(e => e.UseSummonerAggroTarget)
                    .HasColumnName("use_summoner_aggro_target")
                    .HasColumnType("bool");

                entity.Property(e => e.UseSummonerFaction)
                    .HasColumnName("use_summoner_faction")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<SpawnFishEffects>(entity =>
            {
                entity.ToTable("spawn_fish_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.Range)
                    .HasColumnName("range")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<SpawnGimmickEffects>(entity =>
            {
                entity.ToTable("spawn_gimmick_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AngVelCoordiateId)
                    .HasColumnName("ang_vel_coordiate_id")
                    .HasColumnType("int");

                entity.Property(e => e.AngVelX).HasColumnName("ang_vel_x");

                entity.Property(e => e.AngVelY).HasColumnName("ang_vel_y");

                entity.Property(e => e.AngVelZ).HasColumnName("ang_vel_z");

                entity.Property(e => e.GimmickId)
                    .HasColumnName("gimmick_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffsetCoordiateId)
                    .HasColumnName("offset_coordiate_id")
                    .HasColumnType("int");

                entity.Property(e => e.OffsetFromSource)
                    .HasColumnName("offset_from_source")
                    .HasColumnType("bool");

                entity.Property(e => e.OffsetX).HasColumnName("offset_x");

                entity.Property(e => e.OffsetY).HasColumnName("offset_y");

                entity.Property(e => e.OffsetZ).HasColumnName("offset_z");

                entity.Property(e => e.Scale).HasColumnName("scale");

                entity.Property(e => e.VelocityCoordiateId)
                    .HasColumnName("velocity_coordiate_id")
                    .HasColumnType("int");

                entity.Property(e => e.VelocityX).HasColumnName("velocity_x");

                entity.Property(e => e.VelocityY).HasColumnName("velocity_y");

                entity.Property(e => e.VelocityZ).HasColumnName("velocity_z");

                entity.HasOne(d => d.Gimmick)
                    .WithMany(p => p.SpawnGimmickEffects)
                    .HasForeignKey(d => d.GimmickId);
            });

            modelBuilder.Entity<SpecialEffects>(entity =>
            {
                entity.ToTable("special_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SpecialEffectTypeId)
                    .HasColumnName("special_effect_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value1)
                    .HasColumnName("value1")
                    .HasColumnType("int");

                entity.Property(e => e.Value2)
                    .HasColumnName("value2")
                    .HasColumnType("int");

                entity.Property(e => e.Value3)
                    .HasColumnName("value3")
                    .HasColumnType("int");

                entity.Property(e => e.Value4)
                    .HasColumnName("value4")
                    .HasColumnType("int");

                entity.Property(e => e.Value5)
                    .HasColumnName("value5")
                    .HasColumnType("int");

                entity.Property(e => e.Value6)
                    .HasColumnName("value6")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Specialties>(entity =>
            {
                entity.ToTable("specialties");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ColZoneGroupId)
                    .HasColumnName("col_zone_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Profit)
                    .HasColumnName("profit")
                    .HasColumnType("int");

                entity.Property(e => e.Ratio)
                    .HasColumnName("ratio")
                    .HasColumnType("int");

                entity.Property(e => e.RowZoneGroupId)
                    .HasColumnName("row_zone_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.VendorExist)
                    .HasColumnName("vendor_exist")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<SpecialtyBundleItems>(entity =>
            {
                entity.ToTable("specialty_bundle_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Profit)
                    .HasColumnName("profit")
                    .HasColumnType("int");

                entity.Property(e => e.Ratio)
                    .HasColumnName("ratio")
                    .HasColumnType("int");

                entity.Property(e => e.SpecialtyBundleId)
                    .HasColumnName("specialty_bundle_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SpecialtyBundleItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.SpecialtyBundle)
                    .WithMany(p => p.SpecialtyBundleItems)
                    .HasForeignKey(d => d.SpecialtyBundleId);
            });

            modelBuilder.Entity<SpecialtyBundles>(entity =>
            {
                entity.ToTable("specialty_bundles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<SpecialtyEventTriggers>(entity =>
            {
                entity.ToTable("specialty_event_triggers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CheckTime)
                    .HasColumnName("check_time")
                    .HasColumnType("int");

                entity.Property(e => e.EventRate)
                    .HasColumnName("event_rate")
                    .HasColumnType("int");

                entity.Property(e => e.EventTime)
                    .HasColumnName("event_time")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.MsgEnd).HasColumnName("msg_end");

                entity.Property(e => e.MsgStart).HasColumnName("msg_start");

                entity.Property(e => e.MsgType)
                    .HasColumnName("msg_type")
                    .HasColumnType("int");

                entity.Property(e => e.TriggerType)
                    .HasColumnName("trigger_type")
                    .HasColumnType("int");

                entity.Property(e => e.TriggerValue1)
                    .HasColumnName("trigger_value_1")
                    .HasColumnType("int");

                entity.Property(e => e.TriggerValue2)
                    .HasColumnName("trigger_value_2")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SpecialtyEventTriggers)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.SpecialtyEventTriggers)
                    .HasForeignKey(d => d.ZoneGroupId);
            });

            modelBuilder.Entity<SpecialtyEvents>(entity =>
            {
                entity.ToTable("specialty_events");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EventType)
                    .HasColumnName("event_type")
                    .HasColumnType("int");

                entity.Property(e => e.EventValue)
                    .HasColumnName("event_value")
                    .HasColumnType("int");

                entity.Property(e => e.SpecialtyEventTriggerId)
                    .HasColumnName("specialty_event_trigger_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.SpecialtyEventTrigger)
                    .WithMany(p => p.SpecialtyEvents)
                    .HasForeignKey(d => d.SpecialtyEventTriggerId);
            });
            
            modelBuilder.Entity<SpecialtyNpcs>(entity =>
            {
                entity.HasKey(o => new { o.NpcId, o.SpecialtyBundleId });

                entity.ToTable("specialty_npcs");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.SpecialtyBundleId)
                    .HasColumnName("specialty_bundle_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.SpecialtyNpcs)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.SpecialtyBundle)
                    .WithMany(p => p.SpecialtyNpcs)
                    .HasForeignKey(d => d.SpecialtyBundleId);
            });
            
            modelBuilder.Entity<SphereAcceptQuestQuests>(entity =>
            {
                entity.ToTable("sphere_accept_quest_quests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");

                entity.Property(e => e.SphereAcceptQuestId)
                    .HasColumnName("sphere_accept_quest_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.SphereAcceptQuest)
                    .WithMany(p => p.SphereAcceptQuestQuests)
                    .HasForeignKey(d => d.SphereAcceptQuestId);
            });

            modelBuilder.Entity<SphereAcceptQuests>(entity =>
            {
                entity.ToTable("sphere_accept_quests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<SphereBubbles>(entity =>
            {
                entity.ToTable("sphere_bubbles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<SphereBuffs>(entity =>
            {
                entity.ToTable("sphere_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AndPet)
                    .HasColumnName("and_pet")
                    .HasColumnType("bool");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.RemoveOnLeaveBuffId)
                    .HasColumnName("remove_on_leave_buff_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.SphereBuffs)
                    .HasForeignKey(d => d.BuffId);
            });

            modelBuilder.Entity<SphereChatBubbles>(entity =>
            {
                entity.ToTable("sphere_chat_bubbles");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Angle)
                    .HasColumnName("angle")
                    .HasColumnType("int");

                entity.Property(e => e.CameraId)
                    .HasColumnName("camera_id")
                    .HasColumnType("int");

                entity.Property(e => e.ChangeSpeakerName).HasColumnName("change_speaker_name");

                entity.Property(e => e.ChatBubbleKindId)
                    .HasColumnName("chat_bubble_kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.Facial).HasColumnName("facial");

                entity.Property(e => e.IsStart)
                    .HasColumnName("is_start")
                    .HasColumnType("bool");

                entity.Property(e => e.NextBubble)
                    .HasColumnName("next_bubble")
                    .HasColumnType("int");

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.NpcSpawnerId)
                    .HasColumnName("npc_spawner_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.Speech).HasColumnName("speech");

                entity.Property(e => e.SphereBubbleId)
                    .HasColumnName("sphere_bubble_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.SphereChatBubbles)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.SphereChatBubbles)
                    .HasForeignKey(d => d.SoundId);

                entity.HasOne(d => d.SphereBubble)
                    .WithMany(p => p.SphereChatBubbles)
                    .HasForeignKey(d => d.SphereBubbleId);
            });

            modelBuilder.Entity<SphereDoodadInteracts>(entity =>
            {
                entity.ToTable("sphere_doodad_interacts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadFamilyId)
                    .HasColumnName("doodad_family_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SphereDoodadInteracts)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<SphereQuestMails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("sphere_quest_mails");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.MailId).HasColumnName("mail_id");
            });

            modelBuilder.Entity<SphereQuests>(entity =>
            {
                entity.ToTable("sphere_quests");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.QuestId)
                    .HasColumnName("quest_id")
                    .HasColumnType("int");

                entity.Property(e => e.QuestTriggerId)
                    .HasColumnName("quest_trigger_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<SphereSkills>(entity =>
            {
                entity.ToTable("sphere_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.MaxRate)
                    .HasColumnName("max_rate")
                    .HasColumnType("int");

                entity.Property(e => e.MinRate)
                    .HasColumnName("min_rate")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.SphereSkills)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<SphereSounds>(entity =>
            {
                entity.ToTable("sphere_sounds");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Broadcast)
                    .HasColumnName("broadcast")
                    .HasColumnType("bool");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.SphereSounds)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<Spheres>(entity =>
            {
                entity.ToTable("spheres");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.EnterOrLeave)
                    .HasColumnName("enter_or_leave")
                    .HasColumnType("bool");

                entity.Property(e => e.IsPersonalMsg)
                    .HasColumnName("is_personal_msg")
                    .HasColumnType("bool");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.SphereDetailId)
                    .HasColumnName("sphere_detail_id")
                    .HasColumnType("int");

                entity.Property(e => e.SphereDetailType).HasColumnName("sphere_detail_type");

                entity.Property(e => e.TeamMsg).HasColumnName("team_msg");

                entity.Property(e => e.TriggerConditionId)
                    .HasColumnName("trigger_condition_id")
                    .HasColumnType("int");

                entity.Property(e => e.TriggerConditionTime)
                    .HasColumnName("trigger_condition_time")
                    .HasColumnType("int");

                entity.Property(e => e.WatchDoodadId)
                    .HasColumnName("watch_doodad_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<SubZones>(entity =>
            {
                entity.ToTable("sub_zones");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.H).HasColumnName("h");

                entity.Property(e => e.Idx)
                    .HasColumnName("idx")
                    .HasColumnType("int");

                entity.Property(e => e.LinkedZoneGroupId)
                    .HasColumnName("linked_zone_group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ParentSubZoneId)
                    .HasColumnName("parent_sub_zone_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundPackId)
                    .HasColumnName("sound_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.W).HasColumnName("w");

                entity.Property(e => e.X).HasColumnName("x");

                entity.Property(e => e.Y).HasColumnName("y");

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.SubZones)
                    .HasForeignKey(d => d.SoundId);

                entity.HasOne(d => d.SoundPack)
                    .WithMany(p => p.SubZones)
                    .HasForeignKey(d => d.SoundPackId);
            });

            modelBuilder.Entity<SystemDoodads>(entity =>
            {
                entity.ToTable("system_doodads");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<SystemFactionRelations>(entity =>
            {
                entity.ToTable("system_faction_relations");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Faction1Id)
                    .HasColumnName("faction1_id")
                    .HasColumnType("int");

                entity.Property(e => e.Faction2Id)
                    .HasColumnName("faction2_id")
                    .HasColumnType("int");

                entity.Property(e => e.StateId)
                    .HasColumnName("state_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<SystemFactions>(entity =>
            {
                entity.ToTable("system_factions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AggroLink)
                    .HasColumnName("aggro_link")
                    .HasColumnType("bool");

                entity.Property(e => e.DiplomacyLinkId)
                    .HasColumnName("diplomacy_link_id")
                    .HasColumnType("int");

                entity.Property(e => e.GuardHelp)
                    .HasColumnName("guard_help")
                    .HasColumnType("bool");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.IsDiplomacyTgt)
                    .HasColumnName("is_diplomacy_tgt")
                    .HasColumnType("bool");

                entity.Property(e => e.MotherId)
                    .HasColumnName("mother_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerName).HasColumnName("owner_name");

                entity.Property(e => e.OwnerTypeId)
                    .HasColumnName("owner_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.PoliticalSystemId)
                    .HasColumnName("political_system_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<TaggedBuffs>(entity =>
            {
                entity.ToTable("tagged_buffs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.TaggedBuffs)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.TaggedBuffs)
                    .HasForeignKey(d => d.TagId);
            });
            
            modelBuilder.Entity<TaggedImmuneBuffs>(entity =>
            {
                entity.HasKey(o => new { o.BuffId });

                entity.ToTable("tagged_immune_buffs");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffTagId)
                    .HasColumnName("buff_tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.TaggedImmuneBuffs)
                    .HasForeignKey(d => d.BuffId);
            });
            
            modelBuilder.Entity<TaggedItems>(entity =>
            {
                entity.ToTable("tagged_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TaggedItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.TaggedItems)
                    .HasForeignKey(d => d.TagId);
            });

            modelBuilder.Entity<TaggedNpcs>(entity =>
            {
                entity.ToTable("tagged_npcs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.NpcId)
                    .HasColumnName("npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Npc)
                    .WithMany(p => p.TaggedNpcs)
                    .HasForeignKey(d => d.NpcId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.TaggedNpcs)
                    .HasForeignKey(d => d.TagId);
            });
            
            modelBuilder.Entity<TaggedRequireBuffs>(entity =>
            {
                entity.HasKey(o => new { o.BuffId });

                entity.ToTable("tagged_require_buffs");

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.BuffTagId)
                    .HasColumnName("buff_tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.TaggedRequireBuffs)
                    .HasForeignKey(d => d.BuffId);
            });
            
            modelBuilder.Entity<TaggedSkills>(entity =>
            {
                entity.ToTable("tagged_skills");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.TaggedSkills)
                    .HasForeignKey(d => d.SkillId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.TaggedSkills)
                    .HasForeignKey(d => d.TagId);
            });

            modelBuilder.Entity<Tags>(entity =>
            {
                entity.ToTable("tags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<Taxations>(entity =>
            {
                entity.ToTable("taxations");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.SealCount)
                    .HasColumnName("seal_count")
                    .HasColumnType("int");

                entity.Property(e => e.Show)
                    .HasColumnName("show")
                    .HasColumnType("bool");

                entity.Property(e => e.Tax)
                    .HasColumnName("tax")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<TodayQuestGoalItems>(entity =>
            {
                entity.ToTable("today_quest_goal_items");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Goal)
                    .HasColumnName("goal")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemNum)
                    .HasColumnName("item_num")
                    .HasColumnType("int");

                entity.Property(e => e.TodayQuestGoalId)
                    .HasColumnName("today_quest_goal_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TodayQuestGoalItems)
                    .HasForeignKey(d => d.ItemId);

                entity.HasOne(d => d.TodayQuestGoal)
                    .WithMany(p => p.TodayQuestGoalItems)
                    .HasForeignKey(d => d.TodayQuestGoalId);
            });

            modelBuilder.Entity<TodayQuestGoals>(entity =>
            {
                entity.ToTable("today_quest_goals");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasColumnType("int");
            });
            
            modelBuilder.Entity<TodayQuestGroupQuests>(entity =>
            {
                entity.HasKey(o => new { o.QuestContextId, o.TodayQuestGroupId });

                entity.ToTable("today_quest_group_quests");

                entity.Property(e => e.QuestContextId)
                    .HasColumnName("quest_context_id")
                    .HasColumnType("int");

                entity.Property(e => e.TodayQuestGroupId)
                    .HasColumnName("today_quest_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.QuestContext)
                    .WithMany(p => p.TodayQuestGroupQuests)
                    .HasForeignKey(d => d.QuestContextId);

                entity.HasOne(d => d.TodayQuestGroup)
                    .WithMany(p => p.TodayQuestGroupQuests)
                    .HasForeignKey(d => d.TodayQuestGroupId);
            });
            
            modelBuilder.Entity<TodayQuestGroups>(entity =>
            {
                entity.ToTable("today_quest_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AutomaticRestart)
                    .HasColumnName("automatic_restart")
                    .HasColumnType("bool");

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.ExpeditionLevelMax)
                    .HasColumnName("expedition_level_max")
                    .HasColumnType("int");

                entity.Property(e => e.ExpeditionLevelMin)
                    .HasColumnName("expedition_level_min")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<TodayQuestSteps>(entity =>
            {
                entity.ToTable("today_quest_steps");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Description).HasColumnName("description");

                entity.Property(e => e.ExpeditionLevelMax)
                    .HasColumnName("expedition_level_max")
                    .HasColumnType("int");

                entity.Property(e => e.ExpeditionLevelMin)
                    .HasColumnName("expedition_level_min")
                    .HasColumnType("int");

                entity.Property(e => e.ExpeditionOnly)
                    .HasColumnName("expedition_only")
                    .HasColumnType("bool");

                entity.Property(e => e.FamilyLevelMax)
                    .HasColumnName("family_level_max")
                    .HasColumnType("int");

                entity.Property(e => e.FamilyLevelMin)
                    .HasColumnName("family_level_min")
                    .HasColumnType("int");

                entity.Property(e => e.FamilyOnly)
                    .HasColumnName("family_only")
                    .HasColumnType("bool");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.ItemNum)
                    .HasColumnName("item_num")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.OrUnitReqs)
                    .HasColumnName("or_unit_reqs")
                    .HasColumnType("bool");

                entity.Property(e => e.RealStep)
                    .HasColumnName("real_step")
                    .HasColumnType("int");

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.TodayQuestSteps)
                    .HasForeignKey(d => d.IconId);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TodayQuestSteps)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<TooltipSkillEffects>(entity =>
            {
                entity.ToTable("tooltip_skill_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.EffectId)
                    .HasColumnName("effect_id")
                    .HasColumnType("int");

                entity.Property(e => e.SkillId)
                    .HasColumnName("skill_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Effect)
                    .WithMany(p => p.TooltipSkillEffects)
                    .HasForeignKey(d => d.EffectId);

                entity.HasOne(d => d.Skill)
                    .WithMany(p => p.TooltipSkillEffects)
                    .HasForeignKey(d => d.SkillId);
            });

            modelBuilder.Entity<TotalCharacterCustoms>(entity =>
            {
                entity.ToTable("total_character_customs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BodyNormalMapId)
                    .HasColumnName("body_normal_map_id")
                    .HasColumnType("int");

                entity.Property(e => e.BodyNormalMapWeight).HasColumnName("body_normal_map_weight");

                entity.Property(e => e.DecoColor)
                    .HasColumnName("deco_color")
                    .HasColumnType("int");

                entity.Property(e => e.DefaultHairColor)
                    .HasColumnName("default_hair_color")
                    .HasColumnType("int");

                entity.Property(e => e.DisplayOrder)
                    .HasColumnName("display_order")
                    .HasColumnType("int");

                entity.Property(e => e.EyebrowColor)
                    .HasColumnName("eyebrow_color")
                    .HasColumnType("int");

                entity.Property(e => e.FaceDiffuseMapId)
                    .HasColumnName("face_diffuse_map_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceEyelashMapId)
                    .HasColumnName("face_eyelash_map_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceFixedDecalAsset0Id)
                    .HasColumnName("face_fixed_decal_asset_0_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceFixedDecalAsset0Weight).HasColumnName("face_fixed_decal_asset_0_weight");

                entity.Property(e => e.FaceFixedDecalAsset1Id)
                    .HasColumnName("face_fixed_decal_asset_1_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceFixedDecalAsset1Weight).HasColumnName("face_fixed_decal_asset_1_weight");

                entity.Property(e => e.FaceFixedDecalAsset2Id)
                    .HasColumnName("face_fixed_decal_asset_2_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceFixedDecalAsset2Weight).HasColumnName("face_fixed_decal_asset_2_weight");

                entity.Property(e => e.FaceFixedDecalAsset3Id)
                    .HasColumnName("face_fixed_decal_asset_3_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceFixedDecalAsset3Weight).HasColumnName("face_fixed_decal_asset_3_weight");

                entity.Property(e => e.FaceFixedDecalAsset4Id)
                    .HasColumnName("face_fixed_decal_asset_4_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceFixedDecalAsset4Weight).HasColumnName("face_fixed_decal_asset_4_weight");

                entity.Property(e => e.FaceFixedDecalAsset5Id)
                    .HasColumnName("face_fixed_decal_asset_5_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceFixedDecalAsset5Weight).HasColumnName("face_fixed_decal_asset_5_weight");

                entity.Property(e => e.FaceMovableDecalAssetId)
                    .HasColumnName("face_movable_decal_asset_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceMovableDecalMoveX)
                    .HasColumnName("face_movable_decal_move_x")
                    .HasColumnType("int");

                entity.Property(e => e.FaceMovableDecalMoveY)
                    .HasColumnName("face_movable_decal_move_y")
                    .HasColumnType("int");

                entity.Property(e => e.FaceMovableDecalRotate).HasColumnName("face_movable_decal_rotate");

                entity.Property(e => e.FaceMovableDecalScale).HasColumnName("face_movable_decal_scale");

                entity.Property(e => e.FaceMovableDecalWeight).HasColumnName("face_movable_decal_weight");

                entity.Property(e => e.FaceNormalMapId)
                    .HasColumnName("face_normal_map_id")
                    .HasColumnType("int");

                entity.Property(e => e.FaceNormalMapWeight).HasColumnName("face_normal_map_weight");

                entity.Property(e => e.HairColorId)
                    .HasColumnName("hair_color_id")
                    .HasColumnType("int");

                entity.Property(e => e.HairId)
                    .HasColumnName("hair_id")
                    .HasColumnType("int");

                entity.Property(e => e.HornColorId)
                    .HasColumnName("horn_color_id")
                    .HasColumnType("int");

                entity.Property(e => e.HornId)
                    .HasColumnName("horn_id")
                    .HasColumnType("int");

                entity.Property(e => e.IconPath).HasColumnName("icon_path");

                entity.Property(e => e.LeftPupilColor)
                    .HasColumnName("left_pupil_color")
                    .HasColumnType("int");

                entity.Property(e => e.LipColor)
                    .HasColumnName("lip_color")
                    .HasColumnType("int");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.Modifier).HasColumnName("modifier");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.NpcOnly)
                    .HasColumnName("npcOnly")
                    .HasColumnType("bool");

                entity.Property(e => e.OwnerTypeId)
                    .HasColumnName("owner_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.RightPupilColor)
                    .HasColumnName("right_pupil_color")
                    .HasColumnType("int");

                entity.Property(e => e.SkinColorId)
                    .HasColumnName("skin_color_id")
                    .HasColumnType("int");

                entity.Property(e => e.TwoToneFirstWidth).HasColumnName("two_tone_first_width");

                entity.Property(e => e.TwoToneHairColor)
                    .HasColumnName("two_tone_hair_color")
                    .HasColumnType("int");

                entity.Property(e => e.TwoToneSecondWidth).HasColumnName("two_tone_second_width");

                entity.HasOne(d => d.BodyNormalMap)
                    .WithMany(p => p.TotalCharacterCustoms)
                    .HasForeignKey(d => d.BodyNormalMapId);

                entity.HasOne(d => d.FaceNormalMap)
                    .WithMany(p => p.TotalCharacterCustoms)
                    .HasForeignKey(d => d.FaceNormalMapId);

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.TotalCharacterCustoms)
                    .HasForeignKey(d => d.ModelId);

                entity.HasOne(d => d.SkinColor)
                    .WithMany(p => p.TotalCharacterCustoms)
                    .HasForeignKey(d => d.SkinColorId);
            });

            modelBuilder.Entity<TowerDefProgSpawnTargets>(entity =>
            {
                entity.ToTable("tower_def_prog_spawn_targets");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DespawnOnNextStep)
                    .HasColumnName("despawn_on_next_step")
                    .HasColumnType("bool");

                entity.Property(e => e.SpawnTargetId)
                    .HasColumnName("spawn_target_id")
                    .HasColumnType("int");

                entity.Property(e => e.SpawnTargetType).HasColumnName("spawn_target_type");

                entity.Property(e => e.TowerDefProgId)
                    .HasColumnName("tower_def_prog_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.TowerDefProg)
                    .WithMany(p => p.TowerDefProgSpawnTargets)
                    .HasForeignKey(d => d.TowerDefProgId);
            });

            modelBuilder.Entity<TowerDefProgs>(entity =>
            {
                entity.ToTable("tower_def_progs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CondCompByAnd)
                    .HasColumnName("cond_comp_by_and")
                    .HasColumnType("bool");

                entity.Property(e => e.CondToNextTime).HasColumnName("cond_to_next_time");

                entity.Property(e => e.Msg).HasColumnName("msg");

                entity.Property(e => e.TowerDefId)
                    .HasColumnName("tower_def_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.TowerDef)
                    .WithMany(p => p.TowerDefProgs)
                    .HasForeignKey(d => d.TowerDefId);
            });

            modelBuilder.Entity<TowerDefs>(entity =>
            {
                entity.ToTable("tower_defs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BroadcastEventToWholeSeamlessWorld)
                    .HasColumnName("broadcast_event_to_whole_seamless_world")
                    .HasColumnType("bool");

                entity.Property(e => e.ColorEnd).HasColumnName("color_end");

                entity.Property(e => e.ColorProgress).HasColumnName("color_progress");

                entity.Property(e => e.ColorStart).HasColumnName("color_start");

                entity.Property(e => e.EndMsg).HasColumnName("end_msg");

                entity.Property(e => e.FirstWaveAfter).HasColumnName("first_wave_after");

                entity.Property(e => e.ForceEndTime).HasColumnName("force_end_time");

                entity.Property(e => e.IconKey).HasColumnName("icon_key");

                entity.Property(e => e.KillNpcCount)
                    .HasColumnName("kill_npc_count")
                    .HasColumnType("int");

                entity.Property(e => e.KillNpcId)
                    .HasColumnName("kill_npc_id")
                    .HasColumnType("int");

                entity.Property(e => e.OperationTimeLimit).HasColumnName("operation_time_limit");

                entity.Property(e => e.StartDayOfWeekBit)
                    .HasColumnName("start_day_of_week_bit")
                    .HasColumnType("int");

                entity.Property(e => e.StartHour)
                    .HasColumnName("start_hour")
                    .HasColumnType("int");

                entity.Property(e => e.StartMinute)
                    .HasColumnName("start_minute")
                    .HasColumnType("int");

                entity.Property(e => e.StartMsg).HasColumnName("start_msg");

                entity.Property(e => e.TargetNpcSpawnerId)
                    .HasColumnName("target_npc_spawner_id")
                    .HasColumnType("int");

                entity.Property(e => e.TitleMsg).HasColumnName("title_msg");

                entity.Property(e => e.Tod).HasColumnName("tod");

                entity.Property(e => e.TodDayInterval)
                    .HasColumnName("tod_day_interval")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<TradegoodCategories>(entity =>
            {
                entity.ToTable("tradegood_categories");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<TradegoodMaterials>(entity =>
            {
                entity.ToTable("tradegood_materials");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.IconId)
                    .HasColumnName("icon_id")
                    .HasColumnType("int");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.Text).HasColumnName("text");

                entity.Property(e => e.TradegoodId)
                    .HasColumnName("tradegood_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Icon)
                    .WithMany(p => p.TradegoodMaterials)
                    .HasForeignKey(d => d.IconId);

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.TradegoodMaterials)
                    .HasForeignKey(d => d.TagId);

                entity.HasOne(d => d.Tradegood)
                    .WithMany(p => p.TradegoodMaterials)
                    .HasForeignKey(d => d.TradegoodId);
            });

            modelBuilder.Entity<TradegoodPriceindices>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("tradegood_priceindices");

                entity.Property(e => e.Charge)
                    .HasColumnName("charge")
                    .HasColumnType("int");

                entity.Property(e => e.PriceIndex)
                    .HasColumnName("price_index")
                    .HasColumnType("int");

                entity.Property(e => e.Stock)
                    .HasColumnName("stock")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Tradegoods>(entity =>
            {
                entity.ToTable("tradegoods");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasColumnType("int");

                entity.Property(e => e.DispOrder)
                    .HasColumnName("disp_order")
                    .HasColumnType("int");

                entity.Property(e => e.ItemId)
                    .HasColumnName("item_id")
                    .HasColumnType("int");

                entity.Property(e => e.Profit)
                    .HasColumnName("profit")
                    .HasColumnType("int");

                entity.Property(e => e.Ratio)
                    .HasColumnName("ratio")
                    .HasColumnType("int");

                entity.Property(e => e.TradegoodCategoryId)
                    .HasColumnName("tradegood_category_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.Tradegoods)
                    .HasForeignKey(d => d.ItemId);
            });

            modelBuilder.Entity<TrainCraftEffects>(entity =>
            {
                entity.ToTable("train_craft_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CraftId)
                    .HasColumnName("craft_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Craft)
                    .WithMany(p => p.TrainCraftEffects)
                    .HasForeignKey(d => d.CraftId);
            });

            modelBuilder.Entity<TrainCraftRankEffects>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("train_craft_rank_effects");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.KindId).HasColumnName("kind_id");

                entity.Property(e => e.RankId).HasColumnName("rank_id");
            });

            modelBuilder.Entity<TransferBindingDoodads>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("transfer_binding_doodads");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.DoodadId)
                    .HasColumnName("doodad_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");
            });
            
            modelBuilder.Entity<TransferBindings>(entity =>
            {
                entity.HasKey(o => new { o.TransferId });

                entity.ToTable("transfer_bindings");

                entity.Property(e => e.AttachPointId)
                    .HasColumnName("attach_point_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.TransferId)
                    .HasColumnName("transfer_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Transfer)
                    .WithMany(p => p.TransferBindings)
                    .HasForeignKey(d => d.TransferId);
            });
            
            modelBuilder.Entity<TransferPaths>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("transfer_paths");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.PathName).HasColumnName("path_name");

                entity.Property(e => e.WaitTimeEnd).HasColumnName("wait_time_end");

                entity.Property(e => e.WaitTimeStart).HasColumnName("wait_time_start");
            });

            modelBuilder.Entity<Transfers>(entity =>
            {
                entity.ToTable("transfers");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Comment).HasColumnName("comment");

                entity.Property(e => e.Cyclic)
                    .HasColumnName("cyclic")
                    .HasColumnType("bool");

                entity.Property(e => e.ModelId)
                    .HasColumnName("model_id")
                    .HasColumnType("int");

                entity.Property(e => e.PathSmoothing).HasColumnName("path_smoothing");

                entity.Property(e => e.WaitTime).HasColumnName("wait_time");

                entity.Property(e => e.WaitTimeBuff)
                    .HasColumnName("wait_time_buff")
                    .HasColumnType("bool");

                entity.HasOne(d => d.Model)
                    .WithMany(p => p.Transfers)
                    .HasForeignKey(d => d.ModelId);
            });

            modelBuilder.Entity<UccApplicables>(entity =>
            {
                entity.ToTable("ucc_applicables");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ActualId)
                    .HasColumnName("actual_id")
                    .HasColumnType("int");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.TooltipMsg).HasColumnName("tooltip_msg");
            });

            modelBuilder.Entity<UccCategories>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ucc_categories");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<UccEmblems>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ucc_emblems");

                entity.Property(e => e.EmblemId).HasColumnName("emblem_id");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.UccSubCategoryId).HasColumnName("ucc_sub_category_id");
            });

            modelBuilder.Entity<UccSubCategories>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ucc_sub_categories");

                entity.Property(e => e.Desc).HasColumnName("desc");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.IsMain).HasColumnName("is_main");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.UccCategoryId).HasColumnName("ucc_category_id");
            });

            modelBuilder.Entity<UiAviSubs>(entity =>
            {
                entity.ToTable("ui_avi_subs");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FileName).HasColumnName("file_name");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");

                entity.Property(e => e.UiAviId)
                    .HasColumnName("ui_avi_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.UiAvi)
                    .WithMany(p => p.UiAviSubs)
                    .HasForeignKey(d => d.UiAviId);
            });

            modelBuilder.Entity<UiAvis>(entity =>
            {
                entity.ToTable("ui_avis");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<UiTexts>(entity =>
            {
                entity.ToTable("ui_texts");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasColumnType("int");

                entity.Property(e => e.Key).HasColumnName("key");

                entity.Property(e => e.Text).HasColumnName("text");
            });

            modelBuilder.Entity<UnitAttributeLimits>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("unit_attribute_limits");

                entity.Property(e => e.Maximum)
                    .HasColumnName("maximum")
                    .HasColumnType("int");

                entity.Property(e => e.Minimum)
                    .HasColumnName("minimum")
                    .HasColumnType("int");

                entity.Property(e => e.UnitAttributeId)
                    .HasColumnName("unit_attribute_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<UnitFormulaVariables>(entity =>
            {
                entity.ToTable("unit_formula_variables");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Key)
                    .HasColumnName("key")
                    .HasColumnType("int");

                entity.Property(e => e.UnitFormulaId)
                    .HasColumnName("unit_formula_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value).HasColumnName("value");

                entity.Property(e => e.VariableKindId)
                    .HasColumnName("variable_kind_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.UnitFormula)
                    .WithMany(p => p.UnitFormulaVariables)
                    .HasForeignKey(d => d.UnitFormulaId);
            });

            modelBuilder.Entity<UnitFormulas>(entity =>
            {
                entity.ToTable("unit_formulas");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Formula).HasColumnName("formula");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerTypeId)
                    .HasColumnName("owner_type_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<UnitModifiers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("unit_modifiers");

                entity.Property(e => e.LinearLevelBonus)
                    .HasColumnName("linear_level_bonus")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.UnitAttributeId)
                    .HasColumnName("unit_attribute_id")
                    .HasColumnType("int");

                entity.Property(e => e.UnitModifierTypeId)
                    .HasColumnName("unit_modifier_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<UnitReqs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("unit_reqs");

                entity.Property(e => e.DisplayMsg)
                    .HasColumnName("display_msg")
                    .HasColumnType("bool");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerId)
                    .HasColumnName("owner_id")
                    .HasColumnType("int");

                entity.Property(e => e.OwnerType).HasColumnName("owner_type");

                entity.Property(e => e.Value1)
                    .HasColumnName("value1")
                    .HasColumnType("int");

                entity.Property(e => e.Value2)
                    .HasColumnName("value2")
                    .HasColumnType("int");

                entity.Property(e => e.Value3)
                    .HasColumnName("value3")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<VehicleModels>(entity =>
            {
                entity.ToTable("vehicle_models");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.AngVel).HasColumnName("angVel");

                entity.Property(e => e.AutoLevel)
                    .HasColumnName("auto_level")
                    .HasColumnType("bool");

                entity.Property(e => e.CanFly)
                    .HasColumnName("can_fly")
                    .HasColumnType("bool");

                entity.Property(e => e.CharAnimSteerBackwardId)
                    .HasColumnName("char_anim_steer_backward_id")
                    .HasColumnType("int");

                entity.Property(e => e.CharAnimSteerForwardId)
                    .HasColumnName("char_anim_steer_forward_id")
                    .HasColumnType("int");

                entity.Property(e => e.CollisionBoxOffsetX).HasColumnName("collision_box_offset_x");

                entity.Property(e => e.CollisionBoxOffsetY).HasColumnName("collision_box_offset_y");

                entity.Property(e => e.CollisionBoxOffsetZ).HasColumnName("collision_box_offset_z");

                entity.Property(e => e.CollisionBoxScaleX).HasColumnName("collision_box_scale_x");

                entity.Property(e => e.CollisionBoxScaleY).HasColumnName("collision_box_scale_y");

                entity.Property(e => e.CollisionBoxScaleZ).HasColumnName("collision_box_scale_z");

                entity.Property(e => e.Damaged25).HasColumnName("damaged25");

                entity.Property(e => e.Damaged50).HasColumnName("damaged50");

                entity.Property(e => e.Damaged75).HasColumnName("damaged75");

                entity.Property(e => e.Dead).HasColumnName("dead");

                entity.Property(e => e.DriverWalk)
                    .HasColumnName("driver_walk")
                    .HasColumnType("bool");

                entity.Property(e => e.Dying).HasColumnName("dying");

                entity.Property(e => e.FloatingHeight).HasColumnName("floating_height");

                entity.Property(e => e.FloatingWaveHeight).HasColumnName("floating_wave_height");

                entity.Property(e => e.FloatingWavePeriodRatio).HasColumnName("floating_wave_period_ratio");

                entity.Property(e => e.InstalledTurret)
                    .HasColumnName("installed_turret")
                    .HasColumnType("bool");

                entity.Property(e => e.LinDeaccelInertia).HasColumnName("lin_deaccel_inertia");

                entity.Property(e => e.LinInertia).HasColumnName("lin_inertia");

                entity.Property(e => e.MaxClimbAng).HasColumnName("max_climb_ang");

                entity.Property(e => e.Normal).HasColumnName("normal");

                entity.Property(e => e.RotDeaccelInertia).HasColumnName("rot_deaccel_inertia");

                entity.Property(e => e.RotInertia).HasColumnName("rot_inertia");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.SuspAxle)
                    .HasColumnName("susp_axle")
                    .HasColumnType("bool");

                entity.Property(e => e.SuspStroke).HasColumnName("susp_stroke");

                entity.Property(e => e.TrailAlignRatio).HasColumnName("trail_align_ratio");

                entity.Property(e => e.TurretPitchAngleMax).HasColumnName("turret_pitch_angle_max");

                entity.Property(e => e.TurretPitchAngleMin).HasColumnName("turret_pitch_angle_min");

                entity.Property(e => e.TurretPitchAngvel).HasColumnName("turret_pitch_angvel");

                entity.Property(e => e.TurretYawAngleMax).HasColumnName("turret_yaw_angle_max");

                entity.Property(e => e.TurretYawAngleMin).HasColumnName("turret_yaw_angle_min");

                entity.Property(e => e.TurretYawAngvel).HasColumnName("turret_yaw_angvel");

                entity.Property(e => e.UseCenterSpindle)
                    .HasColumnName("use_center_spindle")
                    .HasColumnType("bool");

                entity.Property(e => e.UseProxyCollision)
                    .HasColumnName("use_proxy_collision")
                    .HasColumnType("bool");

                entity.Property(e => e.UseWheeledVehicleSimulation)
                    .HasColumnName("use_wheeled_vehicle_simulation")
                    .HasColumnType("bool");

                entity.Property(e => e.Velocity).HasColumnName("velocity");

                entity.Property(e => e.Wheel).HasColumnName("wheel");

                entity.Property(e => e.Wheel2).HasColumnName("wheel2");

                entity.Property(e => e.WheeledVehicleBallastBoxX).HasColumnName("wheeled_vehicle_ballast_box_x");

                entity.Property(e => e.WheeledVehicleBallastBoxY).HasColumnName("wheeled_vehicle_ballast_box_y");

                entity.Property(e => e.WheeledVehicleBallastBoxZ).HasColumnName("wheeled_vehicle_ballast_box_z");

                entity.Property(e => e.WheeledVehicleBallastMass).HasColumnName("wheeled_vehicle_ballast_mass");

                entity.Property(e => e.WheeledVehicleBallastPosY).HasColumnName("wheeled_vehicle_ballast_pos_y");

                entity.Property(e => e.WheeledVehicleBallastPosZ).HasColumnName("wheeled_vehicle_ballast_pos_z");

                entity.Property(e => e.WheeledVehicleBrakeTorque).HasColumnName("wheeled_vehicle_brake_torque");

                entity.Property(e => e.WheeledVehicleDespawnOnSpeedOver)
                    .HasColumnName("wheeled_vehicle_despawn_on_speed_over")
                    .HasColumnType("bool");

                entity.Property(e => e.WheeledVehicleDrive)
                    .HasColumnName("wheeled_vehicle_drive")
                    .HasColumnType("int");

                entity.Property(e => e.WheeledVehicleFrictionRatio).HasColumnName("wheeled_vehicle_friction_ratio");

                entity.Property(e => e.WheeledVehicleFrontOptimalSa).HasColumnName("wheeled_vehicle_front_optimal_sa");

                entity.Property(e => e.WheeledVehicleGearSpeedRatio1).HasColumnName("wheeled_vehicle_gear_speed_ratio_1");

                entity.Property(e => e.WheeledVehicleGearSpeedRatio2).HasColumnName("wheeled_vehicle_gear_speed_ratio_2");

                entity.Property(e => e.WheeledVehicleGearSpeedRatio3).HasColumnName("wheeled_vehicle_gear_speed_ratio_3");

                entity.Property(e => e.WheeledVehicleGearSpeedRatioReverse).HasColumnName("wheeled_vehicle_gear_speed_ratio_reverse");

                entity.Property(e => e.WheeledVehicleMass).HasColumnName("wheeled_vehicle_mass");

                entity.Property(e => e.WheeledVehicleMaxGear)
                    .HasColumnName("wheeled_vehicle_max_gear")
                    .HasColumnType("int");

                entity.Property(e => e.WheeledVehiclePower).HasColumnName("wheeled_vehicle_power");

                entity.Property(e => e.WheeledVehicleRearOptimalSa).HasColumnName("wheeled_vehicle_rear_optimal_sa");

                entity.Property(e => e.WheeledVehicleSpeedLimit).HasColumnName("wheeled_vehicle_speed_limit");

                entity.Property(e => e.WheeledVehicleSteer)
                    .HasColumnName("wheeled_vehicle_steer")
                    .HasColumnType("int");

                entity.Property(e => e.WheeledVehicleSuspDamping).HasColumnName("wheeled_vehicle_susp_damping");

                entity.Property(e => e.WheeledVehicleSuspFrontAxisType)
                    .HasColumnName("wheeled_vehicle_susp_front_axis_type")
                    .HasColumnType("int");

                entity.Property(e => e.WheeledVehicleSuspRearAxisType)
                    .HasColumnName("wheeled_vehicle_susp_rear_axis_type")
                    .HasColumnType("int");

                entity.Property(e => e.WheeledVehicleSuspStroke).HasColumnName("wheeled_vehicle_susp_stroke");

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.VehicleModels)
                    .HasForeignKey(d => d.SoundId);
            });

            modelBuilder.Entity<WearableFormulas>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wearable_formulas");

                entity.Property(e => e.Formula).HasColumnName("formula");

                entity.Property(e => e.KindId)
                    .HasColumnName("kind_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<WearableKinds>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wearable_kinds");

                entity.Property(e => e.ArmorTypeId)
                    .HasColumnName("armor_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.DurabilityRatio).HasColumnName("durability_ratio");

                entity.Property(e => e.ExtraDamageBlunt)
                    .HasColumnName("extra_damage_blunt")
                    .HasColumnType("int");

                entity.Property(e => e.ExtraDamagePierce)
                    .HasColumnName("extra_damage_pierce")
                    .HasColumnType("int");

                entity.Property(e => e.ExtraDamageSlash)
                    .HasColumnName("extra_damage_slash")
                    .HasColumnType("int");

                entity.Property(e => e.FullBuffId)
                    .HasColumnName("full_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.HalfBuffId)
                    .HasColumnName("half_buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundMaterialId)
                    .HasColumnName("sound_material_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<WearableSlots>(entity =>
            {
                entity.ToTable("wearable_slots");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Coverage)
                    .HasColumnName("coverage")
                    .HasColumnType("int");

                entity.Property(e => e.GearScoreMultiplier)
                    .HasColumnName("gear_score_multiplier")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<Wearables>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wearables");

                entity.Property(e => e.ArmorBp)
                    .HasColumnName("armor_bp")
                    .HasColumnType("int");

                entity.Property(e => e.ArmorTypeId)
                    .HasColumnName("armor_type_id")
                    .HasColumnType("int");

                entity.Property(e => e.MagicResistanceBp)
                    .HasColumnName("magic_resistance_bp")
                    .HasColumnType("int");

                entity.Property(e => e.SlotTypeId)
                    .HasColumnName("slot_type_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<WiDetails>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wi_details");

                entity.Property(e => e.ApplyExpert)
                    .HasColumnName("apply_expert")
                    .HasColumnType("bool");

                entity.Property(e => e.DistanceSqrt)
                    .HasColumnName("distance_sqrt")
                    .HasColumnType("int");

                entity.Property(e => e.Lp)
                    .HasColumnName("lp")
                    .HasColumnType("int");

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<WiGroupWis>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wi_group_wis");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.WiGroupId)
                    .HasColumnName("wi_group_id")
                    .HasColumnType("INT");

                entity.Property(e => e.WiId)
                    .HasColumnName("wi_id")
                    .HasColumnType("INT");
            });

            modelBuilder.Entity<WiGroups>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("wi_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("INT");

                entity.Property(e => e.Name).HasColumnName("name");
            });

            modelBuilder.Entity<WorldGroups>(entity =>
            {
                entity.ToTable("world_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisplayText).HasColumnName("display_text");

                entity.Property(e => e.H)
                    .HasColumnName("h")
                    .HasColumnType("int");

                entity.Property(e => e.ImageH)
                    .HasColumnName("image_h")
                    .HasColumnType("int");

                entity.Property(e => e.ImageMap)
                    .HasColumnName("image_map")
                    .HasColumnType("int");

                entity.Property(e => e.ImageW)
                    .HasColumnName("image_w")
                    .HasColumnType("int");

                entity.Property(e => e.ImageX)
                    .HasColumnName("image_x")
                    .HasColumnType("int");

                entity.Property(e => e.ImageY)
                    .HasColumnName("image_y")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.TargetId)
                    .HasColumnName("target_id")
                    .HasColumnType("int");

                entity.Property(e => e.W)
                    .HasColumnName("w")
                    .HasColumnType("int");

                entity.Property(e => e.X)
                    .HasColumnName("x")
                    .HasColumnType("int");

                entity.Property(e => e.Y)
                    .HasColumnName("y")
                    .HasColumnType("int");
            });

            modelBuilder.Entity<WorldMessageEffects>(entity =>
            {
                entity.ToTable("world_message_effects");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.FactionScopeId)
                    .HasColumnName("faction_scope_id")
                    .HasColumnType("int");

                entity.Property(e => e.IconKey).HasColumnName("icon_key");

                entity.Property(e => e.KillHero)
                    .HasColumnName("kill_hero")
                    .HasColumnType("bool");

                entity.Property(e => e.KillStreakCount)
                    .HasColumnName("kill_streak_count")
                    .HasColumnType("int");

                entity.Property(e => e.Message).HasColumnName("message");

                entity.Property(e => e.ZoneGroupOnly)
                    .HasColumnName("zone_group_only")
                    .HasColumnType("bool");

                entity.Property(e => e.ZoneGroupWarState)
                    .HasColumnName("zone_group_war_state")
                    .HasColumnType("bool");
            });

            modelBuilder.Entity<WorldSpecConfigs>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("world_spec_configs");

                entity.Property(e => e.SpecialtyAdjustDown).HasColumnName("specialty_adjust_down");

                entity.Property(e => e.SpecialtyAdjustUp).HasColumnName("specialty_adjust_up");

                entity.Property(e => e.SpecialtyMax).HasColumnName("specialty_max");

                entity.Property(e => e.SpecialtyMin).HasColumnName("specialty_min");

                entity.Property(e => e.TradegoodsAdjustDown).HasColumnName("tradegoods_adjust_down");

                entity.Property(e => e.TradegoodsAdjustUp).HasColumnName("tradegoods_adjust_up");

                entity.Property(e => e.TradegoodsMax).HasColumnName("tradegoods_max");

                entity.Property(e => e.TradegoodsMin).HasColumnName("tradegoods_min");

                entity.Property(e => e.WorldId).HasColumnName("world_id");
            });

            modelBuilder.Entity<ZoneClimateElems>(entity =>
            {
                entity.ToTable("zone_climate_elems");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.ClimateId)
                    .HasColumnName("climate_id")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneClimateId)
                    .HasColumnName("zone_climate_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Climate)
                    .WithMany(p => p.ZoneClimateElems)
                    .HasForeignKey(d => d.ClimateId);

                entity.HasOne(d => d.ZoneClimate)
                    .WithMany(p => p.ZoneClimateElems)
                    .HasForeignKey(d => d.ZoneClimateId);
            });

            modelBuilder.Entity<ZoneClimates>(entity =>
            {
                entity.ToTable("zone_climates");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();
            });

            modelBuilder.Entity<ZoneGroupBannedTags>(entity =>
            {
                entity.ToTable("zone_group_banned_tags");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BannedPeriodsId)
                    .HasColumnName("banned_periods_id")
                    .HasColumnType("int");

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasColumnType("int");

                entity.Property(e => e.Usage).HasColumnName("usage");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.Tag)
                    .WithMany(p => p.ZoneGroupBannedTags)
                    .HasForeignKey(d => d.TagId);

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.ZoneGroupBannedTags)
                    .HasForeignKey(d => d.ZoneGroupId);
            });

            modelBuilder.Entity<ZoneGroups>(entity =>
            {
                entity.ToTable("zone_groups");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.BuffId)
                    .HasColumnName("buff_id")
                    .HasColumnType("int");

                entity.Property(e => e.DisplayText).HasColumnName("display_text");

                entity.Property(e => e.EnablePhysicsCollisionDamage)
                    .HasColumnName("enable_physics_collision_damage")
                    .HasColumnType("bool");

                entity.Property(e => e.FactionChatRegionId)
                    .HasColumnName("faction_chat_region_id")
                    .HasColumnType("int");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.FishingLandLootPackId)
                    .HasColumnName("fishing_land_loot_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.FishingSeaLootPackId)
                    .HasColumnName("fishing_sea_loot_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.H).HasColumnName("h");

                entity.Property(e => e.ImageMap)
                    .HasColumnName("image_map")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.PirateDesperado)
                    .HasColumnName("pirate_desperado")
                    .HasColumnType("bool");

                entity.Property(e => e.SoundId)
                    .HasColumnName("sound_id")
                    .HasColumnType("int");

                entity.Property(e => e.SoundPackId)
                    .HasColumnName("sound_pack_id")
                    .HasColumnType("int");

                entity.Property(e => e.TargetId)
                    .HasColumnName("target_id")
                    .HasColumnType("int");

                entity.Property(e => e.W).HasColumnName("w");

                entity.Property(e => e.X).HasColumnName("x");

                entity.Property(e => e.Y).HasColumnName("y");

                entity.HasOne(d => d.Buff)
                    .WithMany(p => p.ZoneGroups)
                    .HasForeignKey(d => d.BuffId);

                entity.HasOne(d => d.FactionChatRegion)
                    .WithMany(p => p.ZoneGroups)
                    .HasForeignKey(d => d.FactionChatRegionId);

                entity.HasOne(d => d.Sound)
                    .WithMany(p => p.ZoneGroups)
                    .HasForeignKey(d => d.SoundId);

                entity.HasOne(d => d.SoundPack)
                    .WithMany(p => p.ZoneGroups)
                    .HasForeignKey(d => d.SoundPackId);
            });

            modelBuilder.Entity<ZoneWaitingFactions>(entity =>
            {
                entity.ToTable("zone_waiting_factions");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.InReturnId)
                    .HasColumnName("in_return_id")
                    .HasColumnType("int");

                entity.Property(e => e.MemberNum)
                    .HasColumnName("member_num")
                    .HasColumnType("int");

                entity.Property(e => e.OutReturnId)
                    .HasColumnName("out_return_id")
                    .HasColumnType("int");

                entity.Property(e => e.SystemFactionId)
                    .HasColumnName("system_faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneWaitingId)
                    .HasColumnName("zone_waiting_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.SystemFaction)
                    .WithMany(p => p.ZoneWaitingFactions)
                    .HasForeignKey(d => d.SystemFactionId);

                entity.HasOne(d => d.ZoneWaiting)
                    .WithMany(p => p.ZoneWaitingFactions)
                    .HasForeignKey(d => d.ZoneWaitingId);
            });

            modelBuilder.Entity<ZoneWaitings>(entity =>
            {
                entity.ToTable("zone_waitings");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.DisplayText).HasColumnName("display_text");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ZoneGroupId)
                    .HasColumnName("zone_group_id")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneGroup)
                    .WithMany(p => p.ZoneWaitings)
                    .HasForeignKey(d => d.ZoneGroupId);
            });

            modelBuilder.Entity<Zones>(entity =>
            {
                entity.ToTable("zones");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasColumnType("int")
                    .ValueGeneratedNever();

                entity.Property(e => e.Closed)
                    .HasColumnName("closed")
                    .HasColumnType("bool");

                entity.Property(e => e.DisplayText).HasColumnName("display_text");

                entity.Property(e => e.FactionId)
                    .HasColumnName("faction_id")
                    .HasColumnType("int");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasColumnType("int");

                entity.Property(e => e.Name).HasColumnName("name");

                entity.Property(e => e.ZoneClimateId)
                    .HasColumnName("zone_climate_id")
                    .HasColumnType("int");

                entity.Property(e => e.ZoneKey)
                    .HasColumnName("zone_key")
                    .HasColumnType("int");

                entity.HasOne(d => d.ZoneClimate)
                    .WithMany(p => p.Zones)
                    .HasForeignKey(d => d.ZoneClimateId);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
